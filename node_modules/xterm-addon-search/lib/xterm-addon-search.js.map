{"version":3,"file":"xterm-addon-search.js","mappings":"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","sources":["webpack://SearchAddon/webpack/universalModuleDefinition","webpack://SearchAddon/../../src/common/EventEmitter.ts","webpack://SearchAddon/../../src/common/Lifecycle.ts","webpack://SearchAddon/webpack/bootstrap","webpack://SearchAddon/./src/SearchAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SearchAddon\"] = factory();\n\telse\n\t\troot[\"SearchAddon\"] = factory();\n})(self, () => {\nreturn ","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    this.clearListeners();\n    this._disposed = true;\n  }\n\n  public clearListeners(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\nexport class MutableDisposable<T extends IDisposable> implements IDisposable {\n  private _value?: T;\n  private _isDisposed = false;\n\n  /**\n   * Gets the value if it exists.\n   */\n  public get value(): T | undefined {\n    return this._isDisposed ? undefined : this._value;\n  }\n\n  /**\n   * Sets the value, disposing of the old value if it exists.\n   */\n  public set value(value: T | undefined) {\n    if (this._isDisposed || value === this._value) {\n      return;\n    }\n    this._value?.dispose();\n    this._value = value;\n  }\n\n  /**\n   * Resets the stored value and disposes of the previously stored value.\n   */\n  public clear(): void {\n    this.value = undefined;\n  }\n\n  public dispose(): void {\n    this._isDisposed = true;\n    this._value?.dispose();\n    this._value = undefined;\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, IDisposable, ITerminalAddon, IDecoration } from 'xterm';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable, disposeArray, MutableDisposable } from 'common/Lifecycle';\n\nexport interface ISearchOptions {\n  regex?: boolean;\n  wholeWord?: boolean;\n  caseSensitive?: boolean;\n  incremental?: boolean;\n  decorations?: ISearchDecorationOptions;\n  noScroll?: boolean;\n}\n\ninterface ISearchDecorationOptions {\n  matchBackground?: string;\n  matchBorder?: string;\n  matchOverviewRuler: string;\n  activeMatchBackground?: string;\n  activeMatchBorder?: string;\n  activeMatchColorOverviewRuler: string;\n}\n\nexport interface ISearchPosition {\n  startCol: number;\n  startRow: number;\n}\n\nexport interface ISearchAddonOptions {\n  highlightLimit: number;\n}\n\nexport interface ISearchResult {\n  term: string;\n  col: number;\n  row: number;\n  size: number;\n}\n\ntype LineCacheEntry = [\n  /**\n   * The string representation of a line (as opposed to the buffer cell representation).\n   */\n  lineAsString: string,\n  /**\n   * The offsets where each line starts when the entry describes a wrapped line.\n   */\n  lineOffsets: number[]\n];\n\ninterface IHighlight extends IDisposable {\n  decoration: IDecoration;\n  match: ISearchResult;\n}\n\nconst NON_WORD_CHARACTERS = ' ~!@#$%^&*()+`-=[]{}|\\\\;:\"\\',./<>?';\nconst LINES_CACHE_TIME_TO_LIVE = 15 * 1000; // 15 secs\nconst DEFAULT_HIGHLIGHT_LIMIT = 1000;\n\nexport class SearchAddon extends Disposable implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n  private _cachedSearchTerm: string | undefined;\n  private _highlightedLines: Set<number> = new Set();\n  private _highlightDecorations: IHighlight[] = [];\n  private _selectedDecoration: MutableDisposable<IHighlight> = this.register(new MutableDisposable());\n  private _highlightLimit: number;\n  private _lastSearchOptions: ISearchOptions | undefined;\n  private _highlightTimeout: number | undefined;\n  /**\n   * translateBufferLineToStringWithWrap is a fairly expensive call.\n   * We memoize the calls into an array that has a time based ttl.\n   * _linesCache is also invalidated when the terminal cursor moves.\n   */\n  private _linesCache: LineCacheEntry[] | undefined;\n  private _linesCacheTimeoutId = 0;\n  private _cursorMoveListener: IDisposable | undefined;\n  private _resizeListener: IDisposable | undefined;\n\n  private readonly _onDidChangeResults = this.register(new EventEmitter<{ resultIndex: number, resultCount: number }>());\n  public readonly onDidChangeResults = this._onDidChangeResults.event;\n\n  constructor(options?: Partial<ISearchAddonOptions>) {\n    super();\n\n    this._highlightLimit = options?.highlightLimit ?? DEFAULT_HIGHLIGHT_LIMIT;\n  }\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n    this.register(this._terminal.onWriteParsed(() => this._updateMatches()));\n    this.register(this._terminal.onResize(() => this._updateMatches()));\n    this.register(toDisposable(() => this.clearDecorations()));\n  }\n\n  private _updateMatches(): void {\n    if (this._highlightTimeout) {\n      window.clearTimeout(this._highlightTimeout);\n    }\n    if (this._cachedSearchTerm && this._lastSearchOptions?.decorations) {\n      this._highlightTimeout = setTimeout(() => {\n        const term = this._cachedSearchTerm;\n        this._cachedSearchTerm = undefined;\n        this.findPrevious(term!, { ...this._lastSearchOptions, incremental: true, noScroll: true });\n      }, 200);\n    }\n  }\n\n  public clearDecorations(retainCachedSearchTerm?: boolean): void {\n    this._selectedDecoration.clear();\n    disposeArray(this._highlightDecorations);\n    this._highlightDecorations = [];\n    this._highlightedLines.clear();\n    if (!retainCachedSearchTerm) {\n      this._cachedSearchTerm = undefined;\n    }\n  }\n\n  /**\n   * Find the next instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @returns Whether a result was found.\n   */\n  public findNext(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    this._lastSearchOptions = searchOptions;\n    if (searchOptions?.decorations) {\n      if (this._cachedSearchTerm === undefined || term !== this._cachedSearchTerm) {\n        this._highlightAllMatches(term, searchOptions);\n      }\n    }\n\n    const found = this._findNextAndSelect(term, searchOptions);\n    this._fireResults(searchOptions);\n    this._cachedSearchTerm = term;\n\n    return found;\n  }\n\n  private _highlightAllMatches(term: string, searchOptions: ISearchOptions): void {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    if (!term || term.length === 0) {\n      this.clearDecorations();\n      return;\n    }\n    searchOptions = searchOptions || {};\n\n    // new search, clear out the old decorations\n    this.clearDecorations(true);\n\n    const searchResultsWithHighlight: ISearchResult[] = [];\n    let prevResult: ISearchResult | undefined = undefined;\n    let result = this._find(term, 0, 0, searchOptions);\n    while (result && (prevResult?.row !== result.row || prevResult?.col !== result.col)) {\n      if (searchResultsWithHighlight.length >= this._highlightLimit) {\n        break;\n      }\n      prevResult = result;\n      searchResultsWithHighlight.push(prevResult);\n      result = this._find(\n        term,\n        prevResult.col + prevResult.term.length >= this._terminal.cols ? prevResult.row + 1 : prevResult.row,\n        prevResult.col + prevResult.term.length >= this._terminal.cols ? 0 : prevResult.col + 1,\n        searchOptions\n      );\n    }\n    for (const match of searchResultsWithHighlight) {\n      const decoration = this._createResultDecoration(match, searchOptions.decorations!);\n      if (decoration) {\n        this._highlightedLines.add(decoration.marker.line);\n        this._highlightDecorations.push({ decoration, match, dispose() { decoration.dispose(); } });\n      }\n    }\n  }\n\n  private _find(term: string, startRow: number, startCol: number, searchOptions?: ISearchOptions): ISearchResult | undefined {\n    if (!this._terminal || !term || term.length === 0) {\n      this._terminal?.clearSelection();\n      this.clearDecorations();\n      return undefined;\n    }\n    if (startCol > this._terminal.cols) {\n      throw new Error(`Invalid col: ${startCol} to search in terminal of ${this._terminal.cols} cols`);\n    }\n\n    let result: ISearchResult | undefined = undefined;\n\n    this._initLinesCache();\n\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    // Search startRow\n    result = this._findInLine(term, searchPosition, searchOptions);\n    // Search from startRow + 1 to end\n    if (!result) {\n\n      for (let y = startRow + 1; y < this._terminal.buffer.active.baseY + this._terminal.rows; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        // If the current line is wrapped line, increase index of column to ignore the previous scan\n        // Otherwise, reset beginning column index to zero with set new unwrapped line index\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  private _findNextAndSelect(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal || !term || term.length === 0) {\n      this._terminal?.clearSelection();\n      this.clearDecorations();\n      return false;\n    }\n\n    const prevSelectedPos = this._terminal.getSelectionPosition();\n    this._terminal.clearSelection();\n\n    let startCol = 0;\n    let startRow = 0;\n    if (prevSelectedPos) {\n      if (this._cachedSearchTerm === term) {\n        startCol = prevSelectedPos.end.x;\n        startRow = prevSelectedPos.end.y;\n      } else {\n        startCol = prevSelectedPos.start.x;\n        startRow = prevSelectedPos.start.y;\n      }\n    }\n\n    this._initLinesCache();\n\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    // Search startRow\n    let result = this._findInLine(term, searchPosition, searchOptions);\n    // Search from startRow + 1 to end\n    if (!result) {\n\n      for (let y = startRow + 1; y < this._terminal.buffer.active.baseY + this._terminal.rows; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        // If the current line is wrapped line, increase index of column to ignore the previous scan\n        // Otherwise, reset beginning column index to zero with set new unwrapped line index\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n    // If we hit the bottom and didn't search from the very top wrap back up\n    if (!result && startRow !== 0) {\n      for (let y = 0; y < startRow; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    // If there is only one result, wrap back and return selection if it exists.\n    if (!result && prevSelectedPos) {\n      searchPosition.startRow = prevSelectedPos.start.y;\n      searchPosition.startCol = 0;\n      result = this._findInLine(term, searchPosition, searchOptions);\n    }\n\n    // Set selection and scroll if a result was found\n    return this._selectResult(result, searchOptions?.decorations, searchOptions?.noScroll);\n  }\n  /**\n   * Find the previous instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @returns Whether a result was found.\n   */\n  public findPrevious(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    this._lastSearchOptions = searchOptions;\n    if (searchOptions?.decorations) {\n      if (this._cachedSearchTerm === undefined || term !== this._cachedSearchTerm) {\n        this._highlightAllMatches(term, searchOptions);\n      }\n    }\n\n    const found = this._findPreviousAndSelect(term, searchOptions);\n    this._fireResults(searchOptions);\n    this._cachedSearchTerm = term;\n\n    return found;\n  }\n\n  private _fireResults(searchOptions?: ISearchOptions): void {\n    if (searchOptions?.decorations) {\n      let resultIndex = -1;\n      if (this._selectedDecoration.value) {\n        const selectedMatch = this._selectedDecoration.value.match;\n        for (let i = 0; i < this._highlightDecorations.length; i++) {\n          const match = this._highlightDecorations[i].match;\n          if (match.row === selectedMatch.row && match.col === selectedMatch.col && match.size === selectedMatch.size) {\n            resultIndex = i;\n            break;\n          }\n        }\n      }\n      this._onDidChangeResults.fire({ resultIndex, resultCount: this._highlightDecorations.length });\n    }\n  }\n\n  private _findPreviousAndSelect(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n    if (!this._terminal || !term || term.length === 0) {\n      this._terminal?.clearSelection();\n      this.clearDecorations();\n      return false;\n    }\n\n    const prevSelectedPos = this._terminal.getSelectionPosition();\n    this._terminal.clearSelection();\n\n    let startRow = this._terminal.buffer.active.baseY + this._terminal.rows - 1;\n    let startCol = this._terminal.cols;\n    const isReverseSearch = true;\n\n    this._initLinesCache();\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    let result: ISearchResult | undefined;\n    if (prevSelectedPos) {\n      searchPosition.startRow = startRow = prevSelectedPos.start.y;\n      searchPosition.startCol = startCol = prevSelectedPos.start.x;\n      if (this._cachedSearchTerm !== term) {\n        // Try to expand selection to right first.\n        result = this._findInLine(term, searchPosition, searchOptions, false);\n        if (!result) {\n          // If selection was not able to be expanded to the right, then try reverse search\n          searchPosition.startRow = startRow = prevSelectedPos.end.y;\n          searchPosition.startCol = startCol = prevSelectedPos.end.x;\n        }\n      }\n    }\n\n    if (!result) {\n      result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n    }\n\n    // Search from startRow - 1 to top\n    if (!result) {\n      searchPosition.startCol = Math.max(searchPosition.startCol, this._terminal.cols);\n      for (let y = startRow - 1; y >= 0; y--) {\n        searchPosition.startRow = y;\n        result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n      }\n    }\n    // If we hit the top and didn't search from the very bottom wrap back down\n    if (!result && startRow !== (this._terminal.buffer.active.baseY + this._terminal.rows - 1)) {\n      for (let y = (this._terminal.buffer.active.baseY + this._terminal.rows - 1); y >= startRow; y--) {\n        searchPosition.startRow = y;\n        result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    // Set selection and scroll if a result was found\n    return this._selectResult(result, searchOptions?.decorations, searchOptions?.noScroll);\n  }\n\n  /**\n   * Sets up a line cache with a ttl\n   */\n  private _initLinesCache(): void {\n    const terminal = this._terminal!;\n    if (!this._linesCache) {\n      this._linesCache = new Array(terminal.buffer.active.length);\n      this._cursorMoveListener = terminal.onCursorMove(() => this._destroyLinesCache());\n      this._resizeListener = terminal.onResize(() => this._destroyLinesCache());\n    }\n\n    window.clearTimeout(this._linesCacheTimeoutId);\n    this._linesCacheTimeoutId = window.setTimeout(() => this._destroyLinesCache(), LINES_CACHE_TIME_TO_LIVE);\n  }\n\n  private _destroyLinesCache(): void {\n    this._linesCache = undefined;\n    if (this._cursorMoveListener) {\n      this._cursorMoveListener.dispose();\n      this._cursorMoveListener = undefined;\n    }\n    if (this._resizeListener) {\n      this._resizeListener.dispose();\n      this._resizeListener = undefined;\n    }\n    if (this._linesCacheTimeoutId) {\n      window.clearTimeout(this._linesCacheTimeoutId);\n      this._linesCacheTimeoutId = 0;\n    }\n  }\n\n  /**\n   * A found substring is a whole word if it doesn't have an alphanumeric character directly\n   * adjacent to it.\n   * @param searchIndex starting indext of the potential whole word substring\n   * @param line entire string in which the potential whole word was found\n   * @param term the substring that starts at searchIndex\n   */\n  private _isWholeWord(searchIndex: number, line: string, term: string): boolean {\n    return ((searchIndex === 0) || (NON_WORD_CHARACTERS.includes(line[searchIndex - 1]))) &&\n      (((searchIndex + term.length) === line.length) || (NON_WORD_CHARACTERS.includes(line[searchIndex + term.length])));\n  }\n\n  /**\n   * Searches a line for a search term. Takes the provided terminal line and searches the text line,\n   * which may contain subsequent terminal lines if the text is wrapped. If the provided line number\n   * is part of a wrapped text line that started on an earlier line then it is skipped since it will\n   * be properly searched when the terminal line that the text starts on is searched.\n   * @param term The search term.\n   * @param searchPosition The position to start the search.\n   * @param searchOptions Search options.\n   * @param isReverseSearch Whether the search should start from the right side of the terminal and\n   * search to the left.\n   * @returns The search result if it was found.\n   */\n  protected _findInLine(term: string, searchPosition: ISearchPosition, searchOptions: ISearchOptions = {}, isReverseSearch: boolean = false): ISearchResult | undefined {\n    const terminal = this._terminal!;\n    const row = searchPosition.startRow;\n    const col = searchPosition.startCol;\n\n    // Ignore wrapped lines, only consider on unwrapped line (first row of command string).\n    const firstLine = terminal.buffer.active.getLine(row);\n    if (firstLine?.isWrapped) {\n      if (isReverseSearch) {\n        searchPosition.startCol += terminal.cols;\n        return;\n      }\n\n      // This will iterate until we find the line start.\n      // When we find it, we will search using the calculated start column.\n      searchPosition.startRow--;\n      searchPosition.startCol += terminal.cols;\n      return this._findInLine(term, searchPosition, searchOptions);\n    }\n    let cache = this._linesCache?.[row];\n    if (!cache) {\n      cache = this._translateBufferLineToStringWithWrap(row, true);\n      if (this._linesCache) {\n        this._linesCache[row] = cache;\n      }\n    }\n    const [stringLine, offsets] = cache;\n\n    const offset = this._bufferColsToStringOffset(row, col);\n    const searchTerm = searchOptions.caseSensitive ? term : term.toLowerCase();\n    const searchStringLine = searchOptions.caseSensitive ? stringLine : stringLine.toLowerCase();\n\n    let resultIndex = -1;\n    if (searchOptions.regex) {\n      const searchRegex = RegExp(searchTerm, 'g');\n      let foundTerm: RegExpExecArray | null;\n      if (isReverseSearch) {\n        // This loop will get the resultIndex of the _last_ regex match in the range 0..offset\n        while (foundTerm = searchRegex.exec(searchStringLine.slice(0, offset))) {\n          resultIndex = searchRegex.lastIndex - foundTerm[0].length;\n          term = foundTerm[0];\n          searchRegex.lastIndex -= (term.length - 1);\n        }\n      } else {\n        foundTerm = searchRegex.exec(searchStringLine.slice(offset));\n        if (foundTerm && foundTerm[0].length > 0) {\n          resultIndex = offset + (searchRegex.lastIndex - foundTerm[0].length);\n          term = foundTerm[0];\n        }\n      }\n    } else {\n      if (isReverseSearch) {\n        if (offset - searchTerm.length >= 0) {\n          resultIndex = searchStringLine.lastIndexOf(searchTerm, offset - searchTerm.length);\n        }\n      } else {\n        resultIndex = searchStringLine.indexOf(searchTerm, offset);\n      }\n    }\n\n    if (resultIndex >= 0) {\n      if (searchOptions.wholeWord && !this._isWholeWord(resultIndex, searchStringLine, term)) {\n        return;\n      }\n\n      // Adjust the row number and search index if needed since a \"line\" of text can span multiple\n      // rows\n      let startRowOffset = 0;\n      while (startRowOffset < offsets.length - 1 && resultIndex >= offsets[startRowOffset + 1]) {\n        startRowOffset++;\n      }\n      let endRowOffset = startRowOffset;\n      while (endRowOffset < offsets.length - 1 && resultIndex + term.length >= offsets[endRowOffset + 1]) {\n        endRowOffset++;\n      }\n      const startColOffset = resultIndex - offsets[startRowOffset];\n      const endColOffset = resultIndex + term.length - offsets[endRowOffset];\n      const startColIndex = this._stringLengthToBufferSize(row + startRowOffset, startColOffset);\n      const endColIndex = this._stringLengthToBufferSize(row + endRowOffset, endColOffset);\n      const size = endColIndex - startColIndex + terminal.cols * (endRowOffset - startRowOffset);\n\n      return {\n        term,\n        col: startColIndex,\n        row: row + startRowOffset,\n        size\n      };\n    }\n  }\n\n  private _stringLengthToBufferSize(row: number, offset: number): number {\n    const line = this._terminal!.buffer.active.getLine(row);\n    if (!line) {\n      return 0;\n    }\n    for (let i = 0; i < offset; i++) {\n      const cell = line.getCell(i);\n      if (!cell) {\n        break;\n      }\n      // Adjust the searchIndex to normalize emoji into single chars\n      const char = cell.getChars();\n      if (char.length > 1) {\n        offset -= char.length - 1;\n      }\n      // Adjust the searchIndex for empty characters following wide unicode\n      // chars (eg. CJK)\n      const nextCell = line.getCell(i + 1);\n      if (nextCell && nextCell.getWidth() === 0) {\n        offset++;\n      }\n    }\n    return offset;\n  }\n\n  private _bufferColsToStringOffset(startRow: number, cols: number): number {\n    const terminal = this._terminal!;\n    let lineIndex = startRow;\n    let offset = 0;\n    let line = terminal.buffer.active.getLine(lineIndex);\n    while (cols > 0 && line) {\n      for (let i = 0; i < cols && i < terminal.cols; i++) {\n        const cell = line.getCell(i);\n        if (!cell) {\n          break;\n        }\n        if (cell.getWidth()) {\n          // Treat null characters as whitespace to align with the translateToString API\n          offset += cell.getCode() === 0 ? 1 : cell.getChars().length;\n        }\n      }\n      lineIndex++;\n      line = terminal.buffer.active.getLine(lineIndex);\n      if (line && !line.isWrapped) {\n        break;\n      }\n      cols -= terminal.cols;\n    }\n    return offset;\n  }\n\n  /**\n   * Translates a buffer line to a string, including subsequent lines if they are wraps.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param lineIndex The index of the line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   */\n  private _translateBufferLineToStringWithWrap(lineIndex: number, trimRight: boolean): LineCacheEntry {\n    const terminal = this._terminal!;\n    const strings = [];\n    const lineOffsets = [0];\n    let line = terminal.buffer.active.getLine(lineIndex);\n    while (line) {\n      const nextLine = terminal.buffer.active.getLine(lineIndex + 1);\n      const lineWrapsToNext = nextLine ? nextLine.isWrapped : false;\n      let string = line.translateToString(!lineWrapsToNext && trimRight);\n      if (lineWrapsToNext && nextLine) {\n        const lastCell = line.getCell(line.length - 1);\n        const lastCellIsNull = lastCell && lastCell.getCode() === 0 && lastCell.getWidth() === 1;\n        // a wide character wrapped to the next line\n        if (lastCellIsNull && nextLine.getCell(0)?.getWidth() === 2) {\n          string = string.slice(0, -1);\n        }\n      }\n      strings.push(string);\n      if (lineWrapsToNext) {\n        lineOffsets.push(lineOffsets[lineOffsets.length - 1] + string.length);\n      } else {\n        break;\n      }\n      lineIndex++;\n      line = nextLine;\n    }\n    return [strings.join(''), lineOffsets];\n  }\n\n  /**\n   * Selects and scrolls to a result.\n   * @param result The result to select.\n   * @returns Whether a result was selected.\n   */\n  private _selectResult(result: ISearchResult | undefined, options?: ISearchDecorationOptions, noScroll?: boolean): boolean {\n    const terminal = this._terminal!;\n    this._selectedDecoration.clear();\n    if (!result) {\n      terminal.clearSelection();\n      return false;\n    }\n    terminal.select(result.col, result.row, result.size);\n    if (options) {\n      const marker = terminal.registerMarker(-terminal.buffer.active.baseY - terminal.buffer.active.cursorY + result.row);\n      if (marker) {\n        const decoration = terminal.registerDecoration({\n          marker,\n          x: result.col,\n          width: result.size,\n          backgroundColor: options.activeMatchBackground,\n          layer: 'top',\n          overviewRulerOptions: {\n            color: options.activeMatchColorOverviewRuler\n          }\n        });\n        if (decoration) {\n          const disposables: IDisposable[] = [];\n          disposables.push(marker);\n          disposables.push(decoration.onRender((e) => this._applyStyles(e, options.activeMatchBorder, true)));\n          disposables.push(decoration.onDispose(() => disposeArray(disposables)));\n          this._selectedDecoration.value = { decoration, match: result, dispose() { decoration.dispose(); } };\n        }\n      }\n    }\n\n    if (!noScroll) {\n      // If it is not in the viewport then we scroll else it just gets selected\n      if (result.row >= (terminal.buffer.active.viewportY + terminal.rows) || result.row < terminal.buffer.active.viewportY) {\n        let scroll = result.row - terminal.buffer.active.viewportY;\n        scroll -= Math.floor(terminal.rows / 2);\n        terminal.scrollLines(scroll);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Applies styles to the decoration when it is rendered.\n   * @param element The decoration's element.\n   * @param borderColor The border color to apply.\n   * @param isActiveResult Whether the element is part of the active search result.\n   * @returns\n   */\n  private _applyStyles(element: HTMLElement, borderColor: string | undefined, isActiveResult: boolean): void {\n    if (!element.classList.contains('xterm-find-result-decoration')) {\n      element.classList.add('xterm-find-result-decoration');\n      if (borderColor) {\n        element.style.outline = `1px solid ${borderColor}`;\n      }\n    }\n    if (isActiveResult) {\n      element.classList.add('xterm-find-active-result-decoration');\n    }\n  }\n\n  /**\n   * Creates a decoration for the result and applies styles\n   * @param result the search result for which to create the decoration\n   * @param options the options for the decoration\n   * @returns the {@link IDecoration} or undefined if the marker has already been disposed of\n   */\n  private _createResultDecoration(result: ISearchResult, options: ISearchDecorationOptions): IDecoration | undefined {\n    const terminal = this._terminal!;\n    const marker = terminal.registerMarker(-terminal.buffer.active.baseY - terminal.buffer.active.cursorY + result.row);\n    if (!marker) {\n      return undefined;\n    }\n    const findResultDecoration = terminal.registerDecoration({\n      marker,\n      x: result.col,\n      width: result.size,\n      backgroundColor: options.matchBackground,\n      overviewRulerOptions: this._highlightedLines.has(marker.line) ? undefined : {\n        color: options.matchOverviewRuler,\n        position: 'center'\n      }\n    });\n    if (findResultDecoration) {\n      const disposables: IDisposable[] = [];\n      disposables.push(marker);\n      disposables.push(findResultDecoration.onRender((e) => this._applyStyles(e, options.matchBorder, false)));\n      disposables.push(findResultDecoration.onDispose(() => disposeArray(disposables)));\n    }\n    return findResultDecoration;\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","_listeners","_disposed","event","this","_event","listener","push","dispose","i","length","splice","fire","arg1","arg2","queue","call","undefined","clearListeners","from","to","e","disposeArray","disposables","d","_disposables","_isDisposed","register","unregister","index","indexOf","value","_value","clear","f","array","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","NON_WORD_CHARACTERS","SearchAddon","Disposable","constructor","options","super","_highlightedLines","Set","_highlightDecorations","_selectedDecoration","MutableDisposable","_linesCacheTimeoutId","_onDidChangeResults","EventEmitter","onDidChangeResults","_highlightLimit","highlightLimit","activate","terminal","_terminal","onWriteParsed","_updateMatches","onResize","toDisposable","clearDecorations","_highlightTimeout","window","clearTimeout","_cachedSearchTerm","_lastSearchOptions","decorations","setTimeout","term","findPrevious","incremental","noScroll","retainCachedSearchTerm","findNext","searchOptions","Error","_highlightAllMatches","found","_findNextAndSelect","_fireResults","searchResultsWithHighlight","prevResult","result","_find","row","col","cols","match","decoration","_createResultDecoration","add","marker","line","startRow","startCol","clearSelection","_initLinesCache","searchPosition","_findInLine","y","buffer","active","baseY","rows","prevSelectedPos","getSelectionPosition","end","x","start","_selectResult","_findPreviousAndSelect","resultIndex","selectedMatch","size","resultCount","isReverseSearch","Math","max","_linesCache","Array","_cursorMoveListener","onCursorMove","_destroyLinesCache","_resizeListener","_isWholeWord","searchIndex","includes","firstLine","getLine","isWrapped","cache","_translateBufferLineToStringWithWrap","stringLine","offsets","offset","_bufferColsToStringOffset","searchTerm","caseSensitive","toLowerCase","searchStringLine","regex","searchRegex","RegExp","foundTerm","exec","slice","lastIndex","lastIndexOf","wholeWord","startRowOffset","endRowOffset","startColOffset","endColOffset","startColIndex","_stringLengthToBufferSize","cell","getCell","char","getChars","nextCell","getWidth","lineIndex","getCode","trimRight","strings","lineOffsets","nextLine","lineWrapsToNext","string","translateToString","lastCell","join","select","registerMarker","cursorY","registerDecoration","width","backgroundColor","activeMatchBackground","layer","overviewRulerOptions","color","activeMatchColorOverviewRuler","onRender","_applyStyles","activeMatchBorder","onDispose","viewportY","scroll","floor","scrollLines","element","borderColor","isActiveResult","classList","contains","style","outline","findResultDecoration","matchBackground","has","matchOverviewRuler","position","matchBorder"],"sourceRoot":""}