"use strict";
// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestRunContainer = exports.createTestTreeContainer = void 0;
require("../../../src/browser/style/index.css");
const inversify_1 = require("@theia/core/shared/inversify");
const browser_1 = require("@theia/core/lib/browser");
const test_tree_widget_1 = require("./test-tree-widget");
const test_view_contribution_1 = require("./test-view-contribution");
const test_service_1 = require("../test-service");
const core_1 = require("@theia/core");
const tab_bar_toolbar_1 = require("@theia/core/lib/browser/shell/tab-bar-toolbar");
const test_execution_state_manager_1 = require("./test-execution-state-manager");
const test_result_widget_1 = require("./test-result-widget");
const test_output_widget_1 = require("./test-output-widget");
const test_output_view_contribution_1 = require("./test-output-view-contribution");
const test_output_ui_model_1 = require("./test-output-ui-model");
const test_run_widget_1 = require("./test-run-widget");
const test_result_view_contribution_1 = require("./test-result-view-contribution");
const test_run_view_contribution_1 = require("./test-run-view-contribution");
const test_context_key_service_1 = require("./test-context-key-service");
const test_execution_progress_service_1 = require("../test-execution-progress-service");
const test_preferences_1 = require("../test-preferences");
exports.default = new inversify_1.ContainerModule(bind => {
    (0, test_preferences_1.bindTestPreferences)(bind);
    (0, core_1.bindContributionProvider)(bind, test_service_1.TestContribution);
    bind(test_context_key_service_1.TestContextKeyService).toSelf().inSingletonScope();
    bind(test_service_1.TestService).to(test_service_1.DefaultTestService).inSingletonScope();
    bind(browser_1.WidgetFactory).toDynamicValue(({ container }) => ({
        id: test_output_widget_1.TestOutputWidget.ID,
        createWidget: () => container.get(test_output_widget_1.TestOutputWidget)
    })).inSingletonScope();
    bind(test_output_widget_1.TestOutputWidget).toSelf();
    bind(browser_1.WidgetFactory).toDynamicValue(({ container }) => ({
        id: test_result_widget_1.TestResultWidget.ID,
        createWidget: () => container.get(test_result_widget_1.TestResultWidget)
    })).inSingletonScope();
    bind(test_result_widget_1.TestResultWidget).toSelf();
    bind(test_tree_widget_1.TestTreeWidget).toDynamicValue(({ container }) => {
        const child = createTestTreeContainer(container);
        return child.get(test_tree_widget_1.TestTreeWidget);
    });
    bind(browser_1.WidgetFactory).toDynamicValue(({ container }) => ({
        id: test_tree_widget_1.TestTreeWidget.ID,
        createWidget: () => container.get(test_tree_widget_1.TestTreeWidget)
    })).inSingletonScope();
    bind(test_run_widget_1.TestRunTreeWidget).toDynamicValue(({ container }) => {
        const child = createTestRunContainer(container);
        return child.get(test_run_widget_1.TestRunTreeWidget);
    });
    bind(browser_1.WidgetFactory).toDynamicValue(({ container }) => ({
        id: test_run_widget_1.TestRunTreeWidget.ID,
        createWidget: () => container.get(test_run_widget_1.TestRunTreeWidget)
    })).inSingletonScope();
    bind(browser_1.WidgetFactory).toDynamicValue(({ container }) => ({
        id: test_view_contribution_1.TEST_VIEW_CONTAINER_ID,
        createWidget: async () => {
            const viewContainer = container.get(browser_1.ViewContainer.Factory)({
                id: test_view_contribution_1.TEST_VIEW_CONTAINER_ID,
                progressLocationId: 'test'
            });
            viewContainer.setTitleOptions(test_view_contribution_1.TEST_VIEW_CONTAINER_TITLE_OPTIONS);
            let widget = await container.get(browser_1.WidgetManager).getOrCreateWidget(test_tree_widget_1.TestTreeWidget.ID);
            viewContainer.addWidget(widget, {
                canHide: false,
                initiallyCollapsed: false
            });
            widget = await container.get(browser_1.WidgetManager).getOrCreateWidget(test_run_widget_1.TestRunTreeWidget.ID);
            viewContainer.addWidget(widget, {
                canHide: true,
                initiallyCollapsed: false,
            });
            return viewContainer;
        }
    })).inSingletonScope();
    (0, browser_1.bindViewContribution)(bind, test_view_contribution_1.TestViewContribution);
    (0, browser_1.bindViewContribution)(bind, test_run_view_contribution_1.TestRunViewContribution);
    (0, browser_1.bindViewContribution)(bind, test_result_view_contribution_1.TestResultViewContribution);
    (0, browser_1.bindViewContribution)(bind, test_output_view_contribution_1.TestOutputViewContribution);
    bind(browser_1.FrontendApplicationContribution).toService(test_view_contribution_1.TestViewContribution);
    bind(tab_bar_toolbar_1.TabBarToolbarContribution).toService(test_view_contribution_1.TestViewContribution);
    bind(tab_bar_toolbar_1.TabBarToolbarContribution).toService(test_run_view_contribution_1.TestRunViewContribution);
    bind(test_execution_state_manager_1.TestExecutionStateManager).toSelf().inSingletonScope();
    bind(test_output_ui_model_1.TestOutputUIModel).toSelf().inSingletonScope();
    bind(test_execution_progress_service_1.TestExecutionProgressService).to(test_execution_progress_service_1.DefaultTestExecutionProgressService).inSingletonScope();
});
function createTestTreeContainer(parent) {
    return (0, browser_1.createTreeContainer)(parent, {
        tree: test_tree_widget_1.TestTree,
        props: {
            virtualized: false,
            search: true,
            contextMenuPath: test_view_contribution_1.TEST_VIEW_CONTEXT_MENU
        },
        widget: test_tree_widget_1.TestTreeWidget,
    });
}
exports.createTestTreeContainer = createTestTreeContainer;
function createTestRunContainer(parent) {
    return (0, browser_1.createTreeContainer)(parent, {
        tree: test_run_widget_1.TestRunTree,
        props: {
            virtualized: false,
            search: true,
            multiSelect: false,
            contextMenuPath: test_run_view_contribution_1.TEST_RUNS_CONTEXT_MENU
        },
        widget: test_run_widget_1.TestRunTreeWidget
    });
}
exports.createTestRunContainer = createTestRunContainer;
//# sourceMappingURL=test-view-frontend-module.js.map