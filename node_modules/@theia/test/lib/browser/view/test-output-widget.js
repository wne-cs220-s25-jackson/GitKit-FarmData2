"use strict";
var TestOutputWidget_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestOutputWidget = void 0;
const tslib_1 = require("tslib");
// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const xterm_1 = require("xterm");
const xterm_addon_fit_1 = require("xterm-addon-fit");
const browser_1 = require("@theia/core/lib/browser");
const inversify_1 = require("@theia/core/shared/inversify");
const core_1 = require("@theia/core");
const terminal_preferences_1 = require("@theia/terminal/lib/browser/terminal-preferences");
const terminal_theme_service_1 = require("@theia/terminal/lib/browser/terminal-theme-service");
const test_output_ui_model_1 = require("./test-output-ui-model");
const debounce = require("p-debounce");
let TestOutputWidget = TestOutputWidget_1 = class TestOutputWidget extends browser_1.BaseWidget {
    constructor() {
        super();
        this.disposeOnSetInput = new core_1.DisposableCollection();
        this.resizeTerminal = debounce(() => this.doResizeTerminal(), 50);
        this.id = TestOutputWidget_1.ID;
        this.title.label = 'Test Output';
        this.title.caption = 'Test Output';
        this.title.iconClass = (0, browser_1.codicon)('symbol-keyword');
        this.title.closable = true;
    }
    init() {
        this.term = new xterm_1.Terminal({
            disableStdin: true,
            cursorStyle: 'bar',
            fontFamily: this.preferences['terminal.integrated.fontFamily'],
            fontSize: this.preferences['terminal.integrated.fontSize'],
            fontWeight: this.preferences['terminal.integrated.fontWeight'],
            fontWeightBold: this.preferences['terminal.integrated.fontWeightBold'],
            drawBoldTextInBrightColors: this.preferences['terminal.integrated.drawBoldTextInBrightColors'],
            letterSpacing: this.preferences['terminal.integrated.letterSpacing'],
            lineHeight: this.preferences['terminal.integrated.lineHeight'],
            scrollback: this.preferences['terminal.integrated.scrollback'],
            fastScrollSensitivity: this.preferences['terminal.integrated.fastScrollSensitivity'],
            rendererType: this.getTerminalRendererType(this.preferences['terminal.integrated.rendererType']),
            theme: this.themeService.theme
        });
        this.fitAddon = new xterm_addon_fit_1.FitAddon();
        this.term.loadAddon(this.fitAddon);
        this.setInput(this.uiModel.selectedOutputSource);
        this.uiModel.onDidChangeSelectedOutputSource(source => this.setInput(source));
        this.toDispose.push(core_1.Disposable.create(() => this.term.dispose()));
    }
    setInput(selectedOutputSource) {
        this.disposeOnSetInput.dispose();
        this.disposeOnSetInput = new core_1.DisposableCollection();
        this.term.clear();
        if (selectedOutputSource) {
            selectedOutputSource.output.forEach(item => this.term.writeln(item.output));
            this.disposeOnSetInput.push(selectedOutputSource.onDidAddTestOutput(items => {
                items.forEach(item => this.term.writeln(item.output));
            }));
            this.term.scrollToBottom();
        }
    }
    onAfterAttach(msg) {
        super.onAfterAttach(msg);
        this.term.open(this.node);
        if (browser_1.isFirefox) {
            // monkey patching intersection observer handling for secondary window support
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const renderService = this.term._core._renderService;
            const originalFunc = renderService._onIntersectionChange.bind(renderService);
            const replacement = function (entry) {
                if (entry.target.ownerDocument !== document) {
                    // in Firefox, the intersection observer always reports the widget as non-intersecting if the dom element
                    // is in a different document from when the IntersectionObserver started observing. Since we know
                    // that the widget is always "visible" when in a secondary window, so we mark the entry as "intersecting"
                    const patchedEvent = {
                        ...entry,
                        isIntersecting: true,
                    };
                    originalFunc(patchedEvent);
                }
                else {
                    originalFunc(entry);
                }
            };
            renderService._onIntersectionChange = replacement;
        }
        if (browser_1.isFirefox) {
            // The software scrollbars don't work with xterm.js, so we disable the scrollbar if we are on firefox.
            if (this.term.element) {
                this.term.element.children.item(0).style.overflow = 'hidden';
            }
        }
    }
    getTerminalRendererType(terminalRendererType) {
        if (terminalRendererType && (0, terminal_preferences_1.isTerminalRendererType)(terminalRendererType)) {
            return terminalRendererType;
        }
        return terminal_preferences_1.DEFAULT_TERMINAL_RENDERER_TYPE;
    }
    onResize(msg) {
        super.onResize(msg);
        this.resizeTerminal();
    }
    doResizeTerminal() {
        if (this.isDisposed) {
            return;
        }
        const geo = this.fitAddon.proposeDimensions();
        const cols = geo.cols;
        const rows = geo.rows - 1; // subtract one row for margin
        this.term.resize(cols, rows);
    }
};
exports.TestOutputWidget = TestOutputWidget;
TestOutputWidget.ID = 'test-output-view';
tslib_1.__decorate([
    (0, inversify_1.inject)(terminal_preferences_1.TerminalPreferences),
    tslib_1.__metadata("design:type", Object)
], TestOutputWidget.prototype, "preferences", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(terminal_theme_service_1.TerminalThemeService),
    tslib_1.__metadata("design:type", terminal_theme_service_1.TerminalThemeService)
], TestOutputWidget.prototype, "themeService", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(test_output_ui_model_1.TestOutputUIModel),
    tslib_1.__metadata("design:type", test_output_ui_model_1.TestOutputUIModel)
], TestOutputWidget.prototype, "uiModel", void 0);
tslib_1.__decorate([
    (0, inversify_1.postConstruct)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], TestOutputWidget.prototype, "init", null);
exports.TestOutputWidget = TestOutputWidget = TestOutputWidget_1 = tslib_1.__decorate([
    (0, inversify_1.injectable)(),
    tslib_1.__metadata("design:paramtypes", [])
], TestOutputWidget);
//# sourceMappingURL=test-output-widget.js.map