/// <reference types="react" />
import { TreeWidget, TreeModel, TreeProps, CompositeTreeNode, TreeNode, TreeImpl, NodeProps, SelectableTreeNode } from '@theia/core/lib/browser/tree';
import { ContextMenuRenderer } from '@theia/core/lib/browser';
import { IconThemeService } from '@theia/core/lib/browser/icon-theme-service';
import { ThemeService } from '@theia/core/lib/browser/theming';
import { ContextKeyService } from '@theia/core/lib/browser/context-key-service';
import { TestExecutionState, TestItem, TestMessage, TestRun, TestService } from '../test-service';
import * as React from '@theia/core/shared/react';
import { TestExecutionStateManager } from './test-execution-state-manager';
import { TestOutputUIModel } from './test-output-ui-model';
declare class TestRunNode implements TreeNode, SelectableTreeNode {
    readonly counter: number;
    readonly id: string;
    readonly run: TestRun;
    readonly parent: CompositeTreeNode;
    constructor(counter: number, id: string, run: TestRun, parent: CompositeTreeNode);
    get name(): string;
    expanded?: boolean;
    selected: boolean;
    children: TestItemNode[];
}
declare class TestItemNode implements TreeNode, SelectableTreeNode {
    readonly id: string;
    readonly item: TestItem;
    readonly parent: TestRunNode;
    constructor(id: string, item: TestItem, parent: TestRunNode);
    selected: boolean;
    get name(): string;
}
export declare class TestRunTree extends TreeImpl {
    private ROOT;
    protected readonly testService: TestService;
    private controllerListeners;
    private runs;
    private nextId;
    init(): void;
    private addController;
    private addRun;
    protected createRunNode(run: TestRun): TestRunNode;
    createTestItemNode(parent: TestRunNode, item: TestItem): TestItemNode;
    protected resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]>;
}
export declare class TestRunTreeWidget extends TreeWidget {
    static ID: string;
    protected readonly iconThemeService: IconThemeService;
    protected readonly contextKeys: ContextKeyService;
    protected readonly themeService: ThemeService;
    protected readonly stateManager: TestExecutionStateManager;
    protected readonly uiModel: TestOutputUIModel;
    constructor(props: TreeProps, model: TreeModel, contextMenuRenderer: ContextMenuRenderer);
    protected init(): void;
    protected renderTree(model: TreeModel): React.ReactNode;
    protected getTestStateClass(state: TestExecutionState | undefined): string;
    protected renderIcon(node: TreeNode, props: NodeProps): React.ReactNode;
    protected toContextMenuArgs(node: SelectableTreeNode): (TestRun | TestItem | TestMessage[])[];
    storeState(): object;
}
export {};
//# sourceMappingURL=test-run-widget.d.ts.map