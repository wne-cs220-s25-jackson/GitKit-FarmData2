/// <reference types="react" />
import { TreeWidget, TreeModel, TreeProps, CompositeTreeNode, ExpandableTreeNode, TreeNode, TreeImpl, NodeProps, SelectableTreeNode } from '@theia/core/lib/browser/tree';
import { ContextMenuRenderer, KeybindingRegistry } from '@theia/core/lib/browser';
import { IconThemeService } from '@theia/core/lib/browser/icon-theme-service';
import { ThemeService } from '@theia/core/lib/browser/theming';
import { ContextKeyService } from '@theia/core/lib/browser/context-key-service';
import { TestController, TestExecutionState, TestItem, TestService } from '../test-service';
import * as React from '@theia/core/shared/react';
import { TreeDelta } from '../../common/tree-delta';
import { ActionMenuNode, CommandRegistry, MenuModelRegistry } from '@theia/core';
import { TestExecutionStateManager } from './test-execution-state-manager';
import { TestOutputUIModel } from './test-output-ui-model';
export interface TestRoot extends CompositeTreeNode {
    children: TestControllerNode[];
}
export declare namespace TestRoot {
    function is(node: unknown): node is TestRoot;
}
export interface TestControllerNode extends ExpandableTreeNode {
    controller: TestController;
}
export declare namespace TestControllerNode {
    function is(node: unknown): node is TestControllerNode;
}
export interface TestItemNode extends TreeNode {
    controller: TestController;
    testItem: TestItem;
}
export declare namespace TestItemNode {
    function is(node: unknown): node is TestItemNode;
}
export declare class TestTree extends TreeImpl {
    protected readonly testService: TestService;
    private controllerListeners;
    init(): void;
    protected addController(controller: TestController): void;
    protected resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]>;
    createControllerNode(parent: CompositeTreeNode, controller: TestController): TestControllerNode;
    protected processDeltas(controller: TestController, parent: TestItem | TestController, deltas: TreeDelta<string, TestItem>[]): void;
    protected processDelta(controller: TestController, parent: TestItem | TestController, delta: TreeDelta<string, TestItem>): void;
    protected findInParent(root: TestItem | TestController, path: string[], startIndex: number): TestItem | TestController | undefined;
    protected computePath(controller: TestController, item: TestItem): string[];
    protected computeId(path: string[]): string;
    createTestNode(controller: TestController, parent: CompositeTreeNode, test: TestItem): TestItemNode;
}
export declare class TestTreeWidget extends TreeWidget {
    static ID: string;
    static TEST_CONTEXT_MENU: string[];
    protected readonly iconThemeService: IconThemeService;
    protected readonly contextKeys: ContextKeyService;
    protected readonly themeService: ThemeService;
    protected readonly stateManager: TestExecutionStateManager;
    protected uiModel: TestOutputUIModel;
    protected readonly menus: MenuModelRegistry;
    readonly commands: CommandRegistry;
    protected readonly keybindings: KeybindingRegistry;
    constructor(props: TreeProps, model: TreeModel, contextMenuRenderer: ContextMenuRenderer);
    protected init(): void;
    protected renderTree(model: TreeModel): React.ReactNode;
    protected getTestStateClass(state: TestExecutionState | undefined): string;
    protected renderIcon(node: TreeNode, props: NodeProps): React.ReactNode;
    protected renderTailDecorations(node: TreeNode, props: NodeProps): React.ReactNode;
    protected renderInlineCommand(actionMenuNode: ActionMenuNode, index: number, tabbable: boolean, args: any[]): React.ReactNode;
    protected resolveKeybindingForCommand(command: string | undefined): string;
    protected toContextMenuArgs(node: SelectableTreeNode): (TestItem)[];
    storeState(): object;
}
//# sourceMappingURL=test-tree-widget.d.ts.map