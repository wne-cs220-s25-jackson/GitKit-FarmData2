"use strict";
// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupBy = exports.TreeCollection = exports.SimpleObservableCollection = exports.ChangeBatcher = exports.observableProperty = void 0;
const vscode_languageserver_protocol_1 = require("@theia/core/shared/vscode-languageserver-protocol");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function observableProperty(observationFunction) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return (target, property) => {
        Reflect.defineProperty(target, property, {
            // @ts-ignore
            get() { return this['_' + property]; },
            set(v) {
                // @ts-ignore
                this[observationFunction](property, v);
                // @ts-ignore
                this['_' + property] = v;
            }
        });
    };
}
exports.observableProperty = observableProperty;
class ChangeBatcher {
    constructor(emitBatch, timeoutMs) {
        this.emitBatch = emitBatch;
        this.timeoutMs = timeoutMs;
    }
    changeOccurred() {
        if (!this.startTime) {
            this.startTime = Date.now();
            this.handle = setTimeout(() => {
                this.flush();
            }, this.timeoutMs);
        }
        else {
            if (Date.now() - this.startTime > this.timeoutMs) {
                this.flush();
            }
        }
    }
    flush() {
        if (this.handle) {
            clearTimeout(this.handle);
            this.handle = undefined;
        }
        this.startTime = undefined;
        this.emitBatch();
    }
}
exports.ChangeBatcher = ChangeBatcher;
class SimpleObservableCollection {
    constructor(equals = (left, right) => left === right) {
        this.equals = equals;
        this._values = [];
        this.onChangeEmitter = new vscode_languageserver_protocol_1.Emitter();
        this.onChanged = this.onChangeEmitter.event;
    }
    add(value) {
        if (!this._values.find(v => this.equals(v, value))) {
            this._values.push(value);
            this.onChangeEmitter.fire({ added: [value] });
            return true;
        }
        return false;
    }
    remove(value) {
        const index = this._values.findIndex(v => this.equals(v, value));
        if (index >= 0) {
            this._values.splice(index, 1);
            this.onChangeEmitter.fire({ removed: [value] });
            return true;
        }
        return false;
    }
    get values() {
        return this._values;
    }
    clear() {
        const copy = this._values;
        this._values = [];
        this.onChangeEmitter.fire({ removed: copy });
    }
}
exports.SimpleObservableCollection = SimpleObservableCollection;
class AbstractIndexedCollection {
    constructor() {
        this.keys = new Map();
    }
    get values() {
        if (!this._values) {
            this._values = [...this.keys.values()];
        }
        return this._values;
    }
    get size() {
        return this.keys.size;
    }
    has(key) {
        return this.keys.has(key);
    }
    get(key) {
        return this.keys.get(key);
    }
    doAdd(key, value) {
        const previous = this.keys.get(key);
        if (previous !== undefined) {
            return previous;
        }
        else {
            this.keys.set(key, value);
            this._values = undefined;
            return undefined;
        }
    }
    remove(key) {
        const previous = this.keys.get(key);
        if (previous !== undefined) {
            this.keys.delete(key);
            this._values = undefined;
            return previous;
        }
        return undefined;
    }
}
class TreeCollection extends AbstractIndexedCollection {
    constructor(owner, pathOf, deltaBuilder) {
        super();
        this.owner = owner;
        this.pathOf = pathOf;
        this.deltaBuilder = deltaBuilder;
    }
    add(item) {
        const path = this.pathOf(item);
        const previous = this.doAdd(path[path.length - 1], item);
        const deltaBuilder = this.deltaBuilder(item);
        if (deltaBuilder) {
            if (previous) {
                deltaBuilder.reportChanged(path, item);
            }
            else {
                deltaBuilder.reportAdded(path, item);
            }
        }
        return previous;
    }
    remove(key) {
        const toRemove = this.get(key);
        if (toRemove) {
            const deltaBuilder = this.deltaBuilder(toRemove);
            const path = this.pathOf(toRemove);
            super.remove(key);
            if (deltaBuilder) {
                deltaBuilder.reportRemoved(path);
            }
        }
        return toRemove;
    }
    entries() {
        return this[Symbol.iterator]();
    }
    [Symbol.iterator]() {
        const iter = this.values.entries();
        const that = this;
        return {
            next(..._args) {
                const res = iter.next();
                if (res.done) {
                    return { done: true, value: res.value };
                }
                else {
                    const path = that.pathOf(res.value[1]);
                    const result = [path[path.length - 1], res.value[1]];
                    return {
                        done: false,
                        value: result
                    };
                }
            }
        };
    }
}
exports.TreeCollection = TreeCollection;
function groupBy(items, keyOf) {
    const result = new Map();
    for (const item of items) {
        const key = keyOf(item);
        let values = result.get(key);
        if (!values) {
            values = [];
            result.set(key, values);
        }
        values.push(item);
    }
    return result;
}
exports.groupBy = groupBy;
//# sourceMappingURL=collections.js.map