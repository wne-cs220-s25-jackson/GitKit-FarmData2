"use strict";
// *****************************************************************************
// Copyright (C) 2023 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var NotebookCellActionContribution_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotebookCellActionContribution = exports.NotebookCellCommands = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@theia/core");
const browser_1 = require("@theia/core/lib/browser");
const inversify_1 = require("@theia/core/shared/inversify");
const notebook_context_keys_1 = require("./notebook-context-keys");
const context_key_service_1 = require("@theia/core/lib/browser/context-key-service");
const notebook_execution_service_1 = require("../service/notebook-execution-service");
const common_1 = require("../../common");
const notebook_editor_widget_service_1 = require("../service/notebook-editor-widget-service");
const notebook_actions_contribution_1 = require("./notebook-actions-contribution");
const cell_operations_1 = require("./cell-operations");
const editor_language_quick_pick_service_1 = require("@theia/editor/lib/browser/editor-language-quick-pick-service");
const notebook_service_1 = require("../service/notebook-service");
const selection_1 = require("@theia/monaco-editor-core/esm/vs/editor/common/core/selection");
const notebook_editor_widget_1 = require("../notebook-editor-widget");
var NotebookCellCommands;
(function (NotebookCellCommands) {
    /** Parameters: notebookModel: NotebookModel | undefined, cell: NotebookCellModel */
    NotebookCellCommands.EDIT_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.edit',
        category: 'Notebook',
        iconClass: (0, browser_1.codicon)('edit')
    });
    /** Parameters: notebookModel: NotebookModel | undefined, cell: NotebookCellModel */
    NotebookCellCommands.STOP_EDIT_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.stop-edit',
        category: 'Notebook',
        iconClass: (0, browser_1.codicon)('check')
    });
    /** Parameters: notebookModel: NotebookModel, cell: NotebookCellModel */
    NotebookCellCommands.DELETE_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.delete',
        iconClass: (0, browser_1.codicon)('trash')
    });
    /** Parameters: notebookModel: NotebookModel, cell: NotebookCellModel */
    NotebookCellCommands.SPLIT_CELL_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.split',
        iconClass: (0, browser_1.codicon)('split-vertical'),
    });
    /** Parameters: notebookModel: NotebookModel, cell: NotebookCellModel */
    NotebookCellCommands.EXECUTE_SINGLE_CELL_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.execute-cell',
        category: 'Notebook',
        label: core_1.nls.localizeByDefault('Execute Cell'),
        iconClass: (0, browser_1.codicon)('play'),
    });
    /** Parameters: notebookModel: NotebookModel, cell: NotebookCellModel */
    NotebookCellCommands.EXECUTE_SINGLE_CELL_AND_FOCUS_NEXT_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.execute-cell-and-focus-next',
        label: core_1.nls.localizeByDefault('Execute Notebook Cell and Select Below'),
        category: 'Notebook',
    });
    /** Parameters: notebookModel: NotebookModel, cell: NotebookCellModel */
    NotebookCellCommands.EXECUTE_SINGLE_CELL_AND_INSERT_BELOW_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.execute-cell-and-insert-below',
        label: core_1.nls.localizeByDefault('Execute Notebook Cell and Insert Below'),
        category: 'Notebook',
    });
    NotebookCellCommands.EXECUTE_ABOVE_CELLS_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebookActions.executeAbove',
        label: 'Execute Above Cells',
        iconClass: (0, browser_1.codicon)('run-above')
    });
    NotebookCellCommands.EXECUTE_CELL_AND_BELOW_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebookActions.executeBelow',
        label: 'Execute Cell and Below',
        iconClass: (0, browser_1.codicon)('run-below')
    });
    /** Parameters: notebookModel: NotebookModel, cell: NotebookCellModel */
    NotebookCellCommands.STOP_CELL_EXECUTION_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.stop-cell-execution',
        iconClass: (0, browser_1.codicon)('stop'),
    });
    /** Parameters: notebookModel: NotebookModel | undefined, cell: NotebookCellModel */
    NotebookCellCommands.CLEAR_OUTPUTS_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.clear-outputs',
        category: 'Notebook',
        label: 'Clear Cell Outputs',
    });
    /** Parameters: notebookModel: NotebookModel | undefined, cell: NotebookCellModel | undefined, output: NotebookCellOutputModel */
    NotebookCellCommands.CHANGE_OUTPUT_PRESENTATION_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.change-presentation',
        category: 'Notebook',
        label: 'Change Presentation',
    });
    NotebookCellCommands.INSERT_NEW_CELL_ABOVE_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.insertCodeCellAboveAndFocusContainer',
        label: 'Insert Code Cell Above and Focus Container'
    });
    NotebookCellCommands.INSERT_NEW_CELL_BELOW_COMMAND = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.insertCodeCellBelowAndFocusContainer',
        label: 'Insert Code Cell Below and Focus Container'
    });
    NotebookCellCommands.INSERT_MARKDOWN_CELL_ABOVE_COMMAND = core_1.Command.toLocalizedCommand({
        id: 'notebook.cell.insertMarkdownCellAbove',
        label: 'Insert Markdown Cell Above'
    });
    NotebookCellCommands.INSERT_MARKDOWN_CELL_BELOW_COMMAND = core_1.Command.toLocalizedCommand({
        id: 'notebook.cell.insertMarkdownCellBelow',
        label: 'Insert Markdown Cell Below'
    });
    NotebookCellCommands.TO_CODE_CELL_COMMAND = core_1.Command.toLocalizedCommand({
        id: 'notebook.cell.changeToCode',
        category: 'Notebook',
        label: 'Change Cell to Code'
    });
    NotebookCellCommands.TO_MARKDOWN_CELL_COMMAND = core_1.Command.toLocalizedCommand({
        id: 'notebook.cell.changeToMarkdown',
        category: 'Notebook',
        label: 'Change Cell to Markdown'
    });
    NotebookCellCommands.TOGGLE_CELL_OUTPUT = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.toggleOutputs',
        category: 'Notebook',
        label: 'Collapse Cell Output',
    });
    NotebookCellCommands.CHANGE_CELL_LANGUAGE = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.changeLanguage',
        category: 'Notebook',
        label: 'Change Cell Language',
    });
    NotebookCellCommands.TOGGLE_LINE_NUMBERS = core_1.Command.toDefaultLocalizedCommand({
        id: 'notebook.cell.toggleLineNumbers',
        category: 'Notebook',
        label: 'Show Cell Line Numbers',
    });
})(NotebookCellCommands || (exports.NotebookCellCommands = NotebookCellCommands = {}));
let NotebookCellActionContribution = NotebookCellActionContribution_1 = class NotebookCellActionContribution {
    init() {
        notebook_context_keys_1.NotebookContextKeys.initNotebookContextKeys(this.contextKeyService);
    }
    registerMenus(menus) {
        menus.registerMenuAction(NotebookCellActionContribution_1.ACTION_MENU, {
            commandId: NotebookCellCommands.EDIT_COMMAND.id,
            icon: NotebookCellCommands.EDIT_COMMAND.iconClass,
            when: `${notebook_context_keys_1.NOTEBOOK_CELL_TYPE} == 'markdown' && !${notebook_context_keys_1.NOTEBOOK_CELL_MARKDOWN_EDIT_MODE}`,
            label: core_1.nls.localizeByDefault('Edit Cell'),
            order: '10'
        });
        menus.registerMenuAction(NotebookCellActionContribution_1.ACTION_MENU, {
            commandId: NotebookCellCommands.STOP_EDIT_COMMAND.id,
            icon: NotebookCellCommands.STOP_EDIT_COMMAND.iconClass,
            when: `${notebook_context_keys_1.NOTEBOOK_CELL_TYPE} == 'markdown' && ${notebook_context_keys_1.NOTEBOOK_CELL_MARKDOWN_EDIT_MODE}`,
            label: core_1.nls.localizeByDefault('Stop Editing Cell'),
            order: '10'
        });
        menus.registerMenuAction(NotebookCellActionContribution_1.ACTION_MENU, {
            commandId: NotebookCellCommands.EXECUTE_ABOVE_CELLS_COMMAND.id,
            icon: NotebookCellCommands.EXECUTE_ABOVE_CELLS_COMMAND.iconClass,
            when: `${notebook_context_keys_1.NOTEBOOK_CELL_TYPE} == 'code'`,
            label: core_1.nls.localizeByDefault('Execute Above Cells'),
            order: '10'
        });
        menus.registerMenuAction(NotebookCellActionContribution_1.ACTION_MENU, {
            commandId: NotebookCellCommands.EXECUTE_CELL_AND_BELOW_COMMAND.id,
            icon: NotebookCellCommands.EXECUTE_CELL_AND_BELOW_COMMAND.iconClass,
            when: `${notebook_context_keys_1.NOTEBOOK_CELL_TYPE} == 'code'`,
            label: core_1.nls.localizeByDefault('Execute Cell and Below'),
            order: '20'
        });
        menus.registerMenuAction(NotebookCellActionContribution_1.ACTION_MENU, {
            commandId: NotebookCellCommands.SPLIT_CELL_COMMAND.id,
            icon: NotebookCellCommands.SPLIT_CELL_COMMAND.iconClass,
            label: core_1.nls.localizeByDefault('Split Cell'),
            order: '20'
        });
        menus.registerMenuAction(NotebookCellActionContribution_1.ACTION_MENU, {
            commandId: NotebookCellCommands.DELETE_COMMAND.id,
            icon: NotebookCellCommands.DELETE_COMMAND.iconClass,
            label: core_1.nls.localizeByDefault('Delete Cell'),
            order: '999'
        });
        menus.registerSubmenu(NotebookCellActionContribution_1.ADDITIONAL_ACTION_MENU, core_1.nls.localizeByDefault('More'), {
            icon: (0, browser_1.codicon)('ellipsis'),
            role: 0 /* CompoundMenuNodeRole.Submenu */,
            order: '30'
        });
        menus.registerIndependentSubmenu(NotebookCellActionContribution_1.CONTRIBUTED_CELL_ACTION_MENU, '', { role: 2 /* CompoundMenuNodeRole.Flat */ });
        // since contributions are adding to an independent submenu we have to manually add it to the more submenu
        menus.getMenu(NotebookCellActionContribution_1.ADDITIONAL_ACTION_MENU).addNode(menus.getMenuNode(NotebookCellActionContribution_1.CONTRIBUTED_CELL_ACTION_MENU));
        // code cell sidebar menu
        menus.registerMenuAction(NotebookCellActionContribution_1.CODE_CELL_SIDEBAR_MENU, {
            commandId: NotebookCellCommands.EXECUTE_SINGLE_CELL_COMMAND.id,
            icon: NotebookCellCommands.EXECUTE_SINGLE_CELL_COMMAND.iconClass,
            label: core_1.nls.localizeByDefault('Execute Cell'),
            when: `!${notebook_context_keys_1.NOTEBOOK_CELL_EXECUTING}`
        });
        menus.registerMenuAction(NotebookCellActionContribution_1.CODE_CELL_SIDEBAR_MENU, {
            commandId: NotebookCellCommands.STOP_CELL_EXECUTION_COMMAND.id,
            icon: NotebookCellCommands.STOP_CELL_EXECUTION_COMMAND.iconClass,
            label: core_1.nls.localizeByDefault('Stop Cell Execution'),
            when: notebook_context_keys_1.NOTEBOOK_CELL_EXECUTING
        });
        // Notebook Cell extra execution options
        menus.registerIndependentSubmenu(NotebookCellActionContribution_1.CONTRIBUTED_CELL_EXECUTION_MENU, core_1.nls.localizeByDefault('More...'), { role: 2 /* CompoundMenuNodeRole.Flat */, icon: (0, browser_1.codicon)('chevron-down') });
        // menus.getMenu(NotebookCellActionContribution.CODE_CELL_SIDEBAR_MENU).addNode(menus.getMenuNode(NotebookCellActionContribution.CONTRIBUTED_CELL_EXECUTION_MENU));
        // code cell output sidebar menu
        menus.registerSubmenu(NotebookCellActionContribution_1.ADDITIONAL_OUTPUT_SIDEBAR_MENU, core_1.nls.localizeByDefault('More'), {
            icon: (0, browser_1.codicon)('ellipsis'),
            role: 0 /* CompoundMenuNodeRole.Submenu */
        });
        menus.registerMenuAction(NotebookCellActionContribution_1.ADDITIONAL_OUTPUT_SIDEBAR_MENU, {
            commandId: NotebookCellCommands.CLEAR_OUTPUTS_COMMAND.id,
            label: core_1.nls.localizeByDefault('Clear Cell Outputs'),
        });
        menus.registerMenuAction(NotebookCellActionContribution_1.ADDITIONAL_OUTPUT_SIDEBAR_MENU, {
            commandId: NotebookCellCommands.CHANGE_OUTPUT_PRESENTATION_COMMAND.id,
            label: core_1.nls.localizeByDefault('Change Presentation'),
        });
    }
    registerCommands(commands) {
        commands.registerCommand(NotebookCellCommands.EDIT_COMMAND, this.editableCellCommandHandler((_, cell) => cell.requestFocusEditor()));
        commands.registerCommand(NotebookCellCommands.STOP_EDIT_COMMAND, { execute: (_, cell) => (cell !== null && cell !== void 0 ? cell : this.getSelectedCell()).requestBlurEditor() });
        commands.registerCommand(NotebookCellCommands.DELETE_COMMAND, this.editableCellCommandHandler((notebookModel, cell) => {
            notebookModel.applyEdits([{
                    editType: 1 /* CellEditType.Replace */,
                    index: notebookModel.cells.indexOf(cell),
                    count: 1,
                    cells: []
                }], true);
        }));
        commands.registerCommand(NotebookCellCommands.SPLIT_CELL_COMMAND, this.editableCellCommandHandler(async (notebookModel, cell) => {
            var _a;
            // selection (0,0,0,0) should also be used in !cell.editing mode, but `cell.editing`
            // is not properly implemented for Code cells.
            const cellSelection = (_a = cell.selection) !== null && _a !== void 0 ? _a : { start: { line: 0, character: 0 }, end: { line: 0, character: 0 } };
            const textModel = await cell.resolveTextModel();
            // Create new cell with the text after the cursor
            const splitOffset = textModel.offsetAt({
                line: cellSelection.start.line,
                character: cellSelection.start.character
            });
            const newCell = {
                cellKind: cell.cellKind,
                language: cell.language,
                outputs: [],
                source: textModel.getText().substring(splitOffset),
            };
            // add new cell below
            const index = notebookModel.cells.indexOf(cell);
            notebookModel.applyEdits([{ editType: 1 /* CellEditType.Replace */, index: index + 1, count: 0, cells: [newCell] }], true);
            // update current cell text (undo-able)
            const selection = new selection_1.Selection(cellSelection.start.line + 1, cellSelection.start.character + 1, cellSelection.end.line + 1, cellSelection.end.character + 1);
            const endPosition = textModel.positionAt(textModel.getText().length);
            const deleteOp = {
                range: {
                    startLineNumber: selection.startLineNumber,
                    startColumn: selection.startColumn,
                    endLineNumber: endPosition.line + 1,
                    endColumn: endPosition.character + 1
                },
                // eslint-disable-next-line no-null/no-null
                text: null
            };
            // Create a new undo/redo stack entry
            textModel.textEditorModel.pushStackElement();
            textModel.textEditorModel.pushEditOperations([selection], [deleteOp], () => [selection]);
        }));
        commands.registerCommand(NotebookCellCommands.EXECUTE_SINGLE_CELL_COMMAND, this.editableCellCommandHandler((notebookModel, cell) => {
            this.notebookExecutionService.executeNotebookCells(notebookModel, [cell]);
        }));
        commands.registerCommand(NotebookCellCommands.EXECUTE_SINGLE_CELL_AND_FOCUS_NEXT_COMMAND, this.editableCellCommandHandler((notebookModel, cell) => {
            if (cell.cellKind === common_1.CellKind.Code) {
                commands.executeCommand(NotebookCellCommands.EXECUTE_SINGLE_CELL_COMMAND.id, notebookModel, cell);
            }
            else {
                commands.executeCommand(NotebookCellCommands.STOP_EDIT_COMMAND.id, notebookModel, cell);
            }
            const index = notebookModel.cells.indexOf(cell);
            if (index < notebookModel.cells.length - 1) {
                notebookModel.setSelectedCell(notebookModel.cells[index + 1]);
            }
            else if (cell.cellKind === common_1.CellKind.Code) {
                commands.executeCommand(NotebookCellCommands.INSERT_NEW_CELL_BELOW_COMMAND.id);
            }
            else {
                commands.executeCommand(NotebookCellCommands.INSERT_MARKDOWN_CELL_BELOW_COMMAND.id);
            }
        }));
        commands.registerCommand(NotebookCellCommands.EXECUTE_SINGLE_CELL_AND_INSERT_BELOW_COMMAND, this.editableCellCommandHandler(async (notebookModel, cell) => {
            if (cell.cellKind === common_1.CellKind.Code) {
                await commands.executeCommand(NotebookCellCommands.EXECUTE_SINGLE_CELL_COMMAND.id, notebookModel, cell);
            }
            await commands.executeCommand(NotebookCellCommands.STOP_EDIT_COMMAND.id, notebookModel, cell);
            if (cell.cellKind === common_1.CellKind.Code) {
                await commands.executeCommand(NotebookCellCommands.INSERT_NEW_CELL_BELOW_COMMAND.id);
            }
            else {
                await commands.executeCommand(NotebookCellCommands.INSERT_MARKDOWN_CELL_BELOW_COMMAND.id);
            }
            const index = notebookModel.cells.indexOf(cell);
            notebookModel.setSelectedCell(notebookModel.cells[index + 1]);
        }));
        commands.registerCommand(NotebookCellCommands.EXECUTE_ABOVE_CELLS_COMMAND, this.editableCellCommandHandler((notebookModel, cell) => {
            const index = notebookModel.cells.indexOf(cell);
            if (index > 0) {
                this.notebookExecutionService.executeNotebookCells(notebookModel, notebookModel.cells.slice(0, index).filter(c => c.cellKind === common_1.CellKind.Code));
            }
        }));
        commands.registerCommand(NotebookCellCommands.EXECUTE_CELL_AND_BELOW_COMMAND, this.editableCellCommandHandler((notebookModel, cell) => {
            const index = notebookModel.cells.indexOf(cell);
            if (index >= 0) {
                this.notebookExecutionService.executeNotebookCells(notebookModel, notebookModel.cells.slice(index).filter(c => c.cellKind === common_1.CellKind.Code));
            }
        }));
        commands.registerCommand(NotebookCellCommands.STOP_CELL_EXECUTION_COMMAND, {
            execute: (notebookModel, cell) => {
                var _a;
                notebookModel = notebookModel !== null && notebookModel !== void 0 ? notebookModel : (_a = this.notebookEditorWidgetService.focusedEditor) === null || _a === void 0 ? void 0 : _a.model;
                cell = cell !== null && cell !== void 0 ? cell : this.getSelectedCell();
                this.notebookExecutionService.cancelNotebookCells(notebookModel, [cell]);
            }
        });
        commands.registerCommand(NotebookCellCommands.CLEAR_OUTPUTS_COMMAND, this.editableCellCommandHandler((notebook, cell) => {
            var _a, _b;
            return (_b = (notebook !== null && notebook !== void 0 ? notebook : (_a = this.notebookEditorWidgetService.focusedEditor) === null || _a === void 0 ? void 0 : _a.model)) === null || _b === void 0 ? void 0 : _b.applyEdits([{
                    editType: 2 /* CellEditType.Output */,
                    handle: cell.handle,
                    outputs: [],
                    deleteCount: cell.outputs.length,
                    append: false
                }], true);
        }));
        commands.registerCommand(NotebookCellCommands.CHANGE_OUTPUT_PRESENTATION_COMMAND, this.editableCellCommandHandler((notebook, cell, output) => {
            var _a;
            (_a = this.notebookEditorWidgetService.getNotebookEditor(notebook_editor_widget_1.NOTEBOOK_EDITOR_ID_PREFIX + notebook.uri.toString())) === null || _a === void 0 ? void 0 : _a.requestOuputPresentationChange(cell.handle, output);
        }));
        const insertCommand = (type, index, focusContainer) => this.editableCellCommandHandler(() => commands.executeCommand(notebook_actions_contribution_1.NotebookCommands.ADD_NEW_CELL_COMMAND.id, undefined, type, index, focusContainer));
        commands.registerCommand(NotebookCellCommands.INSERT_NEW_CELL_ABOVE_COMMAND, insertCommand(common_1.CellKind.Code, 'above', true));
        commands.registerCommand(NotebookCellCommands.INSERT_NEW_CELL_BELOW_COMMAND, insertCommand(common_1.CellKind.Code, 'below', true));
        commands.registerCommand(NotebookCellCommands.INSERT_MARKDOWN_CELL_ABOVE_COMMAND, insertCommand(common_1.CellKind.Markup, 'above', false));
        commands.registerCommand(NotebookCellCommands.INSERT_MARKDOWN_CELL_BELOW_COMMAND, insertCommand(common_1.CellKind.Markup, 'below', false));
        commands.registerCommand(NotebookCellCommands.TO_CODE_CELL_COMMAND, this.editableCellCommandHandler((notebookModel, cell) => {
            (0, cell_operations_1.changeCellType)(notebookModel, cell, common_1.CellKind.Code, this.notebookService.getCodeCellLanguage(notebookModel));
        }));
        commands.registerCommand(NotebookCellCommands.TO_MARKDOWN_CELL_COMMAND, this.editableCellCommandHandler((notebookModel, cell) => {
            (0, cell_operations_1.changeCellType)(notebookModel, cell, common_1.CellKind.Markup);
        }));
        commands.registerCommand(NotebookCellCommands.TOGGLE_CELL_OUTPUT, {
            execute: () => {
                var _a, _b;
                const selectedCell = (_b = (_a = this.notebookEditorWidgetService.focusedEditor) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.selectedCell;
                if (selectedCell) {
                    selectedCell.outputVisible = !selectedCell.outputVisible;
                }
            }
        });
        commands.registerCommand(NotebookCellCommands.CHANGE_CELL_LANGUAGE, {
            isVisible: () => { var _a, _b; return !!((_b = (_a = this.notebookEditorWidgetService.focusedEditor) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.selectedCell); },
            execute: async (notebook, cell) => {
                var _a, _b, _c, _d, _e;
                const selectedCell = cell !== null && cell !== void 0 ? cell : (_b = (_a = this.notebookEditorWidgetService.focusedEditor) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.selectedCell;
                const activeNotebook = notebook !== null && notebook !== void 0 ? notebook : (_c = this.notebookEditorWidgetService.focusedEditor) === null || _c === void 0 ? void 0 : _c.model;
                if (!selectedCell || !activeNotebook) {
                    return;
                }
                const language = await this.languageQuickPickService.pickEditorLanguage(selectedCell.language);
                if (!(language === null || language === void 0 ? void 0 : language.value) || language.value === 'autoDetect' || language.value.id === selectedCell.language) {
                    return;
                }
                const isMarkdownCell = selectedCell.cellKind === common_1.CellKind.Markup;
                const isMarkdownLanguage = language.value.id === 'markdown';
                if (isMarkdownLanguage) {
                    (0, cell_operations_1.changeCellType)(activeNotebook, selectedCell, common_1.CellKind.Markup, language.value.id);
                }
                else {
                    if (isMarkdownCell) {
                        (0, cell_operations_1.changeCellType)(activeNotebook, selectedCell, common_1.CellKind.Code, language.value.id);
                    }
                    else {
                        (_e = (_d = this.notebookEditorWidgetService.focusedEditor) === null || _d === void 0 ? void 0 : _d.model) === null || _e === void 0 ? void 0 : _e.applyEdits([{
                                editType: 4 /* CellEditType.CellLanguage */,
                                index: activeNotebook.cells.indexOf(selectedCell),
                                language: language.value.id
                            }], true);
                    }
                }
            }
        });
        commands.registerCommand(NotebookCellCommands.TOGGLE_LINE_NUMBERS, {
            execute: () => {
                var _a, _b, _c;
                const selectedCell = (_b = (_a = this.notebookEditorWidgetService.focusedEditor) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.selectedCell;
                if (selectedCell) {
                    const currentLineNumber = (_c = selectedCell.editorOptions) === null || _c === void 0 ? void 0 : _c.lineNumbers;
                    selectedCell.editorOptions = { ...selectedCell.editorOptions, lineNumbers: !currentLineNumber || currentLineNumber === 'off' ? 'on' : 'off' };
                }
            }
        });
    }
    editableCellCommandHandler(execute) {
        return {
            isEnabled: (notebookModel) => !Boolean(notebookModel === null || notebookModel === void 0 ? void 0 : notebookModel.readOnly),
            isVisible: (notebookModel) => !Boolean(notebookModel === null || notebookModel === void 0 ? void 0 : notebookModel.readOnly),
            execute: (notebookModel, cell, output) => {
                var _a;
                notebookModel = notebookModel !== null && notebookModel !== void 0 ? notebookModel : (_a = this.notebookEditorWidgetService.focusedEditor) === null || _a === void 0 ? void 0 : _a.model;
                cell = cell !== null && cell !== void 0 ? cell : this.getSelectedCell();
                execute(notebookModel, cell, output);
            }
        };
    }
    getSelectedCell() {
        var _a, _b;
        return (_b = (_a = this.notebookEditorWidgetService.focusedEditor) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.selectedCell;
    }
    registerKeybindings(keybindings) {
        keybindings.registerKeybindings({
            command: NotebookCellCommands.EDIT_COMMAND.id,
            keybinding: 'Enter',
            when: `!editorTextFocus && !inputFocus && ${notebook_context_keys_1.NOTEBOOK_EDITOR_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED}`,
        }, {
            command: NotebookCellCommands.STOP_EDIT_COMMAND.id,
            keybinding: browser_1.KeyCode.createKeyCode({ first: browser_1.Key.ENTER, modifiers: [browser_1.KeyModifier.Alt, browser_1.KeyModifier.CtrlCmd] }).toString(),
            when: `editorTextFocus && ${notebook_context_keys_1.NOTEBOOK_EDITOR_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_TYPE} == 'markdown'`,
        }, {
            command: NotebookCellCommands.STOP_EDIT_COMMAND.id,
            keybinding: 'esc',
            when: `editorTextFocus && ${notebook_context_keys_1.NOTEBOOK_EDITOR_FOCUSED} && !suggestWidgetVisible`,
        }, {
            command: NotebookCellCommands.EXECUTE_SINGLE_CELL_COMMAND.id,
            keybinding: browser_1.KeyCode.createKeyCode({ first: browser_1.Key.ENTER, modifiers: [browser_1.KeyModifier.CtrlCmd] }).toString(),
            when: `${notebook_context_keys_1.NOTEBOOK_CELL_LIST_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_EDITOR_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_TYPE} == 'code'`,
        }, {
            command: NotebookCellCommands.EXECUTE_SINGLE_CELL_AND_FOCUS_NEXT_COMMAND.id,
            keybinding: browser_1.KeyCode.createKeyCode({ first: browser_1.Key.ENTER, modifiers: [browser_1.KeyModifier.Shift] }).toString(),
            when: `${notebook_context_keys_1.NOTEBOOK_CELL_LIST_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_EDITOR_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED}`,
        }, {
            command: NotebookCellCommands.EXECUTE_SINGLE_CELL_AND_INSERT_BELOW_COMMAND.id,
            keybinding: browser_1.KeyCode.createKeyCode({ first: browser_1.Key.ENTER, modifiers: [browser_1.KeyModifier.Alt] }).toString(),
            when: `${notebook_context_keys_1.NOTEBOOK_CELL_LIST_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_EDITOR_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED}`,
        }, {
            command: NotebookCellCommands.CLEAR_OUTPUTS_COMMAND.id,
            keybinding: browser_1.KeyCode.createKeyCode({ first: browser_1.Key.KEY_O, modifiers: [browser_1.KeyModifier.Alt] }).toString(),
            when: `${notebook_context_keys_1.NOTEBOOK_EDITOR_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_TYPE} == 'code'`,
        }, {
            command: NotebookCellCommands.CHANGE_OUTPUT_PRESENTATION_COMMAND.id,
            keybinding: browser_1.KeyCode.createKeyCode({ first: browser_1.Key.KEY_P, modifiers: [browser_1.KeyModifier.Alt] }).toString(),
            when: `${notebook_context_keys_1.NOTEBOOK_EDITOR_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_TYPE} == 'code'`,
        }, {
            command: NotebookCellCommands.TO_CODE_CELL_COMMAND.id,
            keybinding: 'Y',
            when: `!editorTextFocus && ${notebook_context_keys_1.NOTEBOOK_EDITOR_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_TYPE} == 'markdown'`,
        }, {
            command: NotebookCellCommands.TO_MARKDOWN_CELL_COMMAND.id,
            keybinding: 'M',
            when: `!editorTextFocus && ${notebook_context_keys_1.NOTEBOOK_EDITOR_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_TYPE} == 'code'`,
        }, {
            command: NotebookCellCommands.SPLIT_CELL_COMMAND.id,
            keybinding: browser_1.KeyCode.createKeyCode({ first: browser_1.Key.MINUS, modifiers: [browser_1.KeyModifier.CtrlCmd, browser_1.KeyModifier.Shift] }).toString(),
            when: `editorTextFocus && ${notebook_context_keys_1.NOTEBOOK_EDITOR_FOCUSED} && ${notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED}`,
        });
    }
};
exports.NotebookCellActionContribution = NotebookCellActionContribution;
tslib_1.__decorate([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    tslib_1.__metadata("design:type", Object)
], NotebookCellActionContribution.prototype, "contextKeyService", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(notebook_service_1.NotebookService),
    tslib_1.__metadata("design:type", notebook_service_1.NotebookService)
], NotebookCellActionContribution.prototype, "notebookService", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(notebook_execution_service_1.NotebookExecutionService),
    tslib_1.__metadata("design:type", notebook_execution_service_1.NotebookExecutionService)
], NotebookCellActionContribution.prototype, "notebookExecutionService", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(notebook_editor_widget_service_1.NotebookEditorWidgetService),
    tslib_1.__metadata("design:type", notebook_editor_widget_service_1.NotebookEditorWidgetService)
], NotebookCellActionContribution.prototype, "notebookEditorWidgetService", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(editor_language_quick_pick_service_1.EditorLanguageQuickPickService),
    tslib_1.__metadata("design:type", editor_language_quick_pick_service_1.EditorLanguageQuickPickService)
], NotebookCellActionContribution.prototype, "languageQuickPickService", void 0);
tslib_1.__decorate([
    (0, inversify_1.postConstruct)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], NotebookCellActionContribution.prototype, "init", null);
exports.NotebookCellActionContribution = NotebookCellActionContribution = NotebookCellActionContribution_1 = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], NotebookCellActionContribution);
(function (NotebookCellActionContribution) {
    NotebookCellActionContribution.ACTION_MENU = ['notebook-cell-actions-menu'];
    NotebookCellActionContribution.ADDITIONAL_ACTION_MENU = [...NotebookCellActionContribution.ACTION_MENU, 'more'];
    NotebookCellActionContribution.CONTRIBUTED_CELL_ACTION_MENU = 'notebook/cell/title';
    NotebookCellActionContribution.CONTRIBUTED_CELL_EXECUTION_MENU = 'notebook/cell/execute';
    NotebookCellActionContribution.CODE_CELL_SIDEBAR_MENU = ['code-cell-sidebar-menu'];
    NotebookCellActionContribution.OUTPUT_SIDEBAR_MENU = ['code-cell-output-sidebar-menu'];
    NotebookCellActionContribution.ADDITIONAL_OUTPUT_SIDEBAR_MENU = [...NotebookCellActionContribution.OUTPUT_SIDEBAR_MENU, 'more'];
})(NotebookCellActionContribution || (exports.NotebookCellActionContribution = NotebookCellActionContribution = {}));
//# sourceMappingURL=notebook-cell-actions-contribution.js.map