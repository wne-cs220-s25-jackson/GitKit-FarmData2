"use strict";
// *****************************************************************************
// Copyright (C) 2024 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotebookOutputActionContribution = exports.NotebookOutputCommands = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@theia/core");
const inversify_1 = require("@theia/core/shared/inversify");
const notebook_editor_widget_service_1 = require("../service/notebook-editor-widget-service");
const common_1 = require("../../common");
const browser_1 = require("@theia/editor/lib/browser");
var NotebookOutputCommands;
(function (NotebookOutputCommands) {
    NotebookOutputCommands.ENABLE_SCROLLING = core_1.Command.toDefaultLocalizedCommand({
        id: 'cellOutput.enableScrolling',
    });
    NotebookOutputCommands.OPEN_LARGE_OUTPUT = core_1.Command.toDefaultLocalizedCommand({
        id: 'workbench.action.openLargeOutput',
        label: 'Open Large Output'
    });
})(NotebookOutputCommands || (exports.NotebookOutputCommands = NotebookOutputCommands = {}));
let NotebookOutputActionContribution = class NotebookOutputActionContribution {
    registerCommands(commands) {
        commands.registerCommand(NotebookOutputCommands.ENABLE_SCROLLING, {
            execute: outputId => {
                var _a;
                const [cell, output] = (_a = this.findOutputAndCell(outputId)) !== null && _a !== void 0 ? _a : [];
                if (cell && (output === null || output === void 0 ? void 0 : output.metadata)) {
                    output.metadata['scrollable'] = true;
                    cell.restartOutputRenderer(output.outputId);
                }
            }
        });
        commands.registerCommand(NotebookOutputCommands.OPEN_LARGE_OUTPUT, {
            execute: outputId => {
                var _a;
                const [cell, output] = (_a = this.findOutputAndCell(outputId)) !== null && _a !== void 0 ? _a : [];
                if (cell && output) {
                    this.editorManager.open(common_1.CellUri.generateCellOutputUri(common_1.CellUri.parse(cell.uri).notebook, output.outputId));
                }
            }
        });
    }
    findOutputAndCell(output) {
        var _a;
        const model = (_a = this.notebookEditorService.focusedEditor) === null || _a === void 0 ? void 0 : _a.model;
        if (!model) {
            return undefined;
        }
        const outputId = output.slice(0, output.lastIndexOf('-'));
        for (const cell of model.cells) {
            for (const outputModel of cell.outputs) {
                if (outputModel.outputId === outputId) {
                    return [cell, outputModel];
                }
            }
        }
    }
};
exports.NotebookOutputActionContribution = NotebookOutputActionContribution;
tslib_1.__decorate([
    (0, inversify_1.inject)(notebook_editor_widget_service_1.NotebookEditorWidgetService),
    tslib_1.__metadata("design:type", notebook_editor_widget_service_1.NotebookEditorWidgetService)
], NotebookOutputActionContribution.prototype, "notebookEditorService", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(browser_1.EditorManager),
    tslib_1.__metadata("design:type", browser_1.EditorManager)
], NotebookOutputActionContribution.prototype, "editorManager", void 0);
exports.NotebookOutputActionContribution = NotebookOutputActionContribution = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], NotebookOutputActionContribution);
//# sourceMappingURL=notebook-output-action-contribution.js.map