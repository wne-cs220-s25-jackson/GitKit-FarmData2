import { Command, CommandContribution, CommandHandler, CommandRegistry, MenuContribution, MenuModelRegistry, URI } from '@theia/core';
import { ApplicationShell, KeybindingContribution, KeybindingRegistry } from '@theia/core/lib/browser';
import { NotebookModel } from '../view-model/notebook-model';
import { NotebookService } from '../service/notebook-service';
import { NotebookKernelQuickPickService } from '../service/notebook-kernel-quick-pick-service';
import { NotebookExecutionService } from '../service/notebook-execution-service';
import { NotebookEditorWidgetService } from '../service/notebook-editor-widget-service';
import { NotebookClipboardService } from '../service/notebook-clipboard-service';
import { ContextKeyService } from '@theia/core/lib/browser/context-key-service';
export declare namespace NotebookCommands {
    const ADD_NEW_CELL_COMMAND: Command;
    const ADD_NEW_MARKDOWN_CELL_COMMAND: Command;
    const ADD_NEW_CODE_CELL_COMMAND: Command;
    const SELECT_KERNEL_COMMAND: Command;
    const EXECUTE_NOTEBOOK_COMMAND: Command;
    const CLEAR_ALL_OUTPUTS_COMMAND: Command;
    const CHANGE_SELECTED_CELL: Command;
    const CUT_SELECTED_CELL: Command;
    const COPY_SELECTED_CELL: Command;
    const PASTE_CELL: Command;
    const NOTEBOOK_FIND: Command;
    const CENTER_ACTIVE_CELL: Command;
}
export declare enum CellChangeDirection {
    Up = "up",
    Down = "down"
}
export declare class NotebookActionsContribution implements CommandContribution, MenuContribution, KeybindingContribution {
    protected notebookService: NotebookService;
    protected notebookKernelQuickPickService: NotebookKernelQuickPickService;
    protected notebookExecutionService: NotebookExecutionService;
    protected shell: ApplicationShell;
    protected notebookEditorWidgetService: NotebookEditorWidgetService;
    protected notebookClipboardService: NotebookClipboardService;
    protected contextKeyService: ContextKeyService;
    registerCommands(commands: CommandRegistry): void;
    protected editableCommandHandler(execute: (notebookModel: NotebookModel) => void): CommandHandler;
    protected withModel<T>(item: URI | NotebookModel, execute: (notebookModel: NotebookModel) => T, defaultValue: T): T;
    registerMenus(menus: MenuModelRegistry): void;
    registerKeybindings(keybindings: KeybindingRegistry): void;
}
export declare namespace NotebookMenus {
    const NOTEBOOK_MAIN_TOOLBAR = "notebook/toolbar";
    const NOTEBOOK_MAIN_TOOLBAR_CELL_ADD_GROUP: string[];
    const NOTEBOOK_MAIN_TOOLBAR_EXECUTION_GROUP: string[];
    const NOTEBOOK_MAIN_TOOLBAR_HIDDEN_ITEMS_CONTEXT_MENU = "notebook-main-toolbar-hidden-items-context-menu";
}
//# sourceMappingURL=notebook-actions-contribution.d.ts.map