/// <reference types="react" />
/// <reference types="lodash" />
import * as React from '@theia/core/shared/react';
import { CommandRegistry, MenuModelRegistry, URI } from '@theia/core';
import { ReactWidget, Navigatable, SaveableSource, Message, DelegatingSaveable } from '@theia/core/lib/browser';
import { ReactNode } from '@theia/core/shared/react';
import { CellKind } from '../common';
import { CellRenderer as CellRenderer } from './view/notebook-cell-list-view';
import { NotebookCodeCellRenderer } from './view/notebook-code-cell-view';
import { NotebookMarkdownCellRenderer } from './view/notebook-markdown-cell-view';
import { NotebookModel } from './view-model/notebook-model';
import { NotebookCellToolbarFactory } from './view/notebook-cell-toolbar-factory';
import { interfaces } from '@theia/core/shared/inversify';
import { Emitter } from '@theia/core/shared/vscode-languageserver-protocol';
import { NotebookEditorWidgetService } from './service/notebook-editor-widget-service';
import { NotebookMainToolbarRenderer } from './view/notebook-main-toolbar';
import { Deferred } from '@theia/core/lib/common/promise-util';
import { MarkdownString } from '@theia/core/lib/common/markdown-rendering';
import { NotebookContextManager } from './service/notebook-context-manager';
import { NotebookViewportService } from './view/notebook-viewport-service';
import { NotebookFindWidget } from './view/notebook-find-widget';
import { CellOutputWebview } from './renderers/cell-output-webview';
import { NotebookCellOutputModel } from './view-model/notebook-cell-output-model';
export declare const NotebookEditorWidgetContainerFactory: unique symbol;
export declare function createNotebookEditorWidgetContainer(parent: interfaces.Container, props: NotebookEditorProps): interfaces.Container;
export declare const NotebookEditorProps: unique symbol;
interface RenderMessage {
    rendererId: string;
    message: unknown;
}
export interface NotebookEditorProps {
    uri: URI;
    readonly notebookType: string;
    notebookData: Promise<NotebookModel>;
}
export declare const NOTEBOOK_EDITOR_ID_PREFIX = "notebook:";
export declare class NotebookEditorWidget extends ReactWidget implements Navigatable, SaveableSource {
    static readonly ID = "notebook";
    readonly saveable: DelegatingSaveable;
    protected readonly cellToolbarFactory: NotebookCellToolbarFactory;
    protected commandRegistry: CommandRegistry;
    protected menuRegistry: MenuModelRegistry;
    protected notebookEditorService: NotebookEditorWidgetService;
    protected notebookMainToolbarRenderer: NotebookMainToolbarRenderer;
    protected notebookContextManager: NotebookContextManager;
    protected codeCellRenderer: NotebookCodeCellRenderer;
    protected markdownCellRenderer: NotebookMarkdownCellRenderer;
    protected readonly props: NotebookEditorProps;
    protected readonly viewportService: NotebookViewportService;
    protected readonly cellOutputWebview: CellOutputWebview;
    protected readonly onDidChangeModelEmitter: Emitter<void>;
    readonly onDidChangeModel: import("vscode-jsonrpc/lib/common/events").Event<void>;
    protected readonly onDidChangeReadOnlyEmitter: Emitter<boolean | MarkdownString>;
    readonly onDidChangeReadOnly: import("vscode-jsonrpc/lib/common/events").Event<boolean | MarkdownString>;
    protected readonly onPostKernelMessageEmitter: Emitter<unknown>;
    readonly onPostKernelMessage: import("vscode-jsonrpc/lib/common/events").Event<unknown>;
    protected readonly onDidPostKernelMessageEmitter: Emitter<unknown>;
    readonly onDidPostKernelMessage: import("vscode-jsonrpc/lib/common/events").Event<unknown>;
    protected readonly onPostRendererMessageEmitter: Emitter<RenderMessage>;
    readonly onPostRendererMessage: import("vscode-jsonrpc/lib/common/events").Event<RenderMessage>;
    protected readonly onDidReceiveKernelMessageEmitter: Emitter<unknown>;
    readonly onDidReceiveKernelMessage: import("vscode-jsonrpc/lib/common/events").Event<unknown>;
    protected readonly onDidChangeOutputInputFocusEmitter: Emitter<boolean>;
    readonly onDidChangeOutputInputFocus: import("vscode-jsonrpc/lib/common/events").Event<boolean>;
    protected readonly renderers: Map<CellKind, CellRenderer>;
    protected _model?: NotebookModel;
    protected _ready: Deferred<NotebookModel>;
    protected _findWidgetVisible: boolean;
    protected _findWidgetRef: React.RefObject<NotebookFindWidget>;
    protected scrollBarRef: React.RefObject<{
        updateScroll(): void;
    }>;
    protected debounceFind: import("lodash").DebouncedFunc<() => void>;
    get notebookType(): string;
    get ready(): Promise<NotebookModel>;
    get model(): NotebookModel | undefined;
    protected init(): void;
    protected waitForData(): Promise<NotebookModel>;
    protected onActivateRequest(msg: Message): void;
    getResourceUri(): URI | undefined;
    createMoveToUri(resourceUri: URI): URI | undefined;
    undo(): void;
    redo(): void;
    protected render(): ReactNode;
    protected onCloseRequest(msg: Message): void;
    requestOuputPresentationChange(cellHandle: number, output?: NotebookCellOutputModel): void;
    postKernelMessage(message: unknown): void;
    postRendererMessage(rendererId: string, message: unknown): void;
    recieveKernelMessage(message: unknown): void;
    outputInputFocusChanged(focused: boolean): void;
    showFindWidget(): void;
    dispose(): void;
    protected onAfterShow(msg: Message): void;
    protected onAfterHide(msg: Message): void;
}
export {};
//# sourceMappingURL=notebook-editor-widget.d.ts.map