import { URI, MaybePromise, Disposable } from '@theia/core';
import { NavigatableWidgetOpenHandler, PreferenceService, WidgetOpenerOptions } from '@theia/core/lib/browser';
import { NotebookFileSelector, NotebookTypeDescriptor } from '../common/notebook-protocol';
import { NotebookEditorWidget } from './notebook-editor-widget';
import { NotebookEditorWidgetOptions } from './notebook-editor-widget-factory';
export interface NotebookWidgetOpenerOptions extends WidgetOpenerOptions {
    notebookType?: string;
}
export declare class NotebookOpenHandler extends NavigatableWidgetOpenHandler<NotebookEditorWidget> {
    readonly id = "notebook";
    protected notebookTypes: NotebookTypeDescriptor[];
    protected readonly preferenceService: PreferenceService;
    registerNotebookType(notebookType: NotebookTypeDescriptor): Disposable;
    canHandle(uri: URI, options?: NotebookWidgetOpenerOptions): MaybePromise<number>;
    canHandleType(uri: URI, notebookType?: NotebookTypeDescriptor, defaultHandler?: string): number;
    protected calculatePriority(notebookType: NotebookTypeDescriptor | undefined): number;
    protected findHighestPriorityType(uri: URI): NotebookTypeDescriptor | undefined;
    open(uri: URI, options?: NotebookWidgetOpenerOptions): Promise<NotebookEditorWidget>;
    protected createWidgetOptions(uri: URI, options?: NotebookWidgetOpenerOptions): NotebookEditorWidgetOptions;
    protected matches(selectors: readonly NotebookFileSelector[], resource: URI): boolean;
    protected selectorMatches(selector: NotebookFileSelector, resource: URI): boolean;
}
//# sourceMappingURL=notebook-open-handler.d.ts.map