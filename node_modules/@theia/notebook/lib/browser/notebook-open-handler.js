"use strict";
// *****************************************************************************
// Copyright (C) 2023 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotebookOpenHandler = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@theia/core");
const browser_1 = require("@theia/core/lib/browser");
const inversify_1 = require("@theia/core/shared/inversify");
const notebook_editor_widget_1 = require("./notebook-editor-widget");
const glob_1 = require("@theia/core/lib/common/glob");
let NotebookOpenHandler = class NotebookOpenHandler extends browser_1.NavigatableWidgetOpenHandler {
    constructor() {
        super(...arguments);
        this.id = notebook_editor_widget_1.NotebookEditorWidget.ID;
        this.notebookTypes = [];
    }
    registerNotebookType(notebookType) {
        this.notebookTypes.push(notebookType);
        return core_1.Disposable.create(() => {
            this.notebookTypes.splice(this.notebookTypes.indexOf(notebookType), 1);
        });
    }
    canHandle(uri, options) {
        const defaultHandler = (0, browser_1.getDefaultHandler)(uri, this.preferenceService);
        if (options === null || options === void 0 ? void 0 : options.notebookType) {
            return this.canHandleType(uri, this.notebookTypes.find(type => type.type === options.notebookType), defaultHandler);
        }
        return Math.max(...this.notebookTypes.map(type => this.canHandleType(uri, type), defaultHandler));
    }
    canHandleType(uri, notebookType, defaultHandler) {
        if ((notebookType === null || notebookType === void 0 ? void 0 : notebookType.selector) && this.matches(notebookType.selector, uri)) {
            return notebookType.type === defaultHandler ? browser_1.defaultHandlerPriority : this.calculatePriority(notebookType);
        }
        else {
            return 0;
        }
    }
    calculatePriority(notebookType) {
        if (!notebookType) {
            return 0;
        }
        return notebookType.priority === 'option' ? 100 : 200;
    }
    findHighestPriorityType(uri) {
        const matchingTypes = this.notebookTypes
            .filter(notebookType => notebookType.selector && this.matches(notebookType.selector, uri))
            .map(notebookType => ({ descriptor: notebookType, priority: this.calculatePriority(notebookType) }));
        if (matchingTypes.length === 0) {
            return undefined;
        }
        let type = matchingTypes[0];
        for (let i = 1; i < matchingTypes.length; i++) {
            const notebookType = matchingTypes[i];
            if (notebookType.priority > type.priority) {
                type = notebookType;
            }
        }
        return type.descriptor;
    }
    // Override for better options typing
    open(uri, options) {
        return super.open(uri, options);
    }
    createWidgetOptions(uri, options) {
        const widgetOptions = super.createWidgetOptions(uri, options);
        if (options === null || options === void 0 ? void 0 : options.notebookType) {
            return {
                notebookType: options.notebookType,
                ...widgetOptions
            };
        }
        const defaultHandler = (0, browser_1.getDefaultHandler)(uri, this.preferenceService);
        const notebookType = this.notebookTypes.find(type => type.type === defaultHandler)
            || this.findHighestPriorityType(uri);
        if (!notebookType) {
            throw new Error('No notebook types registered for uri: ' + uri.toString());
        }
        return {
            notebookType: notebookType.type,
            ...widgetOptions
        };
    }
    matches(selectors, resource) {
        return selectors.some(selector => this.selectorMatches(selector, resource));
    }
    selectorMatches(selector, resource) {
        return !!selector.filenamePattern
            && (0, glob_1.match)(selector.filenamePattern, resource.path.name + resource.path.ext);
    }
};
exports.NotebookOpenHandler = NotebookOpenHandler;
tslib_1.__decorate([
    (0, inversify_1.inject)(browser_1.PreferenceService),
    tslib_1.__metadata("design:type", Object)
], NotebookOpenHandler.prototype, "preferenceService", void 0);
exports.NotebookOpenHandler = NotebookOpenHandler = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], NotebookOpenHandler);
//# sourceMappingURL=notebook-open-handler.js.map