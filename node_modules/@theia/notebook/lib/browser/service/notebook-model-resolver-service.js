"use strict";
// *****************************************************************************
// Copyright (C) 2023 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotebookModelResolverService = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@theia/core");
const inversify_1 = require("@theia/core/shared/inversify");
const file_service_1 = require("@theia/filesystem/lib/browser/file-service");
const notebook_service_1 = require("./notebook-service");
const notebook_type_registry_1 = require("../notebook-type-registry");
const glob_1 = require("@theia/core/lib/common/glob");
let NotebookModelResolverService = class NotebookModelResolverService {
    constructor() {
        this.onDidChangeDirtyEmitter = new core_1.Emitter();
        this.onDidChangeDirty = this.onDidChangeDirtyEmitter.event;
        this.onDidSaveNotebookEmitter = new core_1.Emitter();
        this.onDidSaveNotebook = this.onDidSaveNotebookEmitter.event;
    }
    async resolve(resource, viewType) {
        const existingModel = this.notebookService.getNotebookEditorModel(resource);
        if (!viewType) {
            if (existingModel) {
                return existingModel;
            }
            else {
                viewType = this.findViewTypeForResource(resource);
            }
        }
        else if ((existingModel === null || existingModel === void 0 ? void 0 : existingModel.viewType) === viewType) {
            return existingModel;
        }
        if (!viewType) {
            throw new Error(`Missing viewType for '${resource}'`);
        }
        const actualResource = await this.resourceProvider(resource);
        const notebookData = await this.resolveExistingNotebookData(actualResource, viewType);
        const notebookModel = await this.notebookService.createNotebookModel(notebookData, viewType, actualResource);
        notebookModel.onDirtyChanged(() => this.onDidChangeDirtyEmitter.fire(notebookModel));
        notebookModel.onDidSaveNotebook(() => this.onDidSaveNotebookEmitter.fire(notebookModel.uri.toComponents()));
        return notebookModel;
    }
    async resolveUntitledResource(arg, viewType) {
        var _a, _b;
        let resource;
        // let hasAssociatedFilePath = false;
        arg = arg;
        if (!arg.untitledResource) {
            const notebookTypeInfo = this.notebookTypeRegistry.notebookTypes.find(info => info.type === viewType);
            if (!notebookTypeInfo) {
                throw new Error('UNKNOWN view type: ' + viewType);
            }
            const suffix = (_b = this.getPossibleFileEnding((_a = notebookTypeInfo.selector) !== null && _a !== void 0 ? _a : [])) !== null && _b !== void 0 ? _b : '';
            for (let counter = 1;; counter++) {
                const candidate = new core_1.URI()
                    .withScheme(core_1.UNTITLED_SCHEME)
                    .withPath(`Untitled-notebook-${counter}${suffix}`)
                    .withQuery(viewType);
                if (!this.notebookService.getNotebookEditorModel(candidate)) {
                    resource = candidate;
                    break;
                }
            }
        }
        else if (arg.untitledResource.scheme === core_1.UNTITLED_SCHEME) {
            resource = arg.untitledResource;
        }
        else {
            throw new Error('Invalid untitled resource: ' + arg.untitledResource.toString() + ' untitled resources with associated file path are not supported yet');
            // TODO implement associated file path support
            // resource = arg.untitledResource.withScheme('untitled');
            // hasAssociatedFilePath = true;
        }
        return this.resolve(resource, viewType);
    }
    async resolveExistingNotebookData(resource, viewType) {
        if (resource.uri.scheme === 'untitled') {
            return {
                cells: [],
                metadata: {}
            };
        }
        else {
            const [dataProvider, contents] = await Promise.all([
                this.notebookService.getNotebookDataProvider(viewType),
                this.fileService.readFile(resource.uri)
            ]);
            const notebook = await dataProvider.serializer.toNotebook(contents.value);
            return notebook;
        }
    }
    getPossibleFileEnding(selectors) {
        for (const selector of selectors) {
            const ending = this.possibleFileEnding(selector);
            if (ending) {
                return ending;
            }
        }
        return undefined;
    }
    possibleFileEnding(selector) {
        const pattern = /^.*(\.[a-zA-Z0-9_-]+)$/;
        const candidate = typeof selector === 'string' ? selector : selector.filenamePattern;
        if (candidate) {
            const matches = pattern.exec(candidate);
            if (matches) {
                return matches[1];
            }
        }
        return undefined;
    }
    findViewTypeForResource(resource) {
        var _a;
        return (_a = this.notebookTypeRegistry.notebookTypes.find(info => { var _a; return (_a = info.selector) === null || _a === void 0 ? void 0 : _a.some(selector => selector.filenamePattern && (0, glob_1.match)(selector.filenamePattern, resource.path.name + resource.path.ext)); })) === null || _a === void 0 ? void 0 : _a.type;
    }
};
exports.NotebookModelResolverService = NotebookModelResolverService;
tslib_1.__decorate([
    (0, inversify_1.inject)(file_service_1.FileService),
    tslib_1.__metadata("design:type", file_service_1.FileService)
], NotebookModelResolverService.prototype, "fileService", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(core_1.ResourceProvider),
    tslib_1.__metadata("design:type", Function)
], NotebookModelResolverService.prototype, "resourceProvider", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(notebook_service_1.NotebookService),
    tslib_1.__metadata("design:type", notebook_service_1.NotebookService)
], NotebookModelResolverService.prototype, "notebookService", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(notebook_type_registry_1.NotebookTypeRegistry),
    tslib_1.__metadata("design:type", notebook_type_registry_1.NotebookTypeRegistry)
], NotebookModelResolverService.prototype, "notebookTypeRegistry", void 0);
exports.NotebookModelResolverService = NotebookModelResolverService = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], NotebookModelResolverService);
//# sourceMappingURL=notebook-model-resolver-service.js.map