import { ContextKeyChangeEvent, ContextKeyService, ContextMatcher, ScopedValueStore } from '@theia/core/lib/browser/context-key-service';
import { DisposableCollection, Emitter } from '@theia/core';
import { NotebookKernelService } from './notebook-kernel-service';
import { NotebookEditorWidget } from '../notebook-editor-widget';
import { NotebookCellModel } from '../view-model/notebook-cell-model';
import { NotebookExecutionStateService } from './notebook-execution-state-service';
export declare class NotebookContextManager {
    protected contextKeyService: ContextKeyService;
    protected readonly notebookKernelService: NotebookKernelService;
    protected readonly executionStateService: NotebookExecutionStateService;
    protected readonly toDispose: DisposableCollection;
    protected readonly onDidChangeContextEmitter: Emitter<ContextKeyChangeEvent>;
    readonly onDidChangeContext: import("@theia/core").Event<ContextKeyChangeEvent>;
    protected _context?: HTMLElement;
    scopedStore: ScopedValueStore;
    get context(): HTMLElement | undefined;
    protected cellContexts: Map<number, Record<string, unknown>>;
    init(widget: NotebookEditorWidget): void;
    protected cellDisposables: DisposableCollection;
    selectedCellChanged(cell: NotebookCellModel | undefined): void;
    protected setCellContext(cellHandle: number, key: string, value: unknown): void;
    getCellContext(cellHandle: number): ContextMatcher;
    changeCellFocus(focus: boolean): void;
    changeCellListFocus(focus: boolean): void;
    createContextKeyChangedEvent(affectedKeys: string[]): ContextKeyChangeEvent;
    dispose(): void;
}
//# sourceMappingURL=notebook-context-manager.d.ts.map