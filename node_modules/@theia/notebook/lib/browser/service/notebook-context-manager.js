"use strict";
// *****************************************************************************
// Copyright (C) 2024 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotebookContextManager = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("@theia/core/shared/inversify");
const context_key_service_1 = require("@theia/core/lib/browser/context-key-service");
const core_1 = require("@theia/core");
const notebook_kernel_service_1 = require("./notebook-kernel-service");
const notebook_context_keys_1 = require("../contributions/notebook-context-keys");
const common_1 = require("../../common");
const notebook_execution_state_service_1 = require("./notebook-execution-state-service");
let NotebookContextManager = class NotebookContextManager {
    constructor() {
        this.toDispose = new core_1.DisposableCollection();
        this.onDidChangeContextEmitter = new core_1.Emitter();
        this.onDidChangeContext = this.onDidChangeContextEmitter.event;
        this.cellContexts = new Map();
        this.cellDisposables = new core_1.DisposableCollection();
    }
    get context() {
        return this._context;
    }
    init(widget) {
        var _a, _b, _c, _d;
        this._context = widget.node;
        this.scopedStore = this.contextKeyService.createScoped(widget.node);
        this.toDispose.dispose();
        this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_VIEW_TYPE, widget === null || widget === void 0 ? void 0 : widget.notebookType);
        // Kernel related keys
        const kernel = (widget === null || widget === void 0 ? void 0 : widget.model) ? this.notebookKernelService.getSelectedNotebookKernel(widget.model) : undefined;
        this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_KERNEL_SELECTED, !!kernel);
        this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_KERNEL, kernel === null || kernel === void 0 ? void 0 : kernel.id);
        this.toDispose.push(this.notebookKernelService.onDidChangeSelectedKernel(e => {
            var _a;
            if (e.notebook.toString() === ((_a = widget === null || widget === void 0 ? void 0 : widget.getResourceUri()) === null || _a === void 0 ? void 0 : _a.toString())) {
                this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_KERNEL_SELECTED, !!e.newKernel);
                this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_KERNEL, e.newKernel);
                this.onDidChangeContextEmitter.fire(this.createContextKeyChangedEvent([notebook_context_keys_1.NOTEBOOK_KERNEL_SELECTED, notebook_context_keys_1.NOTEBOOK_KERNEL]));
            }
        }));
        (_a = widget.model) === null || _a === void 0 ? void 0 : _a.onDidChangeContent(events => {
            var _a;
            if (events.some(e => e.kind === common_1.NotebookCellsChangeType.ModelChange || e.kind === common_1.NotebookCellsChangeType.Output)) {
                this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_HAS_OUTPUTS, (_a = widget.model) === null || _a === void 0 ? void 0 : _a.cells.some(cell => cell.outputs.length > 0));
                this.onDidChangeContextEmitter.fire(this.createContextKeyChangedEvent([notebook_context_keys_1.NOTEBOOK_HAS_OUTPUTS]));
            }
        });
        this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_HAS_OUTPUTS, !!((_b = widget.model) === null || _b === void 0 ? void 0 : _b.cells.find(cell => cell.outputs.length > 0)));
        // Cell Selection related keys
        this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED, !!((_c = widget.model) === null || _c === void 0 ? void 0 : _c.selectedCell));
        (_d = widget.model) === null || _d === void 0 ? void 0 : _d.onDidChangeSelectedCell(e => {
            this.selectedCellChanged(e.cell);
            this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED, !!e);
            this.onDidChangeContextEmitter.fire(this.createContextKeyChangedEvent([notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED]));
        });
        this.toDispose.push(this.executionStateService.onDidChangeExecution(e => {
            var _a, _b, _c;
            if (e.notebook.toString() === ((_a = widget.model) === null || _a === void 0 ? void 0 : _a.uri.toString())) {
                this.setCellContext(e.cellHandle, notebook_context_keys_1.NOTEBOOK_CELL_EXECUTING, !!e.changed);
                this.setCellContext(e.cellHandle, notebook_context_keys_1.NOTEBOOK_CELL_EXECUTION_STATE, (_c = (_b = e.changed) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : 'idle');
                this.onDidChangeContextEmitter.fire(this.createContextKeyChangedEvent([notebook_context_keys_1.NOTEBOOK_CELL_EXECUTING, notebook_context_keys_1.NOTEBOOK_CELL_EXECUTION_STATE]));
            }
        }));
        widget.onDidChangeOutputInputFocus(focus => {
            this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_OUTPUT_INPUT_FOCUSED, focus);
            this.onDidChangeContextEmitter.fire(this.createContextKeyChangedEvent([notebook_context_keys_1.NOTEBOOK_OUTPUT_INPUT_FOCUSED]));
        });
        this.onDidChangeContextEmitter.fire(this.createContextKeyChangedEvent([notebook_context_keys_1.NOTEBOOK_VIEW_TYPE, notebook_context_keys_1.NOTEBOOK_KERNEL_SELECTED, notebook_context_keys_1.NOTEBOOK_KERNEL]));
    }
    selectedCellChanged(cell) {
        this.cellDisposables.dispose();
        this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_CELL_TYPE, cell ? cell.cellKind === common_1.CellKind.Code ? 'code' : 'markdown' : undefined);
        if (cell) {
            this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_CELL_MARKDOWN_EDIT_MODE, cell.editing);
            this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_CELL_EDITABLE, cell.cellKind === common_1.CellKind.Markup && !cell.editing);
            this.cellDisposables.push(cell.onDidRequestCellEditChange(cellEdit => {
                this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_CELL_MARKDOWN_EDIT_MODE, cellEdit);
                this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_CELL_EDITABLE, cell.cellKind === common_1.CellKind.Markup && !cellEdit);
                this.onDidChangeContextEmitter.fire(this.createContextKeyChangedEvent([notebook_context_keys_1.NOTEBOOK_CELL_MARKDOWN_EDIT_MODE]));
            }));
        }
        this.onDidChangeContextEmitter.fire(this.createContextKeyChangedEvent([notebook_context_keys_1.NOTEBOOK_CELL_TYPE]));
    }
    setCellContext(cellHandle, key, value) {
        let cellContext = this.cellContexts.get(cellHandle);
        if (!cellContext) {
            cellContext = {};
            this.cellContexts.set(cellHandle, cellContext);
        }
        cellContext[key] = value;
    }
    getCellContext(cellHandle) {
        var _a;
        return this.contextKeyService.createOverlay(Object.entries((_a = this.cellContexts.get(cellHandle)) !== null && _a !== void 0 ? _a : {}));
    }
    changeCellFocus(focus) {
        this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_CELL_FOCUSED, focus);
    }
    changeCellListFocus(focus) {
        this.scopedStore.setContext(notebook_context_keys_1.NOTEBOOK_CELL_LIST_FOCUSED, focus);
    }
    createContextKeyChangedEvent(affectedKeys) {
        return { affects: keys => affectedKeys.some(key => keys.has(key)) };
    }
    dispose() {
        this.toDispose.dispose();
    }
};
exports.NotebookContextManager = NotebookContextManager;
tslib_1.__decorate([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    tslib_1.__metadata("design:type", Object)
], NotebookContextManager.prototype, "contextKeyService", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(notebook_kernel_service_1.NotebookKernelService),
    tslib_1.__metadata("design:type", notebook_kernel_service_1.NotebookKernelService)
], NotebookContextManager.prototype, "notebookKernelService", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(notebook_execution_state_service_1.NotebookExecutionStateService),
    tslib_1.__metadata("design:type", notebook_execution_state_service_1.NotebookExecutionStateService)
], NotebookContextManager.prototype, "executionStateService", void 0);
exports.NotebookContextManager = NotebookContextManager = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], NotebookContextManager);
//# sourceMappingURL=notebook-context-manager.js.map