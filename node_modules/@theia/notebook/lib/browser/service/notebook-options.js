"use strict";
// *****************************************************************************
// Copyright (C) 2024 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotebookOptionsService = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("@theia/core/shared/inversify");
const browser_1 = require("@theia/core/lib/browser");
const core_1 = require("@theia/core");
const notebook_preferences_1 = require("../contributions/notebook-preferences");
const browser_2 = require("@theia/editor/lib/browser");
const fontInfo_1 = require("@theia/monaco-editor-core/esm/vs/editor/common/config/fontInfo");
const pixelRatio_1 = require("@theia/monaco-editor-core/esm/vs/base/browser/pixelRatio");
const notebookOutputOptionsRelevantPreferences = [
    'editor.fontSize',
    'editor.fontFamily',
    notebook_preferences_1.NotebookPreferences.NOTEBOOK_LINE_NUMBERS,
    notebook_preferences_1.NotebookPreferences.OUTPUT_LINE_HEIGHT,
    notebook_preferences_1.NotebookPreferences.OUTPUT_FONT_SIZE,
    notebook_preferences_1.NotebookPreferences.OUTPUT_FONT_FAMILY,
    notebook_preferences_1.NotebookPreferences.OUTPUT_SCROLLING,
    notebook_preferences_1.NotebookPreferences.OUTPUT_WORD_WRAP,
    notebook_preferences_1.NotebookPreferences.OUTPUT_LINE_LIMIT
];
let NotebookOptionsService = class NotebookOptionsService {
    constructor() {
        this.outputOptionsChangedEmitter = new core_1.Emitter();
        this.onDidChangeOutputOptions = this.outputOptionsChangedEmitter.event;
    }
    get editorFontInfo() {
        return this.getOrCreateMonacoFontInfo();
    }
    init() {
        this.preferenceService.onPreferencesChanged(async (preferenceChanges) => {
            if (notebookOutputOptionsRelevantPreferences.some(p => p in preferenceChanges)) {
                this.outputOptionsChangedEmitter.fire(this.computeOutputOptions());
            }
        });
    }
    computeOutputOptions() {
        const outputLineHeight = this.getNotebookPreferenceWithDefault(notebook_preferences_1.NotebookPreferences.OUTPUT_LINE_HEIGHT);
        const fontSize = this.preferenceService.get('editor.fontSize');
        const outputFontSize = this.getNotebookPreferenceWithDefault(notebook_preferences_1.NotebookPreferences.OUTPUT_FONT_SIZE);
        return {
            fontSize,
            outputFontSize: outputFontSize,
            fontFamily: this.preferenceService.get('editor.fontFamily'),
            outputNodeLeftPadding: 8,
            outputFontFamily: this.getNotebookPreferenceWithDefault(notebook_preferences_1.NotebookPreferences.OUTPUT_FONT_FAMILY),
            outputLineHeight: this.computeOutputLineHeight(outputLineHeight, outputFontSize !== null && outputFontSize !== void 0 ? outputFontSize : fontSize),
            outputScrolling: this.getNotebookPreferenceWithDefault(notebook_preferences_1.NotebookPreferences.OUTPUT_SCROLLING),
            outputWordWrap: this.getNotebookPreferenceWithDefault(notebook_preferences_1.NotebookPreferences.OUTPUT_WORD_WRAP),
            outputLineLimit: this.getNotebookPreferenceWithDefault(notebook_preferences_1.NotebookPreferences.OUTPUT_LINE_LIMIT)
        };
    }
    getNotebookPreferenceWithDefault(key) {
        var _a, _b;
        return this.preferenceService.get(key, (_b = (_a = notebook_preferences_1.notebookPreferenceSchema.properties) === null || _a === void 0 ? void 0 : _a[key]) === null || _b === void 0 ? void 0 : _b.default);
    }
    computeOutputLineHeight(lineHeight, outputFontSize) {
        const minimumLineHeight = 9;
        if (lineHeight === 0) {
            // use editor line height
            lineHeight = this.editorFontInfo.lineHeight;
        }
        else if (lineHeight < minimumLineHeight) {
            // Values too small to be line heights in pixels are in ems.
            let fontSize = outputFontSize;
            if (fontSize === 0) {
                fontSize = this.preferenceService.get('editor.fontSize');
            }
            lineHeight = lineHeight * fontSize;
        }
        // Enforce integer, minimum constraints
        lineHeight = Math.round(lineHeight);
        if (lineHeight < minimumLineHeight) {
            lineHeight = minimumLineHeight;
        }
        return lineHeight;
    }
    getOrCreateMonacoFontInfo() {
        if (!this.fontInfo) {
            this.fontInfo = this.createFontInfo();
            this.editorPreferences.onPreferenceChanged(e => this.fontInfo = this.createFontInfo());
        }
        return this.fontInfo;
    }
    createFontInfo() {
        return fontInfo_1.BareFontInfo.createFromRawSettings({
            fontFamily: this.editorPreferences['editor.fontFamily'],
            fontWeight: String(this.editorPreferences['editor.fontWeight']),
            fontSize: this.editorPreferences['editor.fontSize'],
            fontLigatures: this.editorPreferences['editor.fontLigatures'],
            lineHeight: this.editorPreferences['editor.lineHeight'],
            letterSpacing: this.editorPreferences['editor.letterSpacing'],
        }, pixelRatio_1.PixelRatio.getInstance(window).value);
    }
};
exports.NotebookOptionsService = NotebookOptionsService;
tslib_1.__decorate([
    (0, inversify_1.inject)(browser_1.PreferenceService),
    tslib_1.__metadata("design:type", Object)
], NotebookOptionsService.prototype, "preferenceService", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(browser_2.EditorPreferences),
    tslib_1.__metadata("design:type", Object)
], NotebookOptionsService.prototype, "editorPreferences", void 0);
tslib_1.__decorate([
    (0, inversify_1.postConstruct)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], NotebookOptionsService.prototype, "init", null);
exports.NotebookOptionsService = NotebookOptionsService = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], NotebookOptionsService);
//# sourceMappingURL=notebook-options.js.map