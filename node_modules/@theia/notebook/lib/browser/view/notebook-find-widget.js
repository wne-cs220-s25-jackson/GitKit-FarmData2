"use strict";
// *****************************************************************************
// Copyright (C) 2024 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotebookFindWidget = void 0;
const core_1 = require("@theia/core");
const React = require("@theia/core/shared/react");
const browser_1 = require("@theia/core/lib/browser");
const debounce = require("lodash/debounce");
class NotebookFindWidget extends React.Component {
    constructor(props) {
        var _a;
        super(props);
        this.searchRef = React.createRef();
        this.debounceSearch = debounce(this.search.bind(this), 50);
        this.state = {
            search: '',
            replace: '',
            currentMatch: 0,
            matches: [],
            expanded: false,
            matchCase: false,
            regex: false,
            wholeWord: false,
            activeFilters: ((_a = props.filters) === null || _a === void 0 ? void 0 : _a.filter(filter => filter.active).map(filter => filter.id)) || []
        };
    }
    render() {
        const hasMatches = this.hasMatches();
        const canReplace = this.canReplace();
        const canReplaceAll = this.canReplaceAll();
        return (React.createElement("div", { onKeyUp: event => {
                if (event.key === 'Escape') {
                    this.props.onClose();
                }
            }, className: `theia-notebook-find-widget ${!this.state.expanded ? 'search-mode' : ''} ${this.props.hidden ? 'hidden' : ''}` },
            React.createElement("div", { className: 'theia-notebook-find-widget-expand', title: core_1.nls.localizeByDefault('Toggle Replace'), onClick: () => {
                    this.setState({
                        expanded: !this.state.expanded
                    });
                } },
                React.createElement("div", { className: (0, browser_1.codicon)(`chevron-${this.state.expanded ? 'down' : 'right'}`) })),
            React.createElement("div", { className: 'theia-notebook-find-widget-inputs' },
                React.createElement("div", { className: 'theia-notebook-find-widget-input-wrapper' },
                    React.createElement("input", { ref: this.searchRef, type: 'text', className: 'theia-input theia-notebook-find-widget-input', placeholder: core_1.nls.localizeByDefault('Find'), value: this.state.search, onChange: event => {
                            this.setState({
                                search: event.target.value
                            });
                            this.debounceSearch({});
                        }, onKeyDown: event => {
                            if (event.key === 'Enter') {
                                if (event.shiftKey) {
                                    this.gotoPreviousMatch();
                                }
                                else {
                                    this.gotoNextMatch();
                                }
                                event.preventDefault();
                            }
                        } }),
                    React.createElement("div", { className: `${(0, browser_1.codicon)('case-sensitive', true)} option ${this.state.matchCase ? 'enabled' : ''}`, title: core_1.nls.localizeByDefault('Match Case'), onClick: () => {
                            this.search({
                                matchCase: !this.state.matchCase
                            });
                        } }),
                    React.createElement("div", { className: `${(0, browser_1.codicon)('whole-word', true)} option ${this.state.wholeWord ? 'enabled' : ''}`, title: core_1.nls.localizeByDefault('Match Whole Word'), onClick: () => {
                            this.search({
                                wholeWord: !this.state.wholeWord
                            });
                        } }),
                    React.createElement("div", { className: `${(0, browser_1.codicon)('regex', true)} option ${this.state.regex ? 'enabled' : ''}`, title: core_1.nls.localizeByDefault('Use Regular Expression'), onClick: () => {
                            this.search({
                                regex: !this.state.regex
                            });
                        } })),
                React.createElement("input", { type: 'text', className: 'theia-input theia-notebook-find-widget-replace', placeholder: core_1.nls.localizeByDefault('Replace'), value: this.state.replace, onChange: event => {
                        this.setState({
                            replace: event.target.value
                        });
                    }, onKeyDown: event => {
                        if (event.key === 'Enter') {
                            this.replaceOne();
                            event.preventDefault();
                        }
                    } })),
            React.createElement("div", { className: 'theia-notebook-find-widget-buttons' },
                React.createElement("div", { className: 'theia-notebook-find-widget-buttons-first' },
                    React.createElement("div", { className: 'theia-notebook-find-widget-matches-count' }, this.getMatchesCount()),
                    React.createElement("div", { className: `${(0, browser_1.codicon)('arrow-up', hasMatches)} ${hasMatches ? '' : 'disabled'}`, title: core_1.nls.localizeByDefault('Previous Match'), onClick: () => {
                            this.gotoPreviousMatch();
                        } }),
                    React.createElement("div", { className: `${(0, browser_1.codicon)('arrow-down', hasMatches)} ${hasMatches ? '' : 'disabled'}`, title: core_1.nls.localizeByDefault('Next Match'), onClick: () => {
                            this.gotoNextMatch();
                        } }),
                    React.createElement("div", { className: (0, browser_1.codicon)('close', true), title: core_1.nls.localizeByDefault('Close'), onClick: () => {
                            this.props.onClose();
                        } })),
                React.createElement("div", { className: 'theia-notebook-find-widget-buttons-second' },
                    React.createElement("div", { className: `${(0, browser_1.codicon)('replace', canReplace)} ${canReplace ? '' : 'disabled'}`, title: core_1.nls.localizeByDefault('Replace'), onClick: () => {
                            this.replaceOne();
                        } }),
                    React.createElement("div", { className: `${(0, browser_1.codicon)('replace-all', canReplaceAll)} ${canReplaceAll ? '' : 'disabled'}`, title: core_1.nls.localizeByDefault('Replace All'), onClick: () => {
                            this.replaceAll();
                        } })))));
    }
    hasMatches() {
        return this.state.matches.length > 0;
    }
    canReplace() {
        var _a;
        return Boolean((_a = this.state.matches[this.state.currentMatch]) === null || _a === void 0 ? void 0 : _a.replace);
    }
    canReplaceAll() {
        return this.state.matches.some(match => Boolean(match.replace));
    }
    getMatchesCount() {
        if (this.hasMatches()) {
            return core_1.nls.localizeByDefault('{0} of {1}', this.state.currentMatch + 1, this.state.matches.length);
        }
        else {
            return core_1.nls.localizeByDefault('No results');
        }
    }
    gotoNextMatch() {
        this.search({
            modifyIndex: (matches, index) => (index + 1) % matches.length,
            jumpToMatch: true
        });
    }
    gotoPreviousMatch() {
        this.search({
            modifyIndex: (matches, index) => (index === 0 ? matches.length : index) - 1,
            jumpToMatch: true
        });
    }
    replaceOne() {
        var _a;
        const existingMatches = this.state.matches;
        const match = existingMatches[this.state.currentMatch];
        if (match) {
            (_a = match.replace) === null || _a === void 0 ? void 0 : _a.call(match, this.state.replace);
            this.search({
                jumpToMatch: true,
                modifyIndex: (matches, index) => {
                    if (matches.length < existingMatches.length) {
                        return index % matches.length;
                    }
                    else {
                        const diff = matches.length - existingMatches.length;
                        return (index + diff + 1) % matches.length;
                    }
                }
            });
        }
    }
    replaceAll() {
        this.props.onReplace(this.state.matches, this.state.replace);
        this.search({});
    }
    componentDidUpdate(prevProps, prevState) {
        var _a;
        if (!this.props.hidden && prevProps.hidden) {
            // Focus the search input when the widget switches from hidden to visible.
            (_a = this.searchRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }
    focusSearch(content) {
        var _a;
        (_a = this.searchRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        if (content) {
            this.search({
                search: content,
                jumpToMatch: false
            });
        }
    }
    search(options) {
        var _a, _b, _c, _d;
        const matchCase = (_a = options.matchCase) !== null && _a !== void 0 ? _a : this.state.matchCase;
        const wholeWord = (_b = options.wholeWord) !== null && _b !== void 0 ? _b : this.state.wholeWord;
        const regex = (_c = options.regex) !== null && _c !== void 0 ? _c : this.state.regex;
        const search = (_d = options.search) !== null && _d !== void 0 ? _d : this.state.search;
        const matches = this.props.onSearch({
            search,
            matchCase,
            wholeWord,
            regex,
            activeFilters: this.state.activeFilters
        });
        let currentMatch = Math.max(0, Math.min(this.state.currentMatch, matches.length - 1));
        if (options.modifyIndex && matches.length > 0) {
            currentMatch = options.modifyIndex(matches, currentMatch);
        }
        const selectedMatch = matches[currentMatch];
        if (selectedMatch) {
            selectedMatch.selected = true;
            if (options.jumpToMatch) {
                selectedMatch.show();
            }
        }
        this.setState({
            search,
            matches,
            currentMatch,
            matchCase,
            wholeWord,
            regex
        });
    }
}
exports.NotebookFindWidget = NotebookFindWidget;
//# sourceMappingURL=notebook-find-widget.js.map