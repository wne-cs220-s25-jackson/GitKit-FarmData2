"use strict";
// *****************************************************************************
// Copyright (C) 2024 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotebookViewportService = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("@theia/core/shared/inversify");
const vscode_languageserver_protocol_1 = require("@theia/core/shared/vscode-languageserver-protocol");
/**
 * this service is for managing the viewport and scroll state of a notebook editor.
 * its used both for restoring scroll state after reopening an editor and for cell to check if they are in the viewport.
 */
let NotebookViewportService = class NotebookViewportService {
    constructor() {
        this.onDidChangeViewportEmitter = new vscode_languageserver_protocol_1.Emitter();
        this.onDidChangeViewport = this.onDidChangeViewportEmitter.event;
    }
    set viewportElement(element) {
        var _a;
        this._viewportElement = element;
        if (element) {
            this.onDidChangeViewportEmitter.fire();
            (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
            this.resizeObserver = new ResizeObserver(() => this.onDidChangeViewportEmitter.fire());
            this.resizeObserver.observe(element);
        }
    }
    isElementInViewport(element) {
        if (this._viewportElement) {
            const rect = element.getBoundingClientRect();
            const viewRect = this._viewportElement.getBoundingClientRect();
            return rect.top < viewRect.top ? rect.bottom > viewRect.top : rect.top < viewRect.bottom;
        }
        return false;
    }
    onScroll(e) {
        this.onDidChangeViewportEmitter.fire();
    }
    dispose() {
        this.resizeObserver.disconnect();
    }
};
exports.NotebookViewportService = NotebookViewportService;
exports.NotebookViewportService = NotebookViewportService = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], NotebookViewportService);
//# sourceMappingURL=notebook-viewport-service.js.map