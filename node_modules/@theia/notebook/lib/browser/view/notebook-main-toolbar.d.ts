/// <reference types="react" />
import { CommandRegistry, DisposableCollection, MenuModelRegistry, MenuNode } from '@theia/core';
import * as React from '@theia/core/shared/react';
import { ContextMenuRenderer } from '@theia/core/lib/browser';
import { NotebookModel } from '../view-model/notebook-model';
import { NotebookKernelService } from '../service/notebook-kernel-service';
import { ContextKeyService } from '@theia/core/lib/browser/context-key-service';
import { NotebookContextManager } from '../service/notebook-context-manager';
export interface NotebookMainToolbarProps {
    notebookModel: NotebookModel;
    menuRegistry: MenuModelRegistry;
    notebookKernelService: NotebookKernelService;
    commandRegistry: CommandRegistry;
    contextKeyService: ContextKeyService;
    editorNode: HTMLElement;
    notebookContextManager: NotebookContextManager;
    contextMenuRenderer: ContextMenuRenderer;
}
export declare class NotebookMainToolbarRenderer {
    protected readonly notebookKernelService: NotebookKernelService;
    protected readonly commandRegistry: CommandRegistry;
    protected readonly menuRegistry: MenuModelRegistry;
    protected readonly contextKeyService: ContextKeyService;
    protected readonly notebookContextManager: NotebookContextManager;
    protected readonly contextMenuRenderer: ContextMenuRenderer;
    render(notebookModel: NotebookModel, editorNode: HTMLElement): React.ReactNode;
}
interface NotebookMainToolbarState {
    selectedKernelLabel?: string;
    numberOfHiddenItems: number;
}
export declare class NotebookMainToolbar extends React.Component<NotebookMainToolbarProps, NotebookMainToolbarState> {
    static readonly MIN_FREE_AREA = 10;
    protected toDispose: DisposableCollection;
    protected nativeSubmenus: string[];
    protected gapElement: HTMLDivElement | undefined;
    protected lastGapElementWidth: number;
    protected resizeObserver: ResizeObserver;
    constructor(props: NotebookMainToolbarProps);
    componentWillUnmount(): void;
    componentDidUpdate(): void;
    componentDidMount(): void;
    protected calculateItemsToHide(): void;
    protected renderContextMenu(event: MouseEvent, menuItems: readonly MenuNode[]): void;
    render(): React.ReactNode;
    protected gapElementChanged(element: HTMLDivElement | null): void;
    protected renderMenuItem(item: MenuNode, submenu?: string): React.ReactNode;
    protected getMenuItems(): readonly MenuNode[];
    protected getAdditionalClasses(item: MenuNode): string;
    protected getAllContextKeys(menus: readonly MenuNode[], keySet: Set<string>): void;
    protected calculateNumberOfHiddenItems(allMenuItems: readonly MenuNode[]): number;
}
export {};
//# sourceMappingURL=notebook-main-toolbar.d.ts.map