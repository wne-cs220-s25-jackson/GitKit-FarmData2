/// <reference types="react" />
import * as React from '@theia/core/shared/react';
import { MonacoEditorServices } from '@theia/monaco/lib/browser/monaco-editor';
import { NotebookRendererRegistry } from '../notebook-renderer-registry';
import { NotebookCellModel } from '../view-model/notebook-cell-model';
import { NotebookModel } from '../view-model/notebook-model';
import { CellRenderer } from './notebook-cell-list-view';
import { NotebookCellToolbarFactory } from './notebook-cell-toolbar-factory';
import { CellExecution, NotebookExecutionStateService } from '../service/notebook-execution-state-service';
import { CommandRegistry, DisposableCollection } from '@theia/core';
import { NotebookContextManager } from '../service/notebook-context-manager';
import { NotebookViewportService } from './notebook-viewport-service';
import { EditorPreferences } from '@theia/editor/lib/browser';
import { NotebookOptionsService } from '../service/notebook-options';
import { MarkdownRenderer } from '@theia/core/lib/browser/markdown-rendering/markdown-renderer';
import { NotebookCellEditorService } from '../service/notebook-cell-editor-service';
import { CellOutputWebview } from '../renderers/cell-output-webview';
import { NotebookCellStatusBarItem, NotebookCellStatusBarItemList, NotebookCellStatusBarService } from '../service/notebook-cell-status-bar-service';
import { LabelParser } from '@theia/core/lib/browser/label-parser';
export declare class NotebookCodeCellRenderer implements CellRenderer {
    protected readonly monacoServices: MonacoEditorServices;
    protected readonly notebookRendererRegistry: NotebookRendererRegistry;
    protected readonly notebookCellToolbarFactory: NotebookCellToolbarFactory;
    protected readonly executionStateService: NotebookExecutionStateService;
    protected readonly notebookContextManager: NotebookContextManager;
    protected readonly notebookViewportService: NotebookViewportService;
    protected readonly editorPreferences: EditorPreferences;
    protected readonly notebookCellEditorService: NotebookCellEditorService;
    protected readonly commandRegistry: CommandRegistry;
    protected readonly notebookOptionsService: NotebookOptionsService;
    protected readonly markdownRenderer: MarkdownRenderer;
    protected readonly outputWebview: CellOutputWebview;
    protected readonly notebookCellStatusBarService: NotebookCellStatusBarService;
    protected readonly labelParser: LabelParser;
    render(notebookModel: NotebookModel, cell: NotebookCellModel, handle: number): React.ReactNode;
    renderSidebar(notebookModel: NotebookModel, cell: NotebookCellModel): React.ReactNode;
    renderDragImage(cell: NotebookCellModel): HTMLElement;
    protected getMarkdownCodeSequence(input: string): string;
}
export interface NotebookCodeCellSidebarProps {
    cell: NotebookCellModel;
    notebook: NotebookModel;
    notebookCellToolbarFactory: NotebookCellToolbarFactory;
}
export declare class NotebookCodeCellSidebar extends React.Component<NotebookCodeCellSidebarProps> {
    protected toDispose: DisposableCollection;
    constructor(props: NotebookCodeCellSidebarProps);
    componentWillUnmount(): void;
    render(): React.ReactNode;
}
export interface NotebookCodeCellStatusProps {
    notebook: NotebookModel;
    cell: NotebookCellModel;
    commandRegistry: CommandRegistry;
    cellStatusBarService: NotebookCellStatusBarService;
    executionStateService?: NotebookExecutionStateService;
    labelParser: LabelParser;
    onClick: () => void;
}
export interface NotebookCodeCellStatusState {
    currentExecution?: CellExecution;
    executionTime: number;
}
export declare class NotebookCodeCellStatus extends React.Component<NotebookCodeCellStatusProps, NotebookCodeCellStatusState> {
    protected toDispose: DisposableCollection;
    protected statusBarItems: NotebookCellStatusBarItemList[];
    constructor(props: NotebookCodeCellStatusProps);
    updateStatusBarItems(): Promise<void>;
    componentWillUnmount(): void;
    render(): React.ReactNode;
    protected renderExecutionState(): React.ReactNode;
    protected getExecutionTime(): number;
    protected renderTime(ms: number): string;
    protected renderStatusBarItems(): React.ReactNode;
    protected renderStatusBarItem(item: NotebookCellStatusBarItem, key: string): React.ReactNode;
}
interface NotebookCellOutputProps {
    cell: NotebookCellModel;
    notebook: NotebookModel;
    outputWebview: CellOutputWebview;
    renderSidebar: () => React.ReactNode;
}
export declare class NotebookCodeCellOutputs extends React.Component<NotebookCellOutputProps> {
    protected toDispose: DisposableCollection;
    protected outputHeight: number;
    componentDidMount(): Promise<void>;
    componentWillUnmount(): void;
    render(): React.ReactNode;
}
export {};
//# sourceMappingURL=notebook-code-cell-view.d.ts.map