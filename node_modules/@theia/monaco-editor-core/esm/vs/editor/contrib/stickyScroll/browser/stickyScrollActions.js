"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectEditor = exports.GoToStickyScrollLine = exports.SelectPreviousStickyScrollLine = exports.SelectNextStickyScrollLine = exports.FocusStickyScroll = exports.ToggleStickyScroll = void 0;
const editorExtensions_js_1 = require("../../../browser/editorExtensions.js");
const nls_js_1 = require("../../../../nls.js");
const actionCommonCategories_js_1 = require("../../../../platform/action/common/actionCommonCategories.js");
const actions_js_1 = require("../../../../platform/actions/common/actions.js");
const configuration_js_1 = require("../../../../platform/configuration/common/configuration.js");
const contextkey_js_1 = require("../../../../platform/contextkey/common/contextkey.js");
const editorContextKeys_js_1 = require("../../../common/editorContextKeys.js");
const stickyScrollController_js_1 = require("./stickyScrollController.js");
class ToggleStickyScroll extends actions_js_1.Action2 {
    constructor() {
        super({
            id: 'editor.action.toggleStickyScroll',
            title: {
                ...(0, nls_js_1.localize2)('toggleEditorStickyScroll', "Toggle Editor Sticky Scroll"),
                mnemonicTitle: (0, nls_js_1.localize)({ key: 'mitoggleStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Toggle Editor Sticky Scroll"),
            },
            metadata: {
                description: (0, nls_js_1.localize2)('toggleEditorStickyScroll.description', "Toggle/enable the editor sticky scroll which shows the nested scopes at the top of the viewport"),
            },
            category: actionCommonCategories_js_1.Categories.View,
            toggled: {
                condition: contextkey_js_1.ContextKeyExpr.equals('config.editor.stickyScroll.enabled', true),
                title: (0, nls_js_1.localize)('stickyScroll', "Sticky Scroll"),
                mnemonicTitle: (0, nls_js_1.localize)({ key: 'miStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Sticky Scroll"),
            },
            menu: [
                { id: actions_js_1.MenuId.CommandPalette },
                { id: actions_js_1.MenuId.MenubarAppearanceMenu, group: '4_editor', order: 3 },
                { id: actions_js_1.MenuId.StickyScrollContext }
            ]
        });
    }
    async run(accessor) {
        const configurationService = accessor.get(configuration_js_1.IConfigurationService);
        const newValue = !configurationService.getValue('editor.stickyScroll.enabled');
        return configurationService.updateValue('editor.stickyScroll.enabled', newValue);
    }
}
exports.ToggleStickyScroll = ToggleStickyScroll;
const weight = 100 /* KeybindingWeight.EditorContrib */;
class FocusStickyScroll extends editorExtensions_js_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.focusStickyScroll',
            title: {
                ...(0, nls_js_1.localize2)('focusStickyScroll', "Focus on the editor sticky scroll"),
                mnemonicTitle: (0, nls_js_1.localize)({ key: 'mifocusStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Focus Sticky Scroll"),
            },
            precondition: contextkey_js_1.ContextKeyExpr.and(contextkey_js_1.ContextKeyExpr.has('config.editor.stickyScroll.enabled'), editorContextKeys_js_1.EditorContextKeys.stickyScrollVisible),
            menu: [
                { id: actions_js_1.MenuId.CommandPalette },
            ]
        });
    }
    runEditorCommand(_accessor, editor) {
        stickyScrollController_js_1.StickyScrollController.get(editor)?.focus();
    }
}
exports.FocusStickyScroll = FocusStickyScroll;
class SelectNextStickyScrollLine extends editorExtensions_js_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.selectNextStickyScrollLine',
            title: (0, nls_js_1.localize2)('selectNextStickyScrollLine.title', "Select the next editor sticky scroll line"),
            precondition: editorContextKeys_js_1.EditorContextKeys.stickyScrollFocused.isEqualTo(true),
            keybinding: {
                weight,
                primary: 18 /* KeyCode.DownArrow */
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        stickyScrollController_js_1.StickyScrollController.get(editor)?.focusNext();
    }
}
exports.SelectNextStickyScrollLine = SelectNextStickyScrollLine;
class SelectPreviousStickyScrollLine extends editorExtensions_js_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.selectPreviousStickyScrollLine',
            title: (0, nls_js_1.localize2)('selectPreviousStickyScrollLine.title', "Select the previous sticky scroll line"),
            precondition: editorContextKeys_js_1.EditorContextKeys.stickyScrollFocused.isEqualTo(true),
            keybinding: {
                weight,
                primary: 16 /* KeyCode.UpArrow */
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        stickyScrollController_js_1.StickyScrollController.get(editor)?.focusPrevious();
    }
}
exports.SelectPreviousStickyScrollLine = SelectPreviousStickyScrollLine;
class GoToStickyScrollLine extends editorExtensions_js_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.goToFocusedStickyScrollLine',
            title: (0, nls_js_1.localize2)('goToFocusedStickyScrollLine.title', "Go to the focused sticky scroll line"),
            precondition: editorContextKeys_js_1.EditorContextKeys.stickyScrollFocused.isEqualTo(true),
            keybinding: {
                weight,
                primary: 3 /* KeyCode.Enter */
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        stickyScrollController_js_1.StickyScrollController.get(editor)?.goToFocused();
    }
}
exports.GoToStickyScrollLine = GoToStickyScrollLine;
class SelectEditor extends editorExtensions_js_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.selectEditor',
            title: (0, nls_js_1.localize2)('selectEditor.title', "Select Editor"),
            precondition: editorContextKeys_js_1.EditorContextKeys.stickyScrollFocused.isEqualTo(true),
            keybinding: {
                weight,
                primary: 9 /* KeyCode.Escape */
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        stickyScrollController_js_1.StickyScrollController.get(editor)?.selectEditor();
    }
}
exports.SelectEditor = SelectEditor;
//# sourceMappingURL=stickyScrollActions.js.map