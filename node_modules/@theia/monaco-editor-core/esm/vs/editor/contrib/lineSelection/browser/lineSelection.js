"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpandLineSelectionAction = void 0;
const editorExtensions_js_1 = require("../../../browser/editorExtensions.js");
const cursorMoveCommands_js_1 = require("../../../common/cursor/cursorMoveCommands.js");
const editorContextKeys_js_1 = require("../../../common/editorContextKeys.js");
const nls = require("../../../../nls.js");
class ExpandLineSelectionAction extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: 'expandLineSelection',
            label: nls.localize2('expandLineSelection', "Expand Line Selection"),
            precondition: undefined,
            kbOpts: {
                weight: 0 /* KeybindingWeight.EditorCore */,
                kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                primary: 2048 /* KeyMod.CtrlCmd */ | 42 /* KeyCode.KeyL */
            },
        });
    }
    run(_accessor, editor, args) {
        args = args || {};
        if (!editor.hasModel()) {
            return;
        }
        const viewModel = editor._getViewModel();
        viewModel.model.pushStackElement();
        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, cursorMoveCommands_js_1.CursorMoveCommands.expandLineSelection(viewModel, viewModel.getCursorStates()));
        viewModel.revealAllCursors(args.source, true);
    }
}
exports.ExpandLineSelectionAction = ExpandLineSelectionAction;
(0, editorExtensions_js_1.registerEditorAction)(ExpandLineSelectionAction);
//# sourceMappingURL=lineSelection.js.map