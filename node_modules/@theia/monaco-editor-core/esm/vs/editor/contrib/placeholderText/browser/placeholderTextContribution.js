"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaceholderTextContribution = void 0;
const dom_js_1 = require("../../../../base/browser/dom.js");
const equals_js_1 = require("../../../../base/common/equals.js");
const lifecycle_js_1 = require("../../../../base/common/lifecycle.js");
const observable_js_1 = require("../../../../base/common/observable.js");
const observableCodeEditor_js_1 = require("../../../browser/observableCodeEditor.js");
/**
 * Use the editor option to set the placeholder text.
*/
class PlaceholderTextContribution extends lifecycle_js_1.Disposable {
    static get(editor) {
        return editor.getContribution(PlaceholderTextContribution.ID);
    }
    static { this.ID = 'editor.contrib.placeholderText'; }
    constructor(_editor) {
        super();
        this._editor = _editor;
        this._editorObs = (0, observableCodeEditor_js_1.observableCodeEditor)(this._editor);
        this._placeholderText = this._editorObs.getOption(92 /* EditorOption.placeholder */);
        this._state = (0, observable_js_1.derivedOpts)({ owner: this, equalsFn: equals_js_1.structuralEquals }, reader => {
            const p = this._placeholderText.read(reader);
            if (!p) {
                return undefined;
            }
            if (!this._editorObs.valueIsEmpty.read(reader)) {
                return undefined;
            }
            return { placeholder: p };
        });
        this._shouldViewBeAlive = isOrWasTrue(this, reader => this._state.read(reader)?.placeholder !== undefined);
        this._view = (0, observable_js_1.derivedWithStore)((reader, store) => {
            if (!this._shouldViewBeAlive.read(reader)) {
                return;
            }
            const element = (0, dom_js_1.h)('div.editorPlaceholder');
            store.add((0, observable_js_1.autorun)(reader => {
                const data = this._state.read(reader);
                const shouldBeVisibile = data?.placeholder !== undefined;
                element.root.style.display = shouldBeVisibile ? 'block' : 'none';
                element.root.innerText = data?.placeholder ?? '';
            }));
            store.add((0, observable_js_1.autorun)(reader => {
                const info = this._editorObs.layoutInfo.read(reader);
                element.root.style.left = `${info.contentLeft}px`;
                element.root.style.width = (info.contentWidth - info.verticalScrollbarWidth) + 'px';
                element.root.style.top = `${this._editor.getTopForLineNumber(0)}px`;
            }));
            store.add((0, observable_js_1.autorun)(reader => {
                element.root.style.fontFamily = this._editorObs.getOption(51 /* EditorOption.fontFamily */).read(reader);
                element.root.style.fontSize = this._editorObs.getOption(54 /* EditorOption.fontSize */).read(reader) + 'px';
                element.root.style.lineHeight = this._editorObs.getOption(68 /* EditorOption.lineHeight */).read(reader) + 'px';
            }));
            store.add(this._editorObs.createOverlayWidget({
                allowEditorOverflow: false,
                minContentWidthInPx: (0, observable_js_1.constObservable)(0),
                position: (0, observable_js_1.constObservable)(null),
                domNode: element.root,
            }));
        });
        this._view.recomputeInitiallyAndOnChange(this._store);
    }
}
exports.PlaceholderTextContribution = PlaceholderTextContribution;
function isOrWasTrue(owner, fn) {
    return (0, observable_js_1.derivedObservableWithCache)(owner, (reader, lastValue) => {
        if (lastValue === true) {
            return true;
        }
        return fn(reader);
    });
}
//# sourceMappingURL=placeholderTextContribution.js.map