"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ViewportSemanticTokensContribution_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewportSemanticTokensContribution = void 0;
const async_js_1 = require("../../../../base/common/async.js");
const lifecycle_js_1 = require("../../../../base/common/lifecycle.js");
const editorExtensions_js_1 = require("../../../browser/editorExtensions.js");
const getSemanticTokens_js_1 = require("../common/getSemanticTokens.js");
const semanticTokensConfig_js_1 = require("../common/semanticTokensConfig.js");
const semanticTokensProviderStyling_js_1 = require("../../../common/services/semanticTokensProviderStyling.js");
const configuration_js_1 = require("../../../../platform/configuration/common/configuration.js");
const themeService_js_1 = require("../../../../platform/theme/common/themeService.js");
const languageFeatureDebounce_js_1 = require("../../../common/services/languageFeatureDebounce.js");
const stopwatch_js_1 = require("../../../../base/common/stopwatch.js");
const languageFeatures_js_1 = require("../../../common/services/languageFeatures.js");
const semanticTokensStyling_js_1 = require("../../../common/services/semanticTokensStyling.js");
let ViewportSemanticTokensContribution = class ViewportSemanticTokensContribution extends lifecycle_js_1.Disposable {
    static { ViewportSemanticTokensContribution_1 = this; }
    static { this.ID = 'editor.contrib.viewportSemanticTokens'; }
    static get(editor) {
        return editor.getContribution(ViewportSemanticTokensContribution_1.ID);
    }
    constructor(editor, _semanticTokensStylingService, _themeService, _configurationService, languageFeatureDebounceService, languageFeaturesService) {
        super();
        this._semanticTokensStylingService = _semanticTokensStylingService;
        this._themeService = _themeService;
        this._configurationService = _configurationService;
        this._editor = editor;
        this._provider = languageFeaturesService.documentRangeSemanticTokensProvider;
        this._debounceInformation = languageFeatureDebounceService.for(this._provider, 'DocumentRangeSemanticTokens', { min: 100, max: 500 });
        this._tokenizeViewport = this._register(new async_js_1.RunOnceScheduler(() => this._tokenizeViewportNow(), 100));
        this._outstandingRequests = [];
        const scheduleTokenizeViewport = () => {
            if (this._editor.hasModel()) {
                this._tokenizeViewport.schedule(this._debounceInformation.get(this._editor.getModel()));
            }
        };
        this._register(this._editor.onDidScrollChange(() => {
            scheduleTokenizeViewport();
        }));
        this._register(this._editor.onDidChangeModel(() => {
            this._cancelAll();
            scheduleTokenizeViewport();
        }));
        this._register(this._editor.onDidChangeModelContent((e) => {
            this._cancelAll();
            scheduleTokenizeViewport();
        }));
        this._register(this._provider.onDidChange(() => {
            this._cancelAll();
            scheduleTokenizeViewport();
        }));
        this._register(this._configurationService.onDidChangeConfiguration(e => {
            if (e.affectsConfiguration(semanticTokensConfig_js_1.SEMANTIC_HIGHLIGHTING_SETTING_ID)) {
                this._cancelAll();
                scheduleTokenizeViewport();
            }
        }));
        this._register(this._themeService.onDidColorThemeChange(() => {
            this._cancelAll();
            scheduleTokenizeViewport();
        }));
        scheduleTokenizeViewport();
    }
    _cancelAll() {
        for (const request of this._outstandingRequests) {
            request.cancel();
        }
        this._outstandingRequests = [];
    }
    _removeOutstandingRequest(req) {
        for (let i = 0, len = this._outstandingRequests.length; i < len; i++) {
            if (this._outstandingRequests[i] === req) {
                this._outstandingRequests.splice(i, 1);
                return;
            }
        }
    }
    _tokenizeViewportNow() {
        if (!this._editor.hasModel()) {
            return;
        }
        const model = this._editor.getModel();
        if (model.tokenization.hasCompleteSemanticTokens()) {
            return;
        }
        if (!(0, semanticTokensConfig_js_1.isSemanticColoringEnabled)(model, this._themeService, this._configurationService)) {
            if (model.tokenization.hasSomeSemanticTokens()) {
                model.tokenization.setSemanticTokens(null, false);
            }
            return;
        }
        if (!(0, getSemanticTokens_js_1.hasDocumentRangeSemanticTokensProvider)(this._provider, model)) {
            if (model.tokenization.hasSomeSemanticTokens()) {
                model.tokenization.setSemanticTokens(null, false);
            }
            return;
        }
        const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();
        this._outstandingRequests = this._outstandingRequests.concat(visibleRanges.map(range => this._requestRange(model, range)));
    }
    _requestRange(model, range) {
        const requestVersionId = model.getVersionId();
        const request = (0, async_js_1.createCancelablePromise)(token => Promise.resolve((0, getSemanticTokens_js_1.getDocumentRangeSemanticTokens)(this._provider, model, range, token)));
        const sw = new stopwatch_js_1.StopWatch(false);
        request.then((r) => {
            this._debounceInformation.update(model, sw.elapsed());
            if (!r || !r.tokens || model.isDisposed() || model.getVersionId() !== requestVersionId) {
                return;
            }
            const { provider, tokens: result } = r;
            const styling = this._semanticTokensStylingService.getStyling(provider);
            model.tokenization.setPartialSemanticTokens(range, (0, semanticTokensProviderStyling_js_1.toMultilineTokens2)(result, styling, model.getLanguageId()));
        }).then(() => this._removeOutstandingRequest(request), () => this._removeOutstandingRequest(request));
        return request;
    }
};
exports.ViewportSemanticTokensContribution = ViewportSemanticTokensContribution;
exports.ViewportSemanticTokensContribution = ViewportSemanticTokensContribution = ViewportSemanticTokensContribution_1 = __decorate([
    __param(1, semanticTokensStyling_js_1.ISemanticTokensStylingService),
    __param(2, themeService_js_1.IThemeService),
    __param(3, configuration_js_1.IConfigurationService),
    __param(4, languageFeatureDebounce_js_1.ILanguageFeatureDebounceService),
    __param(5, languageFeatures_js_1.ILanguageFeaturesService)
], ViewportSemanticTokensContribution);
(0, editorExtensions_js_1.registerEditorContribution)(ViewportSemanticTokensContribution.ID, ViewportSemanticTokensContribution, 1 /* EditorContributionInstantiation.AfterFirstRender */);
//# sourceMappingURL=viewportSemanticTokens.js.map