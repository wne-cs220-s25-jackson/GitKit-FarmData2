"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.showGoToContextMenu = showGoToContextMenu;
exports.goToDefinitionWithLocation = goToDefinitionWithLocation;
const dom = require("../../../../base/browser/dom.js");
const actions_js_1 = require("../../../../base/common/actions.js");
const cancellation_js_1 = require("../../../../base/common/cancellation.js");
const uuid_js_1 = require("../../../../base/common/uuid.js");
const range_js_1 = require("../../../common/core/range.js");
const resolverService_js_1 = require("../../../common/services/resolverService.js");
const goToCommands_js_1 = require("../../gotoSymbol/browser/goToCommands.js");
const peekView_js_1 = require("../../peekView/browser/peekView.js");
const actions_js_2 = require("../../../../platform/actions/common/actions.js");
const commands_js_1 = require("../../../../platform/commands/common/commands.js");
const contextkey_js_1 = require("../../../../platform/contextkey/common/contextkey.js");
const contextView_js_1 = require("../../../../platform/contextview/browser/contextView.js");
const instantiation_js_1 = require("../../../../platform/instantiation/common/instantiation.js");
const notification_js_1 = require("../../../../platform/notification/common/notification.js");
async function showGoToContextMenu(accessor, editor, anchor, part) {
    const resolverService = accessor.get(resolverService_js_1.ITextModelService);
    const contextMenuService = accessor.get(contextView_js_1.IContextMenuService);
    const commandService = accessor.get(commands_js_1.ICommandService);
    const instaService = accessor.get(instantiation_js_1.IInstantiationService);
    const notificationService = accessor.get(notification_js_1.INotificationService);
    await part.item.resolve(cancellation_js_1.CancellationToken.None);
    if (!part.part.location) {
        return;
    }
    const location = part.part.location;
    const menuActions = [];
    // from all registered (not active) context menu actions select those
    // that are a symbol navigation actions
    const filter = new Set(actions_js_2.MenuRegistry.getMenuItems(actions_js_2.MenuId.EditorContext)
        .map(item => (0, actions_js_2.isIMenuItem)(item) ? item.command.id : (0, uuid_js_1.generateUuid)()));
    for (const delegate of goToCommands_js_1.SymbolNavigationAction.all()) {
        if (filter.has(delegate.desc.id)) {
            menuActions.push(new actions_js_1.Action(delegate.desc.id, actions_js_2.MenuItemAction.label(delegate.desc, { renderShortTitle: true }), undefined, true, async () => {
                const ref = await resolverService.createModelReference(location.uri);
                try {
                    const symbolAnchor = new goToCommands_js_1.SymbolNavigationAnchor(ref.object.textEditorModel, range_js_1.Range.getStartPosition(location.range));
                    const range = part.item.anchor.range;
                    await instaService.invokeFunction(delegate.runEditorCommand.bind(delegate), editor, symbolAnchor, range);
                }
                finally {
                    ref.dispose();
                }
            }));
        }
    }
    if (part.part.command) {
        const { command } = part.part;
        menuActions.push(new actions_js_1.Separator());
        menuActions.push(new actions_js_1.Action(command.id, command.title, undefined, true, async () => {
            try {
                await commandService.executeCommand(command.id, ...(command.arguments ?? []));
            }
            catch (err) {
                notificationService.notify({
                    severity: notification_js_1.Severity.Error,
                    source: part.item.provider.displayName,
                    message: err
                });
            }
        }));
    }
    // show context menu
    const useShadowDOM = editor.getOption(132 /* EditorOption.useShadowDOM */);
    contextMenuService.showContextMenu({
        domForShadowRoot: useShadowDOM ? editor.getDomNode() ?? undefined : undefined,
        getAnchor: () => {
            const box = dom.getDomNodePagePosition(anchor);
            return { x: box.left, y: box.top + box.height + 8 };
        },
        getActions: () => menuActions,
        onHide: () => {
            editor.focus();
        },
        autoSelectFirstItem: true,
    });
}
async function goToDefinitionWithLocation(accessor, event, editor, location) {
    const resolverService = accessor.get(resolverService_js_1.ITextModelService);
    const ref = await resolverService.createModelReference(location.uri);
    await editor.invokeWithinContext(async (accessor) => {
        const openToSide = event.hasSideBySideModifier;
        const contextKeyService = accessor.get(contextkey_js_1.IContextKeyService);
        const isInPeek = peekView_js_1.PeekContext.inPeekEditor.getValue(contextKeyService);
        const canPeek = !openToSide && editor.getOption(93 /* EditorOption.definitionLinkOpensInPeek */) && !isInPeek;
        const action = new goToCommands_js_1.DefinitionAction({ openToSide, openInPeek: canPeek, muteMessage: true }, { title: { value: '', original: '' }, id: '', precondition: undefined });
        return action.run(accessor, new goToCommands_js_1.SymbolNavigationAnchor(ref.object.textEditorModel, range_js_1.Range.getStartPosition(location.range)), range_js_1.Range.lift(location.range));
    });
    ref.dispose();
}
//# sourceMappingURL=inlayHintsLocations.js.map