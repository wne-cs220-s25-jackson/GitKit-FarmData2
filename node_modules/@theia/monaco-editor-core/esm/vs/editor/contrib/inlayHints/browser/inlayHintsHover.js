"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlayHintsHover = void 0;
const async_js_1 = require("../../../../base/common/async.js");
const htmlContent_js_1 = require("../../../../base/common/htmlContent.js");
const position_js_1 = require("../../../common/core/position.js");
const textModel_js_1 = require("../../../common/model/textModel.js");
const hoverTypes_js_1 = require("../../hover/browser/hoverTypes.js");
const language_js_1 = require("../../../common/languages/language.js");
const resolverService_js_1 = require("../../../common/services/resolverService.js");
const getHover_js_1 = require("../../hover/browser/getHover.js");
const markdownHoverParticipant_js_1 = require("../../hover/browser/markdownHoverParticipant.js");
const inlayHintsController_js_1 = require("./inlayHintsController.js");
const configuration_js_1 = require("../../../../platform/configuration/common/configuration.js");
const opener_js_1 = require("../../../../platform/opener/common/opener.js");
const languageFeatures_js_1 = require("../../../common/services/languageFeatures.js");
const nls_js_1 = require("../../../../nls.js");
const platform = require("../../../../base/common/platform.js");
const inlayHints_js_1 = require("./inlayHints.js");
const arrays_js_1 = require("../../../../base/common/arrays.js");
const keybinding_js_1 = require("../../../../platform/keybinding/common/keybinding.js");
const hover_js_1 = require("../../../../platform/hover/browser/hover.js");
const commands_js_1 = require("../../../../platform/commands/common/commands.js");
class InlayHintsHoverAnchor extends hoverTypes_js_1.HoverForeignElementAnchor {
    constructor(part, owner, initialMousePosX, initialMousePosY) {
        super(10, owner, part.item.anchor.range, initialMousePosX, initialMousePosY, true);
        this.part = part;
    }
}
let InlayHintsHover = class InlayHintsHover extends markdownHoverParticipant_js_1.MarkdownHoverParticipant {
    constructor(editor, languageService, openerService, keybindingService, hoverService, configurationService, _resolverService, languageFeaturesService, commandService) {
        super(editor, languageService, openerService, configurationService, languageFeaturesService, keybindingService, hoverService, commandService);
        this._resolverService = _resolverService;
        this.hoverOrdinal = 6;
    }
    suggestHoverAnchor(mouseEvent) {
        const controller = inlayHintsController_js_1.InlayHintsController.get(this._editor);
        if (!controller) {
            return null;
        }
        if (mouseEvent.target.type !== 6 /* MouseTargetType.CONTENT_TEXT */) {
            return null;
        }
        const options = mouseEvent.target.detail.injectedText?.options;
        if (!(options instanceof textModel_js_1.ModelDecorationInjectedTextOptions && options.attachedData instanceof inlayHintsController_js_1.RenderedInlayHintLabelPart)) {
            return null;
        }
        return new InlayHintsHoverAnchor(options.attachedData, this, mouseEvent.event.posx, mouseEvent.event.posy);
    }
    computeSync() {
        return [];
    }
    computeAsync(anchor, _lineDecorations, source, token) {
        if (!(anchor instanceof InlayHintsHoverAnchor)) {
            return async_js_1.AsyncIterableObject.EMPTY;
        }
        return new async_js_1.AsyncIterableObject(async (executor) => {
            const { part } = anchor;
            await part.item.resolve(token);
            if (token.isCancellationRequested) {
                return;
            }
            // (1) Inlay Tooltip
            let itemTooltip;
            if (typeof part.item.hint.tooltip === 'string') {
                itemTooltip = new htmlContent_js_1.MarkdownString().appendText(part.item.hint.tooltip);
            }
            else if (part.item.hint.tooltip) {
                itemTooltip = part.item.hint.tooltip;
            }
            if (itemTooltip) {
                executor.emitOne(new markdownHoverParticipant_js_1.MarkdownHover(this, anchor.range, [itemTooltip], false, 0));
            }
            // (1.2) Inlay dbl-click gesture
            if ((0, arrays_js_1.isNonEmptyArray)(part.item.hint.textEdits)) {
                executor.emitOne(new markdownHoverParticipant_js_1.MarkdownHover(this, anchor.range, [new htmlContent_js_1.MarkdownString().appendText((0, nls_js_1.localize)('hint.dbl', "Double-click to insert"))], false, 10001));
            }
            // (2) Inlay Label Part Tooltip
            let partTooltip;
            if (typeof part.part.tooltip === 'string') {
                partTooltip = new htmlContent_js_1.MarkdownString().appendText(part.part.tooltip);
            }
            else if (part.part.tooltip) {
                partTooltip = part.part.tooltip;
            }
            if (partTooltip) {
                executor.emitOne(new markdownHoverParticipant_js_1.MarkdownHover(this, anchor.range, [partTooltip], false, 1));
            }
            // (2.2) Inlay Label Part Help Hover
            if (part.part.location || part.part.command) {
                let linkHint;
                const useMetaKey = this._editor.getOption(79 /* EditorOption.multiCursorModifier */) === 'altKey';
                const kb = useMetaKey
                    ? platform.isMacintosh
                        ? (0, nls_js_1.localize)('links.navigate.kb.meta.mac', "cmd + click")
                        : (0, nls_js_1.localize)('links.navigate.kb.meta', "ctrl + click")
                    : platform.isMacintosh
                        ? (0, nls_js_1.localize)('links.navigate.kb.alt.mac', "option + click")
                        : (0, nls_js_1.localize)('links.navigate.kb.alt', "alt + click");
                if (part.part.location && part.part.command) {
                    linkHint = new htmlContent_js_1.MarkdownString().appendText((0, nls_js_1.localize)('hint.defAndCommand', 'Go to Definition ({0}), right click for more', kb));
                }
                else if (part.part.location) {
                    linkHint = new htmlContent_js_1.MarkdownString().appendText((0, nls_js_1.localize)('hint.def', 'Go to Definition ({0})', kb));
                }
                else if (part.part.command) {
                    linkHint = new htmlContent_js_1.MarkdownString(`[${(0, nls_js_1.localize)('hint.cmd', "Execute Command")}](${(0, inlayHints_js_1.asCommandLink)(part.part.command)} "${part.part.command.title}") (${kb})`, { isTrusted: true });
                }
                if (linkHint) {
                    executor.emitOne(new markdownHoverParticipant_js_1.MarkdownHover(this, anchor.range, [linkHint], false, 10000));
                }
            }
            // (3) Inlay Label Part Location tooltip
            const iterable = await this._resolveInlayHintLabelPartHover(part, token);
            for await (const item of iterable) {
                executor.emitOne(item);
            }
        });
    }
    async _resolveInlayHintLabelPartHover(part, token) {
        if (!part.part.location) {
            return async_js_1.AsyncIterableObject.EMPTY;
        }
        const { uri, range } = part.part.location;
        const ref = await this._resolverService.createModelReference(uri);
        try {
            const model = ref.object.textEditorModel;
            if (!this._languageFeaturesService.hoverProvider.has(model)) {
                return async_js_1.AsyncIterableObject.EMPTY;
            }
            return (0, getHover_js_1.getHoverProviderResultsAsAsyncIterable)(this._languageFeaturesService.hoverProvider, model, new position_js_1.Position(range.startLineNumber, range.startColumn), token)
                .filter(item => !(0, htmlContent_js_1.isEmptyMarkdownString)(item.hover.contents))
                .map(item => new markdownHoverParticipant_js_1.MarkdownHover(this, part.item.anchor.range, item.hover.contents, false, 2 + item.ordinal));
        }
        finally {
            ref.dispose();
        }
    }
};
exports.InlayHintsHover = InlayHintsHover;
exports.InlayHintsHover = InlayHintsHover = __decorate([
    __param(1, language_js_1.ILanguageService),
    __param(2, opener_js_1.IOpenerService),
    __param(3, keybinding_js_1.IKeybindingService),
    __param(4, hover_js_1.IHoverService),
    __param(5, configuration_js_1.IConfigurationService),
    __param(6, resolverService_js_1.ITextModelService),
    __param(7, languageFeatures_js_1.ILanguageFeaturesService),
    __param(8, commands_js_1.ICommandService)
], InlayHintsHover);
//# sourceMappingURL=inlayHintsHover.js.map