"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const editorExtensions_js_1 = require("../../../browser/editorExtensions.js");
const replaceCommand_js_1 = require("../../../common/commands/replaceCommand.js");
const cursorMoveOperations_js_1 = require("../../../common/cursor/cursorMoveOperations.js");
const range_js_1 = require("../../../common/core/range.js");
const editorContextKeys_js_1 = require("../../../common/editorContextKeys.js");
const nls = require("../../../../nls.js");
class TransposeLettersAction extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.transposeLetters',
            label: nls.localize2('transposeLetters.label', "Transpose Letters"),
            precondition: editorContextKeys_js_1.EditorContextKeys.writable,
            kbOpts: {
                kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                primary: 0,
                mac: {
                    primary: 256 /* KeyMod.WinCtrl */ | 50 /* KeyCode.KeyT */
                },
                weight: 100 /* KeybindingWeight.EditorContrib */
            }
        });
    }
    run(accessor, editor) {
        if (!editor.hasModel()) {
            return;
        }
        const model = editor.getModel();
        const commands = [];
        const selections = editor.getSelections();
        for (const selection of selections) {
            if (!selection.isEmpty()) {
                continue;
            }
            const lineNumber = selection.startLineNumber;
            const column = selection.startColumn;
            const lastColumn = model.getLineMaxColumn(lineNumber);
            if (lineNumber === 1 && (column === 1 || (column === 2 && lastColumn === 2))) {
                // at beginning of file, nothing to do
                continue;
            }
            // handle special case: when at end of line, transpose left two chars
            // otherwise, transpose left and right chars
            const endPosition = (column === lastColumn) ?
                selection.getPosition() :
                cursorMoveOperations_js_1.MoveOperations.rightPosition(model, selection.getPosition().lineNumber, selection.getPosition().column);
            const middlePosition = cursorMoveOperations_js_1.MoveOperations.leftPosition(model, endPosition);
            const beginPosition = cursorMoveOperations_js_1.MoveOperations.leftPosition(model, middlePosition);
            const leftChar = model.getValueInRange(range_js_1.Range.fromPositions(beginPosition, middlePosition));
            const rightChar = model.getValueInRange(range_js_1.Range.fromPositions(middlePosition, endPosition));
            const replaceRange = range_js_1.Range.fromPositions(beginPosition, endPosition);
            commands.push(new replaceCommand_js_1.ReplaceCommand(replaceRange, rightChar + leftChar));
        }
        if (commands.length > 0) {
            editor.pushUndoStop();
            editor.executeCommands(this.id, commands);
            editor.pushUndoStop();
        }
    }
}
(0, editorExtensions_js_1.registerEditorAction)(TransposeLettersAction);
//# sourceMappingURL=transpose.js.map