"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.pasteAsCommandId = void 0;
const hierarchicalKind_js_1 = require("../../../../base/common/hierarchicalKind.js");
const nls = require("../../../../nls.js");
const editorExtensions_js_1 = require("../../../browser/editorExtensions.js");
const editorContextKeys_js_1 = require("../../../common/editorContextKeys.js");
const editorFeatures_js_1 = require("../../../common/editorFeatures.js");
const copyPasteController_js_1 = require("./copyPasteController.js");
const defaultProviders_js_1 = require("./defaultProviders.js");
exports.pasteAsCommandId = 'editor.action.pasteAs';
(0, editorExtensions_js_1.registerEditorContribution)(copyPasteController_js_1.CopyPasteController.ID, copyPasteController_js_1.CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor
(0, editorFeatures_js_1.registerEditorFeature)(defaultProviders_js_1.DefaultPasteProvidersFeature);
(0, editorExtensions_js_1.registerEditorCommand)(new class extends editorExtensions_js_1.EditorCommand {
    constructor() {
        super({
            id: copyPasteController_js_1.changePasteTypeCommandId,
            precondition: copyPasteController_js_1.pasteWidgetVisibleCtx,
            kbOpts: {
                weight: 100 /* KeybindingWeight.EditorContrib */,
                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        return copyPasteController_js_1.CopyPasteController.get(editor)?.changePasteType();
    }
});
(0, editorExtensions_js_1.registerEditorCommand)(new class extends editorExtensions_js_1.EditorCommand {
    constructor() {
        super({
            id: 'editor.hidePasteWidget',
            precondition: copyPasteController_js_1.pasteWidgetVisibleCtx,
            kbOpts: {
                weight: 100 /* KeybindingWeight.EditorContrib */,
                primary: 9 /* KeyCode.Escape */,
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        copyPasteController_js_1.CopyPasteController.get(editor)?.clearWidgets();
    }
});
(0, editorExtensions_js_1.registerEditorAction)(class PasteAsAction extends editorExtensions_js_1.EditorAction {
    static { this.argsSchema = {
        oneOf: [
            {
                type: 'object',
                required: ['kind'],
                properties: {
                    kind: {
                        type: 'string',
                        description: nls.localize('pasteAs.kind', "The kind of the paste edit to try pasting with.\nIf there are multiple edits for this kind, the editor will show a picker. If there are no edits of this kind, the editor will show an error message."),
                    }
                },
            },
            {
                type: 'object',
                required: ['preferences'],
                properties: {
                    preferences: {
                        type: 'array',
                        description: nls.localize('pasteAs.preferences', "List of preferred paste edit kind to try applying.\nThe first edit matching the preferences will be applied."),
                        items: { type: 'string' }
                    }
                },
            }
        ]
    }; }
    constructor() {
        super({
            id: exports.pasteAsCommandId,
            label: nls.localize2('pasteAs', "Paste As..."),
            precondition: editorContextKeys_js_1.EditorContextKeys.writable,
            metadata: {
                description: 'Paste as',
                args: [{
                        name: 'args',
                        schema: PasteAsAction.argsSchema
                    }]
            }
        });
    }
    run(_accessor, editor, args) {
        let preference;
        if (args) {
            if ('kind' in args) {
                preference = { only: new hierarchicalKind_js_1.HierarchicalKind(args.kind) };
            }
            else if ('preferences' in args) {
                preference = { preferences: args.preferences.map(kind => new hierarchicalKind_js_1.HierarchicalKind(kind)) };
            }
        }
        return copyPasteController_js_1.CopyPasteController.get(editor)?.pasteAs(preference);
    }
});
(0, editorExtensions_js_1.registerEditorAction)(class extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.pasteAsText',
            label: nls.localize2('pasteAsText', "Paste as Text"),
            precondition: editorContextKeys_js_1.EditorContextKeys.writable,
        });
    }
    run(_accessor, editor) {
        return copyPasteController_js_1.CopyPasteController.get(editor)?.pasteAs({ providerId: defaultProviders_js_1.DefaultTextPasteOrDropEditProvider.id });
    }
});
//# sourceMappingURL=copyPasteContribution.js.map