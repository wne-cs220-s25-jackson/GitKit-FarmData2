"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineEditsIndicator = exports.inlineEditIndicatorBorder = exports.inlineEditIndicatorBackground = exports.inlineEditIndicatorForeground = void 0;
const dom_js_1 = require("../../../../../../base/browser/dom.js");
const iconLabels_js_1 = require("../../../../../../base/browser/ui/iconLabel/iconLabels.js");
const codicons_js_1 = require("../../../../../../base/common/codicons.js");
const lifecycle_js_1 = require("../../../../../../base/common/lifecycle.js");
const observable_js_1 = require("../../../../../../base/common/observable.js");
const colorRegistry_js_1 = require("../../../../../../platform/theme/common/colorRegistry.js");
const colorUtils_js_1 = require("../../../../../../platform/theme/common/colorUtils.js");
const offsetRange_js_1 = require("../../../../../common/core/offsetRange.js");
// editorHoverForeground
exports.inlineEditIndicatorForeground = (0, colorUtils_js_1.registerColor)('inlineEdit.indicator.foreground', colorRegistry_js_1.buttonForeground, '');
// editorHoverBackground
exports.inlineEditIndicatorBackground = (0, colorUtils_js_1.registerColor)('inlineEdit.indicator.background', colorRegistry_js_1.buttonBackground, '');
// editorHoverBorder
exports.inlineEditIndicatorBorder = (0, colorUtils_js_1.registerColor)('inlineEdit.indicator.border', colorRegistry_js_1.buttonSeparator, '');
class InlineEditsIndicator extends lifecycle_js_1.Disposable {
    constructor(_editorObs, _state, _model) {
        super();
        this._editorObs = _editorObs;
        this._state = _state;
        this._model = _model;
        this._indicator = (0, dom_js_1.h)('div.inline-edits-view-indicator', {
            style: {
                position: 'absolute',
                overflow: 'visible',
                cursor: 'pointer',
            },
        }, [
            (0, dom_js_1.h)('div.icon', {}, [
                (0, iconLabels_js_1.renderIcon)(codicons_js_1.Codicon.arrowLeft),
            ]),
            (0, dom_js_1.h)('div.label', {}, [
                ' inline edit'
            ])
        ]);
        this._register((0, dom_js_1.addDisposableListener)(this._indicator.root, 'click', () => {
            this._model.get()?.jump();
        }));
        this._register(this._editorObs.createOverlayWidget({
            domNode: this._indicator.root,
            position: (0, observable_js_1.constObservable)(null),
            allowEditorOverflow: false,
            minContentWidthInPx: (0, observable_js_1.constObservable)(0),
        }));
        this._register((0, observable_js_1.autorun)(reader => {
            const state = this._state.read(reader);
            if (!state) {
                this._indicator.root.style.visibility = 'hidden';
                return;
            }
            this._indicator.root.style.visibility = '';
            const i = this._editorObs.layoutInfo.read(reader);
            const range = new offsetRange_js_1.OffsetRange(0, i.height - 30);
            const topEdit = state.editTopLeft;
            this._indicator.root.classList.toggle('top', topEdit.y < range.start);
            this._indicator.root.classList.toggle('bottom', topEdit.y > range.endExclusive);
            const showAnyway = state.showAlways;
            this._indicator.root.classList.toggle('visible', showAnyway);
            this._indicator.root.classList.toggle('contained', range.contains(topEdit.y));
            this._indicator.root.style.top = `${range.clip(topEdit.y)}px`;
            this._indicator.root.style.right = `${i.minimap.minimapWidth + i.verticalScrollbarWidth}px`;
        }));
    }
}
exports.InlineEditsIndicator = InlineEditsIndicator;
//# sourceMappingURL=inlineEditsIndicatorView.js.map