"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var InlineCompletionsSource_1, StructuredLogger_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StructuredLogger = exports.InlineCompletionWithUpdatedRange = exports.UpToDateInlineCompletions = exports.InlineCompletionsSource = void 0;
exports.formatRecordableLogEntry = formatRecordableLogEntry;
exports.observableContextKey = observableContextKey;
const cancellation_js_1 = require("../../../../../base/common/cancellation.js");
const equals_js_1 = require("../../../../../base/common/equals.js");
const filters_js_1 = require("../../../../../base/common/filters.js");
const lifecycle_js_1 = require("../../../../../base/common/lifecycle.js");
const observable_js_1 = require("../../../../../base/common/observable.js");
const commands_js_1 = require("../../../../../platform/commands/common/commands.js");
const configuration_js_1 = require("../../../../../platform/configuration/common/configuration.js");
const contextkey_js_1 = require("../../../../../platform/contextkey/common/contextkey.js");
const instantiation_js_1 = require("../../../../../platform/instantiation/common/instantiation.js");
const log_js_1 = require("../../../../../platform/log/common/log.js");
const platformObservableUtils_js_1 = require("../../../../../platform/observable/common/platformObservableUtils.js");
const range_js_1 = require("../../../../common/core/range.js");
const textEdit_js_1 = require("../../../../common/core/textEdit.js");
const textLength_js_1 = require("../../../../common/core/textLength.js");
const languages_js_1 = require("../../../../common/languages.js");
const languageConfigurationRegistry_js_1 = require("../../../../common/languages/languageConfigurationRegistry.js");
const languageFeatures_js_1 = require("../../../../common/services/languageFeatures.js");
const provideInlineCompletions_js_1 = require("./provideInlineCompletions.js");
const singleTextEditHelpers_js_1 = require("./singleTextEditHelpers.js");
let InlineCompletionsSource = class InlineCompletionsSource extends lifecycle_js_1.Disposable {
    static { InlineCompletionsSource_1 = this; }
    static { this._requestId = 0; }
    constructor(_textModel, _versionId, _debounceValue, _languageFeaturesService, _languageConfigurationService, _logService, _configurationService, _instantiationService) {
        super();
        this._textModel = _textModel;
        this._versionId = _versionId;
        this._debounceValue = _debounceValue;
        this._languageFeaturesService = _languageFeaturesService;
        this._languageConfigurationService = _languageConfigurationService;
        this._logService = _logService;
        this._configurationService = _configurationService;
        this._instantiationService = _instantiationService;
        this._updateOperation = this._register(new lifecycle_js_1.MutableDisposable());
        this.inlineCompletions = (0, observable_js_1.disposableObservableValue)('inlineCompletions', undefined);
        this.suggestWidgetInlineCompletions = (0, observable_js_1.disposableObservableValue)('suggestWidgetInlineCompletions', undefined);
        this._loggingEnabled = (0, platformObservableUtils_js_1.observableConfigValue)('editor.inlineSuggest.logFetch', false, this._configurationService).recomputeInitiallyAndOnChange(this._store);
        this._structuredFetchLogger = this._register(this._instantiationService.createInstance(StructuredLogger.cast(), 'editor.inlineSuggest.logFetch.commandId'));
        this.loading = (0, observable_js_1.observableValue)(this, false);
        this._register(this._textModel.onDidChangeContent(() => {
            this._updateOperation.clear();
        }));
    }
    _log(entry) {
        if (this._loggingEnabled.get()) {
            this._logService.info(formatRecordableLogEntry(entry));
        }
        this._structuredFetchLogger.log(entry);
    }
    fetch(position, context, activeInlineCompletion) {
        const request = new UpdateRequest(position, context, this._textModel.getVersionId());
        const target = context.selectedSuggestionInfo ? this.suggestWidgetInlineCompletions : this.inlineCompletions;
        if (this._updateOperation.value?.request.satisfies(request)) {
            return this._updateOperation.value.promise;
        }
        else if (target.get()?.request.satisfies(request)) {
            return Promise.resolve(true);
        }
        this.loading.set(true, undefined);
        const updateOngoing = !!this._updateOperation.value;
        this._updateOperation.clear();
        const source = new cancellation_js_1.CancellationTokenSource();
        const promise = (async () => {
            const shouldDebounce = updateOngoing || context.triggerKind === languages_js_1.InlineCompletionTriggerKind.Automatic;
            if (shouldDebounce) {
                // This debounces the operation
                await wait(this._debounceValue.get(this._textModel), source.token);
            }
            if (source.token.isCancellationRequested || this._store.isDisposed || this._textModel.getVersionId() !== request.versionId) {
                return false;
            }
            const requestId = InlineCompletionsSource_1._requestId++;
            if (this._loggingEnabled.get() || this._structuredFetchLogger.isEnabled.get()) {
                this._log({ sourceId: 'InlineCompletions.fetch', kind: 'start', requestId, modelUri: this._textModel.uri.toString(), modelVersion: this._textModel.getVersionId(), context: { triggerKind: context.triggerKind }, time: Date.now() });
            }
            const startTime = new Date();
            let updatedCompletions = undefined;
            let error = undefined;
            try {
                updatedCompletions = await (0, provideInlineCompletions_js_1.provideInlineCompletions)(this._languageFeaturesService.inlineCompletionsProvider, position, this._textModel, context, source.token, this._languageConfigurationService);
            }
            catch (e) {
                error = e;
                throw e;
            }
            finally {
                if (this._loggingEnabled.get() || this._structuredFetchLogger.isEnabled.get()) {
                    if (source.token.isCancellationRequested || this._store.isDisposed || this._textModel.getVersionId() !== request.versionId) {
                        error = 'canceled';
                    }
                    const result = updatedCompletions?.completions.map(c => ({
                        range: c.range.toString(),
                        text: c.insertText,
                        isInlineEdit: !!c.sourceInlineCompletion.isInlineEdit,
                        source: c.source.provider.groupId,
                    }));
                    this._log({ sourceId: 'InlineCompletions.fetch', kind: 'end', requestId, durationMs: (Date.now() - startTime.getTime()), error, result, time: Date.now() });
                }
            }
            if (source.token.isCancellationRequested || this._store.isDisposed || this._textModel.getVersionId() !== request.versionId) {
                updatedCompletions.dispose();
                return false;
            }
            const endTime = new Date();
            this._debounceValue.update(this._textModel, endTime.getTime() - startTime.getTime());
            const completions = new UpToDateInlineCompletions(updatedCompletions, request, this._textModel, this._versionId);
            if (activeInlineCompletion) {
                const asInlineCompletion = activeInlineCompletion.toInlineCompletion(undefined);
                if (activeInlineCompletion.canBeReused(this._textModel, position) && !updatedCompletions.has(asInlineCompletion)) {
                    completions.prepend(activeInlineCompletion.inlineCompletion, asInlineCompletion.range, true);
                }
            }
            this._updateOperation.clear();
            (0, observable_js_1.transaction)(tx => {
                /** @description Update completions with provider result */
                target.set(completions, tx);
                this.loading.set(false, tx);
            });
            return true;
        })();
        const updateOperation = new UpdateOperation(request, source, promise);
        this._updateOperation.value = updateOperation;
        return promise;
    }
    clear(tx) {
        this._updateOperation.clear();
        this.inlineCompletions.set(undefined, tx);
        this.suggestWidgetInlineCompletions.set(undefined, tx);
    }
    clearSuggestWidgetInlineCompletions(tx) {
        if (this._updateOperation.value?.request.context.selectedSuggestionInfo) {
            this._updateOperation.clear();
        }
        this.suggestWidgetInlineCompletions.set(undefined, tx);
    }
    cancelUpdate() {
        this._updateOperation.clear();
    }
};
exports.InlineCompletionsSource = InlineCompletionsSource;
exports.InlineCompletionsSource = InlineCompletionsSource = InlineCompletionsSource_1 = __decorate([
    __param(3, languageFeatures_js_1.ILanguageFeaturesService),
    __param(4, languageConfigurationRegistry_js_1.ILanguageConfigurationService),
    __param(5, log_js_1.ILogService),
    __param(6, configuration_js_1.IConfigurationService),
    __param(7, instantiation_js_1.IInstantiationService)
], InlineCompletionsSource);
function wait(ms, cancellationToken) {
    return new Promise(resolve => {
        let d = undefined;
        const handle = setTimeout(() => {
            if (d) {
                d.dispose();
            }
            resolve();
        }, ms);
        if (cancellationToken) {
            d = cancellationToken.onCancellationRequested(() => {
                clearTimeout(handle);
                if (d) {
                    d.dispose();
                }
                resolve();
            });
        }
    });
}
class UpdateRequest {
    constructor(position, context, versionId) {
        this.position = position;
        this.context = context;
        this.versionId = versionId;
    }
    satisfies(other) {
        return this.position.equals(other.position)
            && (0, equals_js_1.equalsIfDefined)(this.context.selectedSuggestionInfo, other.context.selectedSuggestionInfo, (0, equals_js_1.itemEquals)())
            && (other.context.triggerKind === languages_js_1.InlineCompletionTriggerKind.Automatic
                || this.context.triggerKind === languages_js_1.InlineCompletionTriggerKind.Explicit)
            && this.versionId === other.versionId;
    }
    get isExplicitRequest() {
        return this.context.triggerKind === languages_js_1.InlineCompletionTriggerKind.Explicit;
    }
}
class UpdateOperation {
    constructor(request, cancellationTokenSource, promise) {
        this.request = request;
        this.cancellationTokenSource = cancellationTokenSource;
        this.promise = promise;
    }
    dispose() {
        this.cancellationTokenSource.cancel();
    }
}
class UpToDateInlineCompletions {
    get inlineCompletions() { return this._inlineCompletions; }
    constructor(inlineCompletionProviderResult, request, _textModel, _versionId) {
        this.inlineCompletionProviderResult = inlineCompletionProviderResult;
        this.request = request;
        this._textModel = _textModel;
        this._versionId = _versionId;
        this._refCount = 1;
        this._prependedInlineCompletionItems = [];
        const ids = _textModel.deltaDecorations([], inlineCompletionProviderResult.completions.map(i => ({
            range: i.range,
            options: {
                description: 'inline-completion-tracking-range'
            },
        })));
        this._inlineCompletions = inlineCompletionProviderResult.completions.map((i, index) => new InlineCompletionWithUpdatedRange(i, ids[index], this._textModel, this._versionId, this.request));
    }
    clone() {
        this._refCount++;
        return this;
    }
    dispose() {
        this._refCount--;
        if (this._refCount === 0) {
            setTimeout(() => {
                // To fix https://github.com/microsoft/vscode/issues/188348
                if (!this._textModel.isDisposed()) {
                    // This is just cleanup. It's ok if it happens with a delay.
                    this._textModel.deltaDecorations(this._inlineCompletions.map(i => i.decorationId), []);
                }
            }, 0);
            this.inlineCompletionProviderResult.dispose();
            for (const i of this._prependedInlineCompletionItems) {
                i.source.removeRef();
            }
        }
    }
    prepend(inlineCompletion, range, addRefToSource) {
        if (addRefToSource) {
            inlineCompletion.source.addRef();
        }
        const id = this._textModel.deltaDecorations([], [{
                range,
                options: {
                    description: 'inline-completion-tracking-range'
                },
            }])[0];
        this._inlineCompletions.unshift(new InlineCompletionWithUpdatedRange(inlineCompletion, id, this._textModel, this._versionId, this.request));
        this._prependedInlineCompletionItems.push(inlineCompletion);
    }
}
exports.UpToDateInlineCompletions = UpToDateInlineCompletions;
class InlineCompletionWithUpdatedRange {
    get forwardStable() {
        return this.inlineCompletion.source.inlineCompletions.enableForwardStability ?? false;
    }
    constructor(inlineCompletion, decorationId, _textModel, _modelVersion, request) {
        this.inlineCompletion = inlineCompletion;
        this.decorationId = decorationId;
        this._textModel = _textModel;
        this._modelVersion = _modelVersion;
        this.request = request;
        this.semanticId = JSON.stringify([
            this.inlineCompletion.filterText,
            this.inlineCompletion.insertText,
            this.inlineCompletion.range.getStartPosition().toString()
        ]);
        this._updatedRange = (0, observable_js_1.derivedOpts)({ owner: this, equalsFn: range_js_1.Range.equalsRange }, reader => {
            this._modelVersion.read(reader);
            return this._textModel.getDecorationRange(this.decorationId);
        });
    }
    toInlineCompletion(reader) {
        return this.inlineCompletion.withRange(this._updatedRange.read(reader) ?? emptyRange);
    }
    toSingleTextEdit(reader) {
        return new textEdit_js_1.SingleTextEdit(this._updatedRange.read(reader) ?? emptyRange, this.inlineCompletion.insertText);
    }
    isVisible(model, cursorPosition, reader) {
        const minimizedReplacement = (0, singleTextEditHelpers_js_1.singleTextRemoveCommonPrefix)(this._toFilterTextReplacement(reader), model);
        const updatedRange = this._updatedRange.read(reader);
        if (!updatedRange
            || !this.inlineCompletion.range.getStartPosition().equals(updatedRange.getStartPosition())
            || cursorPosition.lineNumber !== minimizedReplacement.range.startLineNumber
            || minimizedReplacement.isEmpty // if the completion is empty after removing the common prefix of the completion and the model, the completion item would not be visible
        ) {
            return false;
        }
        // We might consider comparing by .toLowerText, but this requires GhostTextReplacement
        const originalValue = model.getValueInRange(minimizedReplacement.range, 1 /* EndOfLinePreference.LF */);
        const filterText = minimizedReplacement.text;
        const cursorPosIndex = Math.max(0, cursorPosition.column - minimizedReplacement.range.startColumn);
        let filterTextBefore = filterText.substring(0, cursorPosIndex);
        let filterTextAfter = filterText.substring(cursorPosIndex);
        let originalValueBefore = originalValue.substring(0, cursorPosIndex);
        let originalValueAfter = originalValue.substring(cursorPosIndex);
        const originalValueIndent = model.getLineIndentColumn(minimizedReplacement.range.startLineNumber);
        if (minimizedReplacement.range.startColumn <= originalValueIndent) {
            // Remove indentation
            originalValueBefore = originalValueBefore.trimStart();
            if (originalValueBefore.length === 0) {
                originalValueAfter = originalValueAfter.trimStart();
            }
            filterTextBefore = filterTextBefore.trimStart();
            if (filterTextBefore.length === 0) {
                filterTextAfter = filterTextAfter.trimStart();
            }
        }
        return filterTextBefore.startsWith(originalValueBefore)
            && !!(0, filters_js_1.matchesSubString)(originalValueAfter, filterTextAfter);
    }
    canBeReused(model, position) {
        const updatedRange = this._updatedRange.read(undefined);
        const result = !!updatedRange
            && updatedRange.containsPosition(position)
            && this.isVisible(model, position, undefined)
            && textLength_js_1.TextLength.ofRange(updatedRange).isGreaterThanOrEqualTo(textLength_js_1.TextLength.ofRange(this.inlineCompletion.range));
        return result;
    }
    _toFilterTextReplacement(reader) {
        return new textEdit_js_1.SingleTextEdit(this._updatedRange.read(reader) ?? emptyRange, this.inlineCompletion.filterText);
    }
}
exports.InlineCompletionWithUpdatedRange = InlineCompletionWithUpdatedRange;
const emptyRange = new range_js_1.Range(1, 1, 1, 1);
/**
 * The sourceLabel must not contain '@'!
*/
function formatRecordableLogEntry(entry) {
    return entry.sourceId + ' @@ ' + JSON.stringify({ ...entry, sourceId: undefined });
}
let StructuredLogger = StructuredLogger_1 = class StructuredLogger extends lifecycle_js_1.Disposable {
    static cast() {
        return this;
    }
    constructor(_contextKey, _contextKeyService, _commandService) {
        super();
        this._contextKey = _contextKey;
        this._contextKeyService = _contextKeyService;
        this._commandService = _commandService;
        this._contextKeyValue = observableContextKey(this._contextKey, this._contextKeyService).recomputeInitiallyAndOnChange(this._store);
        this.isEnabled = this._contextKeyValue.map(v => v !== undefined);
    }
    log(data) {
        const commandId = this._contextKeyValue.get();
        if (!commandId) {
            return false;
        }
        this._commandService.executeCommand(commandId, data);
        return true;
    }
};
exports.StructuredLogger = StructuredLogger;
exports.StructuredLogger = StructuredLogger = StructuredLogger_1 = __decorate([
    __param(1, contextkey_js_1.IContextKeyService),
    __param(2, commands_js_1.ICommandService)
], StructuredLogger);
function observableContextKey(key, contextKeyService) {
    return (0, observable_js_1.observableFromEvent)(contextKeyService.onDidChangeContext, () => contextKeyService.getContextKeyValue(key));
}
//# sourceMappingURL=inlineCompletionsSource.js.map