"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineCompletionContextKeys = void 0;
const contextkey_js_1 = require("../../../../../platform/contextkey/common/contextkey.js");
const nls_js_1 = require("../../../../../nls.js");
class InlineCompletionContextKeys {
    static { this.inlineSuggestionVisible = new contextkey_js_1.RawContextKey('inlineSuggestionVisible', false, (0, nls_js_1.localize)('inlineSuggestionVisible', "Whether an inline suggestion is visible")); }
    static { this.inlineSuggestionHasIndentation = new contextkey_js_1.RawContextKey('inlineSuggestionHasIndentation', false, (0, nls_js_1.localize)('inlineSuggestionHasIndentation', "Whether the inline suggestion starts with whitespace")); }
    static { this.inlineSuggestionHasIndentationLessThanTabSize = new contextkey_js_1.RawContextKey('inlineSuggestionHasIndentationLessThanTabSize', true, (0, nls_js_1.localize)('inlineSuggestionHasIndentationLessThanTabSize', "Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab")); }
    static { this.suppressSuggestions = new contextkey_js_1.RawContextKey('inlineSuggestionSuppressSuggestions', undefined, (0, nls_js_1.localize)('suppressSuggestions', "Whether suggestions should be suppressed for the current suggestion")); }
    static { this.cursorInIndentation = new contextkey_js_1.RawContextKey('cursorInIndentation', false, (0, nls_js_1.localize)('cursorInIndentation', "Whether the cursor is in indentation")); }
    static { this.hasSelection = new contextkey_js_1.RawContextKey('editor.hasSelection', false, (0, nls_js_1.localize)('editor.hasSelection', "Whether the editor has a selection")); }
    static { this.cursorAtInlineEdit = new contextkey_js_1.RawContextKey('cursorAtInlineEdit', false, (0, nls_js_1.localize)('cursorAtInlineEdit', "Whether the cursor is at an inline edit")); }
    static { this.inlineEditVisible = new contextkey_js_1.RawContextKey('inlineEditIsVisible', false, (0, nls_js_1.localize)('inlineEditVisible', "Whether an inline edit is visible")); }
    static { this.tabShouldJumpToInlineEdit = new contextkey_js_1.RawContextKey('tabShouldJumpToInlineEdit', false, (0, nls_js_1.localize)('tabShouldJumpToInlineEdit', "Whether tab should jump to an inline edit.")); }
    static { this.tabShouldAcceptInlineEdit = new contextkey_js_1.RawContextKey('tabShouldAcceptInlineEdit', false, (0, nls_js_1.localize)('tabShouldAcceptInlineEdit', "Whether tab should accept the inline edit.")); }
}
exports.InlineCompletionContextKeys = InlineCompletionContextKeys;
//# sourceMappingURL=inlineCompletionContextKeys.js.map