"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextModelChangeRecorder = void 0;
const lifecycle_js_1 = require("../../../../../base/common/lifecycle.js");
const observable_js_1 = require("../../../../../base/common/observable.js");
const instantiation_js_1 = require("../../../../../platform/instantiation/common/instantiation.js");
const codeEditorWidget_js_1 = require("../../../../browser/widget/codeEditor/codeEditorWidget.js");
const inlineCompletionsSource_js_1 = require("./inlineCompletionsSource.js");
let TextModelChangeRecorder = class TextModelChangeRecorder extends lifecycle_js_1.Disposable {
    constructor(_editor, _instantiationService) {
        super();
        this._editor = _editor;
        this._instantiationService = _instantiationService;
        this._structuredLogger = this._register(this._instantiationService.createInstance(inlineCompletionsSource_js_1.StructuredLogger.cast(), 'editor.inlineSuggest.logChangeReason.commandId'));
        this._register((0, observable_js_1.autorunWithStore)((reader, store) => {
            if (!(this._editor instanceof codeEditorWidget_js_1.CodeEditorWidget)) {
                return;
            }
            if (!this._structuredLogger.isEnabled.read(reader)) {
                return;
            }
            const sources = [];
            store.add(this._editor.onBeforeExecuteEdit(({ source }) => {
                if (source) {
                    sources.push(source);
                }
            }));
            store.add(this._editor.onDidChangeModelContent(e => {
                const tm = this._editor.getModel();
                if (!tm) {
                    return;
                }
                for (const source of sources) {
                    const data = {
                        sourceId: 'TextModel.setChangeReason',
                        source: source,
                        time: Date.now(),
                        modelUri: tm.uri.toString(),
                        modelVersion: tm.getVersionId(),
                    };
                    this._structuredLogger.log(data);
                }
                sources.length = 0;
            }));
        }));
    }
};
exports.TextModelChangeRecorder = TextModelChangeRecorder;
exports.TextModelChangeRecorder = TextModelChangeRecorder = __decorate([
    __param(1, instantiation_js_1.IInstantiationService)
], TextModelChangeRecorder);
//# sourceMappingURL=changeRecorder.js.map