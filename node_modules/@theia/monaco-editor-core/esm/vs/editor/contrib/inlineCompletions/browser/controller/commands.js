"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevExtractReproSample = exports.ToggleAlwaysShowInlineSuggestionToolbar = exports.HideInlineCompletion = exports.JumpToNextInlineEdit = exports.AcceptInlineCompletion = exports.AcceptNextLineOfInlineCompletion = exports.AcceptNextWordOfInlineCompletion = exports.TriggerInlineEditAction = exports.ExplicitTriggerInlineEditAction = exports.TriggerInlineSuggestionAction = exports.ShowPreviousInlineSuggestionAction = exports.ShowNextInlineSuggestionAction = void 0;
const observable_js_1 = require("../../../../../base/common/observable.js");
const strings_js_1 = require("../../../../../base/common/strings.js");
const nls = require("../../../../../nls.js");
const actions_js_1 = require("../../../../../platform/actions/common/actions.js");
const clipboardService_js_1 = require("../../../../../platform/clipboard/common/clipboardService.js");
const configuration_js_1 = require("../../../../../platform/configuration/common/configuration.js");
const contextkey_js_1 = require("../../../../../platform/contextkey/common/contextkey.js");
const editorExtensions_js_1 = require("../../../../browser/editorExtensions.js");
const editorContextKeys_js_1 = require("../../../../common/editorContextKeys.js");
const suggest_js_1 = require("../../../suggest/browser/suggest.js");
const commandIds_js_1 = require("./commandIds.js");
const inlineCompletionContextKeys_js_1 = require("./inlineCompletionContextKeys.js");
const inlineCompletionsController_js_1 = require("./inlineCompletionsController.js");
const notification_js_1 = require("../../../../../platform/notification/common/notification.js");
class ShowNextInlineSuggestionAction extends editorExtensions_js_1.EditorAction {
    static { this.ID = commandIds_js_1.showNextInlineSuggestionActionId; }
    constructor() {
        super({
            id: ShowNextInlineSuggestionAction.ID,
            label: nls.localize2('action.inlineSuggest.showNext', "Show Next Inline Suggestion"),
            precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionVisible),
            kbOpts: {
                weight: 100,
                primary: 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */,
            },
        });
    }
    async run(accessor, editor) {
        const controller = inlineCompletionsController_js_1.InlineCompletionsController.get(editor);
        controller?.model.get()?.next();
    }
}
exports.ShowNextInlineSuggestionAction = ShowNextInlineSuggestionAction;
class ShowPreviousInlineSuggestionAction extends editorExtensions_js_1.EditorAction {
    static { this.ID = commandIds_js_1.showPreviousInlineSuggestionActionId; }
    constructor() {
        super({
            id: ShowPreviousInlineSuggestionAction.ID,
            label: nls.localize2('action.inlineSuggest.showPrevious', "Show Previous Inline Suggestion"),
            precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionVisible),
            kbOpts: {
                weight: 100,
                primary: 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */,
            },
        });
    }
    async run(accessor, editor) {
        const controller = inlineCompletionsController_js_1.InlineCompletionsController.get(editor);
        controller?.model.get()?.previous();
    }
}
exports.ShowPreviousInlineSuggestionAction = ShowPreviousInlineSuggestionAction;
class TriggerInlineSuggestionAction extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.inlineSuggest.trigger',
            label: nls.localize2('action.inlineSuggest.trigger', "Trigger Inline Suggestion"),
            precondition: editorContextKeys_js_1.EditorContextKeys.writable
        });
    }
    async run(accessor, editor) {
        const controller = inlineCompletionsController_js_1.InlineCompletionsController.get(editor);
        await (0, observable_js_1.asyncTransaction)(async (tx) => {
            /** @description triggerExplicitly from command */
            await controller?.model.get()?.triggerExplicitly(tx);
            controller?.playAccessibilitySignal(tx);
        });
    }
}
exports.TriggerInlineSuggestionAction = TriggerInlineSuggestionAction;
class ExplicitTriggerInlineEditAction extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.inlineSuggest.triggerInlineEditExplicit',
            label: nls.localize2('action.inlineSuggest.trigger.explicitInlineEdit', "Trigger Inline Edit"),
            precondition: editorContextKeys_js_1.EditorContextKeys.writable,
        });
    }
    async run(accessor, editor) {
        const notificationService = accessor.get(notification_js_1.INotificationService);
        const controller = inlineCompletionsController_js_1.InlineCompletionsController.get(editor);
        await controller?.model.get()?.triggerExplicitly(undefined, true);
        if (!controller?.model.get()?.inlineEditAvailable.get()) {
            notificationService.notify({
                severity: notification_js_1.Severity.Info,
                message: nls.localize('noInlineEditAvailable', "No inline edit is available.")
            });
        }
    }
}
exports.ExplicitTriggerInlineEditAction = ExplicitTriggerInlineEditAction;
class TriggerInlineEditAction extends editorExtensions_js_1.EditorCommand {
    constructor() {
        super({
            id: 'editor.action.inlineSuggest.triggerInlineEdit',
            precondition: editorContextKeys_js_1.EditorContextKeys.writable,
        });
    }
    async runEditorCommand(accessor, editor, args) {
        const controller = inlineCompletionsController_js_1.InlineCompletionsController.get(editor);
        await controller?.model.get()?.trigger(undefined, true);
    }
}
exports.TriggerInlineEditAction = TriggerInlineEditAction;
class AcceptNextWordOfInlineCompletion extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.inlineSuggest.acceptNextWord',
            label: nls.localize2('action.inlineSuggest.acceptNextWord', "Accept Next Word Of Inline Suggestion"),
            precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionVisible),
            kbOpts: {
                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,
                primary: 2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */,
                kbExpr: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionVisible),
            },
            menuOpts: [{
                    menuId: actions_js_1.MenuId.InlineSuggestionToolbar,
                    title: nls.localize('acceptWord', 'Accept Word'),
                    group: 'primary',
                    order: 2,
                }],
        });
    }
    async run(accessor, editor) {
        const controller = inlineCompletionsController_js_1.InlineCompletionsController.get(editor);
        await controller?.model.get()?.acceptNextWord(controller.editor);
    }
}
exports.AcceptNextWordOfInlineCompletion = AcceptNextWordOfInlineCompletion;
class AcceptNextLineOfInlineCompletion extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.inlineSuggest.acceptNextLine',
            label: nls.localize2('action.inlineSuggest.acceptNextLine', "Accept Next Line Of Inline Suggestion"),
            precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionVisible),
            kbOpts: {
                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,
            },
            menuOpts: [{
                    menuId: actions_js_1.MenuId.InlineSuggestionToolbar,
                    title: nls.localize('acceptLine', 'Accept Line'),
                    group: 'secondary',
                    order: 2,
                }],
        });
    }
    async run(accessor, editor) {
        const controller = inlineCompletionsController_js_1.InlineCompletionsController.get(editor);
        await controller?.model.get()?.acceptNextLine(controller.editor);
    }
}
exports.AcceptNextLineOfInlineCompletion = AcceptNextLineOfInlineCompletion;
class AcceptInlineCompletion extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: commandIds_js_1.inlineSuggestCommitId,
            label: nls.localize2('action.inlineSuggest.accept', "Accept Inline Suggestion"),
            precondition: contextkey_js_1.ContextKeyExpr.or(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionVisible, inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineEditVisible),
            menuOpts: [{
                    menuId: actions_js_1.MenuId.InlineSuggestionToolbar,
                    title: nls.localize('accept', "Accept"),
                    group: 'primary',
                    order: 2,
                }, {
                    menuId: actions_js_1.MenuId.InlineEditsActions,
                    title: nls.localize('accept', "Accept"),
                    group: 'primary',
                    order: 2,
                }],
            kbOpts: [
                {
                    primary: 2 /* KeyCode.Tab */,
                    weight: 200,
                    kbExpr: contextkey_js_1.ContextKeyExpr.or(contextkey_js_1.ContextKeyExpr.and(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionVisible, editorContextKeys_js_1.EditorContextKeys.tabMovesFocus.toNegated(), suggest_js_1.Context.Visible.toNegated(), editorContextKeys_js_1.EditorContextKeys.hoverFocused.toNegated(), inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize), contextkey_js_1.ContextKeyExpr.and(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineEditVisible, editorContextKeys_js_1.EditorContextKeys.tabMovesFocus.toNegated(), suggest_js_1.Context.Visible.toNegated(), editorContextKeys_js_1.EditorContextKeys.hoverFocused.toNegated(), inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.tabShouldAcceptInlineEdit)),
                }
            ],
        });
    }
    async run(accessor, editor) {
        const controller = inlineCompletionsController_js_1.InlineCompletionsController.get(editor);
        if (controller) {
            controller.model.get()?.accept(controller.editor);
            controller.editor.focus();
        }
    }
}
exports.AcceptInlineCompletion = AcceptInlineCompletion;
class JumpToNextInlineEdit extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.inlineSuggest.jump',
            label: nls.localize2('action.inlineSuggest.jump', "Jump to next inline edit"),
            precondition: inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineEditVisible,
            menuOpts: [{
                    menuId: actions_js_1.MenuId.InlineEditsActions,
                    title: nls.localize('jump', "Jump"),
                    group: 'primary',
                    order: 1,
                    when: inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.cursorAtInlineEdit.toNegated(),
                }],
            kbOpts: {
                primary: 2 /* KeyCode.Tab */,
                weight: 201,
                kbExpr: contextkey_js_1.ContextKeyExpr.and(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineEditVisible, editorContextKeys_js_1.EditorContextKeys.tabMovesFocus.toNegated(), suggest_js_1.Context.Visible.toNegated(), editorContextKeys_js_1.EditorContextKeys.hoverFocused.toNegated(), inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.tabShouldJumpToInlineEdit),
            }
        });
    }
    async run(accessor, editor) {
        const controller = inlineCompletionsController_js_1.InlineCompletionsController.get(editor);
        if (controller) {
            controller.jump();
        }
    }
}
exports.JumpToNextInlineEdit = JumpToNextInlineEdit;
class HideInlineCompletion extends editorExtensions_js_1.EditorAction {
    static { this.ID = 'editor.action.inlineSuggest.hide'; }
    constructor() {
        super({
            id: HideInlineCompletion.ID,
            label: nls.localize2('action.inlineSuggest.hide', "Hide Inline Suggestion"),
            precondition: contextkey_js_1.ContextKeyExpr.or(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionVisible, inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineEditVisible),
            kbOpts: {
                weight: 100,
                primary: 9 /* KeyCode.Escape */,
            },
            menuOpts: [{
                    menuId: actions_js_1.MenuId.InlineEditsActions,
                    title: nls.localize('reject', "Reject"),
                    group: 'primary',
                    order: 3,
                }]
        });
    }
    async run(accessor, editor) {
        const controller = inlineCompletionsController_js_1.InlineCompletionsController.get(editor);
        (0, observable_js_1.transaction)(tx => {
            controller?.model.get()?.stop('explicitCancel', tx);
        });
    }
}
exports.HideInlineCompletion = HideInlineCompletion;
class ToggleAlwaysShowInlineSuggestionToolbar extends actions_js_1.Action2 {
    static { this.ID = 'editor.action.inlineSuggest.toggleAlwaysShowToolbar'; }
    constructor() {
        super({
            id: ToggleAlwaysShowInlineSuggestionToolbar.ID,
            title: nls.localize('action.inlineSuggest.alwaysShowToolbar', "Always Show Toolbar"),
            f1: false,
            precondition: undefined,
            menu: [{
                    id: actions_js_1.MenuId.InlineSuggestionToolbar,
                    group: 'secondary',
                    order: 10,
                }],
            toggled: contextkey_js_1.ContextKeyExpr.equals('config.editor.inlineSuggest.showToolbar', 'always')
        });
    }
    async run(accessor) {
        const configService = accessor.get(configuration_js_1.IConfigurationService);
        const currentValue = configService.getValue('editor.inlineSuggest.showToolbar');
        const newValue = currentValue === 'always' ? 'onHover' : 'always';
        configService.updateValue('editor.inlineSuggest.showToolbar', newValue);
    }
}
exports.ToggleAlwaysShowInlineSuggestionToolbar = ToggleAlwaysShowInlineSuggestionToolbar;
class DevExtractReproSample extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.inlineSuggest.dev.extractRepro',
            label: nls.localize('action.inlineSuggest.dev.extractRepro', "Developer: Extract Inline Suggest State"),
            alias: 'Developer: Inline Suggest Extract Repro',
            precondition: inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineEditVisible,
        });
    }
    async run(accessor, editor) {
        const clipboardService = accessor.get(clipboardService_js_1.IClipboardService);
        const controller = inlineCompletionsController_js_1.InlineCompletionsController.get(editor);
        const m = controller?.model.get();
        if (!m) {
            return;
        }
        const repro = m.extractReproSample();
        const inlineCompletionLines = (0, strings_js_1.splitLines)(JSON.stringify({ inlineCompletion: repro.inlineCompletion }, null, 4));
        const json = inlineCompletionLines.map(l => '// ' + l).join('\n');
        const reproStr = `${repro.documentValue}\n\n// <json>\n${json}\n// </json>\n`;
        await clipboardService.writeText(reproStr);
        return { reproCase: reproStr };
    }
}
exports.DevExtractReproSample = DevExtractReproSample;
//# sourceMappingURL=commands.js.map