"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var InlineEditsViewAndDiffProducer_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineEditWithChanges = exports.InlineEditsViewAndDiffProducer = void 0;
const cache_js_1 = require("../../../../../../base/common/cache.js");
const cancellation_js_1 = require("../../../../../../base/common/cancellation.js");
const equals_js_1 = require("../../../../../../base/common/equals.js");
const hotReloadHelpers_js_1 = require("../../../../../../base/common/hotReloadHelpers.js");
const lifecycle_js_1 = require("../../../../../../base/common/lifecycle.js");
const observable_js_1 = require("../../../../../../base/common/observable.js");
const instantiation_js_1 = require("../../../../../../platform/instantiation/common/instantiation.js");
const diffProviderFactoryService_js_1 = require("../../../../../browser/widget/diffEditor/diffProviderFactoryService.js");
const lineEdit_js_1 = require("../../../../../common/core/lineEdit.js");
const textEdit_js_1 = require("../../../../../common/core/textEdit.js");
const textLength_js_1 = require("../../../../../common/core/textLength.js");
const textModelText_js_1 = require("../../../../../common/model/textModelText.js");
const model_js_1 = require("../../../../../common/services/model.js");
const inlineEditsView_js_1 = require("./inlineEditsView.js");
const utils_js_1 = require("./utils.js");
let InlineEditsViewAndDiffProducer = class InlineEditsViewAndDiffProducer extends lifecycle_js_1.Disposable {
    static { InlineEditsViewAndDiffProducer_1 = this; }
    static { this.hot = (0, hotReloadHelpers_js_1.createHotClass)(InlineEditsViewAndDiffProducer_1); }
    constructor(_editor, _edit, _model, _instantiationService, _diffProviderFactoryService, _modelService) {
        super();
        this._editor = _editor;
        this._edit = _edit;
        this._model = _model;
        this._instantiationService = _instantiationService;
        this._diffProviderFactoryService = _diffProviderFactoryService;
        this._modelService = _modelService;
        this._modelUriGenerator = new utils_js_1.UniqueUriGenerator('inline-edits');
        this._originalModel = (0, observable_js_1.derivedDisposable)(() => this._modelService.createModel('', null, this._modelUriGenerator.getUniqueUri())).keepObserved(this._store);
        this._modifiedModel = (0, observable_js_1.derivedDisposable)(() => this._modelService.createModel('', null, this._modelUriGenerator.getUniqueUri())).keepObserved(this._store);
        this._differ = new cache_js_1.LRUCachedFunction({ getCacheKey: JSON.stringify }, (arg) => {
            this._originalModel.get().setValue(arg.original);
            this._modifiedModel.get().setValue(arg.modified);
            const diffAlgo = this._diffProviderFactoryService.createDiffProvider({ diffAlgorithm: 'advanced' });
            return observable_js_1.ObservablePromise.fromFn(async () => {
                const result = await diffAlgo.computeDiff(this._originalModel.get(), this._modifiedModel.get(), {
                    computeMoves: false,
                    ignoreTrimWhitespace: false,
                    maxComputationTimeMs: 1000,
                }, cancellation_js_1.CancellationToken.None);
                return result;
            });
        });
        this._inlineEditPromise = (0, observable_js_1.derived)(this, (reader) => {
            const inlineEdit = this._edit.read(reader);
            if (!inlineEdit) {
                return undefined;
            }
            //if (inlineEdit.text.trim() === '') { return undefined; }
            const text = new textModelText_js_1.TextModelText(this._editor.getModel());
            const edit = inlineEdit.edit.extendToFullLine(text);
            const diffResult = this._differ.get({ original: this._editor.getModel().getValueInRange(edit.range), modified: edit.text });
            return diffResult.promiseResult.map(p => {
                if (!p || !p.data) {
                    return undefined;
                }
                const result = p.data;
                const rangeStartPos = edit.range.getStartPosition();
                const innerChanges = result.changes.flatMap(c => c.innerChanges);
                function addRangeToPos(pos, range) {
                    const start = textLength_js_1.TextLength.fromPosition(range.getStartPosition());
                    return textLength_js_1.TextLength.ofRange(range).createRange(start.addToPosition(pos));
                }
                const edits = innerChanges.map(c => new textEdit_js_1.SingleTextEdit(addRangeToPos(rangeStartPos, c.originalRange), this._modifiedModel.get().getValueInRange(c.modifiedRange)));
                const diffEdits = new textEdit_js_1.TextEdit(edits);
                return new InlineEditWithChanges(text, diffEdits, inlineEdit.isCollapsed, inlineEdit.renderExplicitly, inlineEdit.commands, inlineEdit.inlineCompletion); //inlineEdit.showInlineIfPossible);
            });
        });
        this._inlineEdit = (0, observable_js_1.derivedOpts)({ owner: this, equalsFn: (0, equals_js_1.equalsIfDefined)((0, equals_js_1.itemEquals)()) }, reader => this._inlineEditPromise.read(reader)?.read(reader));
        this._register(this._instantiationService.createInstance(inlineEditsView_js_1.InlineEditsView, this._editor, this._inlineEdit, this._model));
    }
};
exports.InlineEditsViewAndDiffProducer = InlineEditsViewAndDiffProducer;
exports.InlineEditsViewAndDiffProducer = InlineEditsViewAndDiffProducer = InlineEditsViewAndDiffProducer_1 = __decorate([
    __param(3, instantiation_js_1.IInstantiationService),
    __param(4, diffProviderFactoryService_js_1.IDiffProviderFactoryService),
    __param(5, model_js_1.IModelService)
], InlineEditsViewAndDiffProducer);
class InlineEditWithChanges {
    constructor(originalText, edit, isCollapsed, userJumpedToIt, commands, inlineCompletion) {
        this.originalText = originalText;
        this.edit = edit;
        this.isCollapsed = isCollapsed;
        this.userJumpedToIt = userJumpedToIt;
        this.commands = commands;
        this.inlineCompletion = inlineCompletion;
        this.lineEdit = lineEdit_js_1.SingleLineEdit.fromSingleTextEdit(this.edit.toSingle(this.originalText), this.originalText);
        this.originalLineRange = this.lineEdit.lineRange;
        this.modifiedLineRange = this.lineEdit.toLineEdit().getNewLineRanges()[0];
    }
    equals(other) {
        return this.originalText.getValue() === other.originalText.getValue() &&
            this.edit.equals(other.edit) &&
            this.isCollapsed === other.isCollapsed &&
            this.userJumpedToIt === other.userJumpedToIt &&
            this.commands === other.commands &&
            this.inlineCompletion === other.inlineCompletion;
    }
}
exports.InlineEditWithChanges = InlineEditWithChanges;
//# sourceMappingURL=inlineEditsViewAndDiffProducer.js.map