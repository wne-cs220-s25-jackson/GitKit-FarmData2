"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var InlineCompletionsController_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineCompletionsController = void 0;
const aria_js_1 = require("../../../../../base/browser/ui/aria/aria.js");
const async_js_1 = require("../../../../../base/common/async.js");
const cancellation_js_1 = require("../../../../../base/common/cancellation.js");
const hotReloadHelpers_js_1 = require("../../../../../base/common/hotReloadHelpers.js");
const lifecycle_js_1 = require("../../../../../base/common/lifecycle.js");
const observable_js_1 = require("../../../../../base/common/observable.js");
const types_js_1 = require("../../../../../base/common/types.js");
const nls_js_1 = require("../../../../../nls.js");
const accessibility_js_1 = require("../../../../../platform/accessibility/common/accessibility.js");
const accessibilitySignalService_js_1 = require("../../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js");
const commands_js_1 = require("../../../../../platform/commands/common/commands.js");
const configuration_js_1 = require("../../../../../platform/configuration/common/configuration.js");
const contextkey_js_1 = require("../../../../../platform/contextkey/common/contextkey.js");
const instantiation_js_1 = require("../../../../../platform/instantiation/common/instantiation.js");
const keybinding_js_1 = require("../../../../../platform/keybinding/common/keybinding.js");
const wrapInHotClass_js_1 = require("../../../../../platform/observable/common/wrapInHotClass.js");
const coreCommands_js_1 = require("../../../../browser/coreCommands.js");
const observableCodeEditor_js_1 = require("../../../../browser/observableCodeEditor.js");
const position_js_1 = require("../../../../common/core/position.js");
const languageFeatureDebounce_js_1 = require("../../../../common/services/languageFeatureDebounce.js");
const languageFeatures_js_1 = require("../../../../common/services/languageFeatures.js");
const inlineCompletionsHintsWidget_js_1 = require("../hintsWidget/inlineCompletionsHintsWidget.js");
const changeRecorder_js_1 = require("../model/changeRecorder.js");
const inlineCompletionsModel_js_1 = require("../model/inlineCompletionsModel.js");
const suggestWidgetAdapter_js_1 = require("../model/suggestWidgetAdapter.js");
const utils_js_1 = require("../utils.js");
const commandIds_js_1 = require("./commandIds.js");
const inlineCompletionContextKeys_js_1 = require("./inlineCompletionContextKeys.js");
const inlineCompletionsView_js_1 = require("../view/inlineCompletionsView.js");
let InlineCompletionsController = class InlineCompletionsController extends lifecycle_js_1.Disposable {
    static { InlineCompletionsController_1 = this; }
    static { this.hot = (0, hotReloadHelpers_js_1.createHotClass)(InlineCompletionsController_1); }
    static { this.ID = 'editor.contrib.inlineCompletionsController'; }
    static get(editor) {
        return (0, wrapInHotClass_js_1.hotClassGetOriginalInstance)(editor.getContribution(InlineCompletionsController_1.ID));
    }
    constructor(editor, _instantiationService, _contextKeyService, _configurationService, _commandService, _debounceService, _languageFeaturesService, _accessibilitySignalService, _keybindingService, _accessibilityService) {
        super();
        this.editor = editor;
        this._instantiationService = _instantiationService;
        this._contextKeyService = _contextKeyService;
        this._configurationService = _configurationService;
        this._commandService = _commandService;
        this._debounceService = _debounceService;
        this._languageFeaturesService = _languageFeaturesService;
        this._accessibilitySignalService = _accessibilitySignalService;
        this._keybindingService = _keybindingService;
        this._accessibilityService = _accessibilityService;
        this._editorObs = (0, observableCodeEditor_js_1.observableCodeEditor)(this.editor);
        this._positions = (0, observable_js_1.derived)(this, reader => this._editorObs.selections.read(reader)?.map(s => s.getEndPosition()) ?? [new position_js_1.Position(1, 1)]);
        this._suggestWidgetAdapter = this._register(new suggestWidgetAdapter_js_1.ObservableSuggestWidgetAdapter(this._editorObs, item => this.model.get()?.handleSuggestAccepted(item), () => this.model.get()?.selectedInlineCompletion.get()?.toSingleTextEdit(undefined)));
        this._enabledInConfig = (0, observable_js_1.observableFromEvent)(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(64 /* EditorOption.inlineSuggest */).enabled);
        this._isScreenReaderEnabled = (0, observable_js_1.observableFromEvent)(this, this._accessibilityService.onDidChangeScreenReaderOptimized, () => this._accessibilityService.isScreenReaderOptimized());
        this._editorDictationInProgress = (0, observable_js_1.observableFromEvent)(this, this._contextKeyService.onDidChangeContext, () => this._contextKeyService.getContext(this.editor.getDomNode()).getValue('editorDictation.inProgress') === true);
        this._enabled = (0, observable_js_1.derived)(this, reader => this._enabledInConfig.read(reader) && (!this._isScreenReaderEnabled.read(reader) || !this._editorDictationInProgress.read(reader)));
        this._debounceValue = this._debounceService.for(this._languageFeaturesService.inlineCompletionsProvider, 'InlineCompletionsDebounce', { min: 50, max: 50 });
        this._cursorIsInIndentation = (0, observable_js_1.derived)(this, reader => {
            const cursorPos = this._editorObs.cursorPosition.read(reader);
            if (cursorPos === null) {
                return false;
            }
            const model = this._editorObs.model.read(reader);
            if (!model) {
                return false;
            }
            this._editorObs.versionId.read(reader);
            const indentMaxColumn = model.getLineIndentColumn(cursorPos.lineNumber);
            return cursorPos.column <= indentMaxColumn;
        });
        this.model = (0, observable_js_1.derivedDisposable)(this, reader => {
            if (this._editorObs.isReadonly.read(reader)) {
                return undefined;
            }
            const textModel = this._editorObs.model.read(reader);
            if (!textModel) {
                return undefined;
            }
            const model = this._instantiationService.createInstance(inlineCompletionsModel_js_1.InlineCompletionsModel, textModel, this._suggestWidgetAdapter.selectedItem, this._editorObs.versionId, this._positions, this._debounceValue, this._enabled, this.editor);
            return model;
        }).recomputeInitiallyAndOnChange(this._store);
        this._playAccessibilitySignal = (0, observable_js_1.observableSignal)(this);
        this._hideInlineEditOnSelectionChange = this._editorObs.getOption(64 /* EditorOption.inlineSuggest */).map(val => true);
        this._view = this._register(new inlineCompletionsView_js_1.InlineCompletionsView(this.editor, this.model, this._instantiationService));
        this._register((0, observable_js_1.runOnChange)(this._editorObs.onDidType, (_value, _changes) => {
            if (this._enabled.get()) {
                this.model.get()?.trigger();
            }
        }));
        this._register(this._commandService.onDidExecuteCommand((e) => {
            // These commands don't trigger onDidType.
            const commands = new Set([
                coreCommands_js_1.CoreEditingCommands.Tab.id,
                coreCommands_js_1.CoreEditingCommands.DeleteLeft.id,
                coreCommands_js_1.CoreEditingCommands.DeleteRight.id,
                commandIds_js_1.inlineSuggestCommitId,
                'acceptSelectedSuggestion',
            ]);
            if (commands.has(e.commandId) && editor.hasTextFocus() && this._enabled.get()) {
                this._editorObs.forceUpdate(tx => {
                    /** @description onDidExecuteCommand */
                    this.model.get()?.trigger(tx);
                });
            }
        }));
        this._register((0, observable_js_1.runOnChange)(this._editorObs.selections, (_value, _, changes) => {
            if (changes.some(e => e.reason === 3 /* CursorChangeReason.Explicit */ || e.source === 'api')) {
                if (!this._hideInlineEditOnSelectionChange.get() && this.model.get()?.state.get()?.kind === 'inlineEdit') {
                    return;
                }
                const m = this.model.get();
                if (!m) {
                    return;
                }
                if (m.state.get()?.kind === 'ghostText') {
                    this.model.get()?.stop();
                }
                else if (m.state.get()?.inlineCompletion) {
                    this.model.get()?.collapseInlineEdit();
                }
            }
        }));
        this._register(this.editor.onDidBlurEditorWidget(() => {
            // This is a hidden setting very useful for debugging
            if (this._contextKeyService.getContextKeyValue('accessibleViewIsShown')
                || this._configurationService.getValue('editor.inlineSuggest.keepOnBlur')
                || editor.getOption(64 /* EditorOption.inlineSuggest */).keepOnBlur
                || inlineCompletionsHintsWidget_js_1.InlineSuggestionHintsContentWidget.dropDownVisible) {
                return;
            }
            if (this.model.get()?.inlineEditAvailable.get()) {
                // dont hide inline edits on blur
                return;
            }
            (0, observable_js_1.transaction)(tx => {
                /** @description InlineCompletionsController.onDidBlurEditorWidget */
                this.model.get()?.stop('automatic', tx);
            });
        }));
        this._register((0, observable_js_1.autorun)(reader => {
            /** @description InlineCompletionsController.forceRenderingAbove */
            const state = this.model.read(reader)?.inlineCompletionState.read(reader);
            if (state?.suggestItem) {
                if (state.primaryGhostText.lineCount >= 2) {
                    this._suggestWidgetAdapter.forceRenderingAbove();
                }
            }
            else {
                this._suggestWidgetAdapter.stopForceRenderingAbove();
            }
        }));
        this._register((0, lifecycle_js_1.toDisposable)(() => {
            this._suggestWidgetAdapter.stopForceRenderingAbove();
        }));
        const currentInlineCompletionBySemanticId = (0, observable_js_1.derivedObservableWithCache)(this, (reader, last) => {
            const model = this.model.read(reader);
            const state = model?.inlineCompletionState.read(reader);
            if (this._suggestWidgetAdapter.selectedItem.get()) {
                return last;
            }
            return state?.inlineCompletion?.semanticId;
        });
        this._register((0, observable_js_1.runOnChangeWithStore)((0, observable_js_1.derived)(reader => {
            this._playAccessibilitySignal.read(reader);
            currentInlineCompletionBySemanticId.read(reader);
            return {};
        }), async (_value, _, _deltas, store) => {
            /** @description InlineCompletionsController.playAccessibilitySignalAndReadSuggestion */
            const model = this.model.get();
            const state = model?.inlineCompletionState.get();
            if (!state || !model) {
                return;
            }
            const lineText = model.textModel.getLineContent(state.primaryGhostText.lineNumber);
            await (0, async_js_1.timeout)(50, (0, cancellation_js_1.cancelOnDispose)(store));
            await (0, observable_js_1.waitForState)(this._suggestWidgetAdapter.selectedItem, types_js_1.isUndefined, () => false, (0, cancellation_js_1.cancelOnDispose)(store));
            await this._accessibilitySignalService.playSignal(accessibilitySignalService_js_1.AccessibilitySignal.inlineSuggestion);
            if (this.editor.getOption(8 /* EditorOption.screenReaderAnnounceInlineSuggestion */)) {
                this._provideScreenReaderUpdate(state.primaryGhostText.renderForScreenReader(lineText));
            }
        }));
        // TODO@hediet
        this._register(this._configurationService.onDidChangeConfiguration(e => {
            if (e.affectsConfiguration('accessibility.verbosity.inlineCompletions')) {
                this.editor.updateOptions({ inlineCompletionsAccessibilityVerbose: this._configurationService.getValue('accessibility.verbosity.inlineCompletions') });
            }
        }));
        this.editor.updateOptions({ inlineCompletionsAccessibilityVerbose: this._configurationService.getValue('accessibility.verbosity.inlineCompletions') });
        const contextKeySvcObs = new utils_js_1.ObservableContextKeyService(this._contextKeyService);
        this._register(contextKeySvcObs.bind(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.cursorInIndentation, this._cursorIsInIndentation));
        this._register(contextKeySvcObs.bind(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.hasSelection, reader => !this._editorObs.cursorSelection.read(reader)?.isEmpty()));
        this._register(contextKeySvcObs.bind(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.cursorAtInlineEdit, this.model.map((m, reader) => m?.inlineEditState?.read(reader)?.cursorAtInlineEdit)));
        this._register(contextKeySvcObs.bind(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.tabShouldAcceptInlineEdit, this.model.map((m, r) => !!m?.tabShouldAcceptInlineEdit.read(r))));
        this._register(contextKeySvcObs.bind(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.tabShouldJumpToInlineEdit, this.model.map((m, r) => !!m?.tabShouldJumpToInlineEdit.read(r))));
        this._register(contextKeySvcObs.bind(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineEditVisible, reader => this.model.read(reader)?.inlineEditState.read(reader) !== undefined));
        this._register(contextKeySvcObs.bind(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionHasIndentation, reader => this.model.read(reader)?.getIndentationInfo(reader)?.startsWithIndentation));
        this._register(contextKeySvcObs.bind(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize, reader => this.model.read(reader)?.getIndentationInfo(reader)?.startsWithIndentationLessThanTabSize));
        this._register(contextKeySvcObs.bind(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.suppressSuggestions, reader => {
            const model = this.model.read(reader);
            const state = model?.inlineCompletionState.read(reader);
            return state?.primaryGhostText && state?.inlineCompletion ? state.inlineCompletion.inlineCompletion.source.inlineCompletions.suppressSuggestions : undefined;
        }));
        this._register(contextKeySvcObs.bind(inlineCompletionContextKeys_js_1.InlineCompletionContextKeys.inlineSuggestionVisible, reader => {
            const model = this.model.read(reader);
            const state = model?.inlineCompletionState.read(reader);
            return !!state?.inlineCompletion && state?.primaryGhostText !== undefined && !state?.primaryGhostText.isEmpty();
        }));
        this._register(this._instantiationService.createInstance(changeRecorder_js_1.TextModelChangeRecorder, this.editor));
    }
    playAccessibilitySignal(tx) {
        this._playAccessibilitySignal.trigger(tx);
    }
    _provideScreenReaderUpdate(content) {
        const accessibleViewShowing = this._contextKeyService.getContextKeyValue('accessibleViewIsShown');
        const accessibleViewKeybinding = this._keybindingService.lookupKeybinding('editor.action.accessibleView');
        let hint;
        if (!accessibleViewShowing && accessibleViewKeybinding && this.editor.getOption(155 /* EditorOption.inlineCompletionsAccessibilityVerbose */)) {
            hint = (0, nls_js_1.localize)('showAccessibleViewHint', "Inspect this in the accessible view ({0})", accessibleViewKeybinding.getAriaLabel());
        }
        (0, aria_js_1.alert)(hint ? content + ', ' + hint : content);
    }
    shouldShowHoverAt(range) {
        const ghostText = this.model.get()?.primaryGhostText.get();
        if (!ghostText) {
            return false;
        }
        return ghostText.parts.some(p => range.containsPosition(new position_js_1.Position(ghostText.lineNumber, p.column)));
    }
    shouldShowHoverAtViewZone(viewZoneId) {
        return this._view.shouldShowHoverAtViewZone(viewZoneId);
    }
    reject() {
        (0, observable_js_1.transaction)(tx => {
            const m = this.model.get();
            if (m) {
                m.stop('explicitCancel', tx);
            }
        });
    }
    jump() {
        const m = this.model.get();
        if (m) {
            m.jump();
        }
    }
};
exports.InlineCompletionsController = InlineCompletionsController;
exports.InlineCompletionsController = InlineCompletionsController = InlineCompletionsController_1 = __decorate([
    __param(1, instantiation_js_1.IInstantiationService),
    __param(2, contextkey_js_1.IContextKeyService),
    __param(3, configuration_js_1.IConfigurationService),
    __param(4, commands_js_1.ICommandService),
    __param(5, languageFeatureDebounce_js_1.ILanguageFeatureDebounceService),
    __param(6, languageFeatures_js_1.ILanguageFeaturesService),
    __param(7, accessibilitySignalService_js_1.IAccessibilitySignalService),
    __param(8, keybinding_js_1.IKeybindingService),
    __param(9, accessibility_js_1.IAccessibilityService)
], InlineCompletionsController);
//# sourceMappingURL=inlineCompletionsController.js.map