"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineCompletionsView = void 0;
const domObservable_js_1 = require("../../../../../base/browser/domObservable.js");
const hotReloadHelpers_js_1 = require("../../../../../base/common/hotReloadHelpers.js");
const lifecycle_js_1 = require("../../../../../base/common/lifecycle.js");
const observable_js_1 = require("../../../../../base/common/observable.js");
const instantiation_js_1 = require("../../../../../platform/instantiation/common/instantiation.js");
const observableCodeEditor_js_1 = require("../../../../browser/observableCodeEditor.js");
const inlineCompletionsHintsWidget_js_1 = require("../hintsWidget/inlineCompletionsHintsWidget.js");
const utils_js_1 = require("../utils.js");
const ghostTextView_js_1 = require("./ghostText/ghostTextView.js");
const inlineEditsViewAndDiffProducer_js_1 = require("./inlineEdits/inlineEditsViewAndDiffProducer.js");
let InlineCompletionsView = class InlineCompletionsView extends lifecycle_js_1.Disposable {
    constructor(_editor, _model, _instantiationService) {
        super();
        this._editor = _editor;
        this._model = _model;
        this._instantiationService = _instantiationService;
        this._ghostTexts = (0, observable_js_1.derived)(this, (reader) => {
            const model = this._model.read(reader);
            return model?.ghostTexts.read(reader) ?? [];
        });
        this._stablizedGhostTexts = (0, utils_js_1.convertItemsToStableObservables)(this._ghostTexts, this._store);
        this._ghostTextWidgets = (0, observable_js_1.mapObservableArrayCached)(this, this._stablizedGhostTexts, (ghostText, store) => (0, observable_js_1.derivedDisposable)((reader) => this._instantiationService.createInstance((0, hotReloadHelpers_js_1.readHotReloadableExport)(ghostTextView_js_1.GhostTextView, reader), this._editor, {
            ghostText: ghostText,
            minReservedLineCount: (0, observable_js_1.constObservable)(0),
            targetTextModel: this._model.map(v => v?.textModel),
        })).recomputeInitiallyAndOnChange(store)).recomputeInitiallyAndOnChange(this._store);
        this._inlineEdit = (0, observable_js_1.derived)(this, reader => this._model.read(reader)?.inlineEditState.read(reader)?.inlineEdit);
        this._everHadInlineEdit = (0, observable_js_1.derivedObservableWithCache)(this, (reader, last) => last || !!this._inlineEdit.read(reader));
        this._inlineEditWidget = (0, observable_js_1.derivedDisposable)(reader => {
            if (!this._everHadInlineEdit.read(reader)) {
                return undefined;
            }
            return this._instantiationService.createInstance(inlineEditsViewAndDiffProducer_js_1.InlineEditsViewAndDiffProducer.hot.read(reader), this._editor, this._inlineEdit, this._model);
        })
            .recomputeInitiallyAndOnChange(this._store);
        this._editorObs = (0, observableCodeEditor_js_1.observableCodeEditor)(this._editor);
        this._fontFamily = this._editorObs.getOption(64 /* EditorOption.inlineSuggest */).map(val => val.fontFamily);
        this._register((0, domObservable_js_1.createStyleSheetFromObservable)((0, observable_js_1.derived)(reader => {
            const fontFamily = this._fontFamily.read(reader);
            if (fontFamily === '' || fontFamily === 'default') {
                return '';
            }
            return `
.monaco-editor .ghost-text-decoration,
.monaco-editor .ghost-text-decoration-preview,
.monaco-editor .ghost-text {
	font-family: ${fontFamily};
}`;
        })));
        this._register(new inlineCompletionsHintsWidget_js_1.InlineCompletionsHintsWidget(this._editor, this._model, this._instantiationService));
    }
    shouldShowHoverAtViewZone(viewZoneId) {
        return this._ghostTextWidgets.get()[0]?.get().ownsViewZone(viewZoneId) ?? false;
    }
};
exports.InlineCompletionsView = InlineCompletionsView;
exports.InlineCompletionsView = InlineCompletionsView = __decorate([
    __param(2, instantiation_js_1.IInstantiationService)
], InlineCompletionsView);
//# sourceMappingURL=inlineCompletionsView.js.map