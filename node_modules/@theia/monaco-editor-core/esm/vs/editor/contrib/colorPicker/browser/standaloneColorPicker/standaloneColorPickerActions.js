"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsertColorWithStandaloneColorPicker = exports.HideStandaloneColorPicker = exports.ShowOrFocusStandaloneColorPicker = void 0;
const editorExtensions_js_1 = require("../../../../browser/editorExtensions.js");
const nls_js_1 = require("../../../../../nls.js");
const editorContextKeys_js_1 = require("../../../../common/editorContextKeys.js");
const actions_js_1 = require("../../../../../platform/actions/common/actions.js");
const standaloneColorPickerController_js_1 = require("./standaloneColorPickerController.js");
class ShowOrFocusStandaloneColorPicker extends editorExtensions_js_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.showOrFocusStandaloneColorPicker',
            title: {
                ...(0, nls_js_1.localize2)('showOrFocusStandaloneColorPicker', "Show or Focus Standalone Color Picker"),
                mnemonicTitle: (0, nls_js_1.localize)({ key: 'mishowOrFocusStandaloneColorPicker', comment: ['&& denotes a mnemonic'] }, "&&Show or Focus Standalone Color Picker"),
            },
            precondition: undefined,
            menu: [
                { id: actions_js_1.MenuId.CommandPalette },
            ],
            metadata: {
                description: (0, nls_js_1.localize2)('showOrFocusStandaloneColorPickerDescription', "Show or focus a standalone color picker which uses the default color provider. It displays hex/rgb/hsl colors."),
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        standaloneColorPickerController_js_1.StandaloneColorPickerController.get(editor)?.showOrFocus();
    }
}
exports.ShowOrFocusStandaloneColorPicker = ShowOrFocusStandaloneColorPicker;
class HideStandaloneColorPicker extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.hideColorPicker',
            label: (0, nls_js_1.localize2)({
                key: 'hideColorPicker',
                comment: [
                    'Action that hides the color picker'
                ]
            }, "Hide the Color Picker"),
            precondition: editorContextKeys_js_1.EditorContextKeys.standaloneColorPickerVisible.isEqualTo(true),
            kbOpts: {
                primary: 9 /* KeyCode.Escape */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            },
            metadata: {
                description: (0, nls_js_1.localize2)('hideColorPickerDescription', "Hide the standalone color picker."),
            }
        });
    }
    run(_accessor, editor) {
        standaloneColorPickerController_js_1.StandaloneColorPickerController.get(editor)?.hide();
    }
}
exports.HideStandaloneColorPicker = HideStandaloneColorPicker;
class InsertColorWithStandaloneColorPicker extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.insertColorWithStandaloneColorPicker',
            label: (0, nls_js_1.localize2)({
                key: 'insertColorWithStandaloneColorPicker',
                comment: [
                    'Action that inserts color with standalone color picker'
                ]
            }, "Insert Color with Standalone Color Picker"),
            precondition: editorContextKeys_js_1.EditorContextKeys.standaloneColorPickerFocused.isEqualTo(true),
            kbOpts: {
                primary: 3 /* KeyCode.Enter */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            },
            metadata: {
                description: (0, nls_js_1.localize2)('insertColorWithStandaloneColorPickerDescription', "Insert hex/rgb/hsl colors with the focused standalone color picker."),
            }
        });
    }
    run(_accessor, editor) {
        standaloneColorPickerController_js_1.StandaloneColorPickerController.get(editor)?.insertColor();
    }
}
exports.InsertColorWithStandaloneColorPicker = InsertColorWithStandaloneColorPicker;
//# sourceMappingURL=standaloneColorPickerActions.js.map