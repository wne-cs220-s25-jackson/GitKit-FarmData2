"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoFixAction = exports.FixAllAction = exports.OrganizeImportsAction = exports.SourceAction = exports.RefactorAction = exports.CodeActionCommand = exports.QuickFixAction = void 0;
const hierarchicalKind_js_1 = require("../../../../base/common/hierarchicalKind.js");
const strings_js_1 = require("../../../../base/common/strings.js");
const editorExtensions_js_1 = require("../../../browser/editorExtensions.js");
const editorContextKeys_js_1 = require("../../../common/editorContextKeys.js");
const codeAction_js_1 = require("./codeAction.js");
const nls = require("../../../../nls.js");
const contextkey_js_1 = require("../../../../platform/contextkey/common/contextkey.js");
const types_js_1 = require("../common/types.js");
const codeActionController_js_1 = require("./codeActionController.js");
const codeActionModel_js_1 = require("./codeActionModel.js");
function contextKeyForSupportedActions(kind) {
    return contextkey_js_1.ContextKeyExpr.regex(codeActionModel_js_1.SUPPORTED_CODE_ACTIONS.keys()[0], new RegExp('(\\s|^)' + (0, strings_js_1.escapeRegExpCharacters)(kind.value) + '\\b'));
}
const argsSchema = {
    type: 'object',
    defaultSnippets: [{ body: { kind: '' } }],
    properties: {
        'kind': {
            type: 'string',
            description: nls.localize('args.schema.kind', "Kind of the code action to run."),
        },
        'apply': {
            type: 'string',
            description: nls.localize('args.schema.apply', "Controls when the returned actions are applied."),
            default: "ifSingle" /* CodeActionAutoApply.IfSingle */,
            enum: ["first" /* CodeActionAutoApply.First */, "ifSingle" /* CodeActionAutoApply.IfSingle */, "never" /* CodeActionAutoApply.Never */],
            enumDescriptions: [
                nls.localize('args.schema.apply.first', "Always apply the first returned code action."),
                nls.localize('args.schema.apply.ifSingle', "Apply the first returned code action if it is the only one."),
                nls.localize('args.schema.apply.never', "Do not apply the returned code actions."),
            ]
        },
        'preferred': {
            type: 'boolean',
            default: false,
            description: nls.localize('args.schema.preferred', "Controls if only preferred code actions should be returned."),
        }
    }
};
function triggerCodeActionsForEditorSelection(editor, notAvailableMessage, filter, autoApply, triggerAction = types_js_1.CodeActionTriggerSource.Default) {
    if (editor.hasModel()) {
        const controller = codeActionController_js_1.CodeActionController.get(editor);
        controller?.manualTriggerAtCurrentPosition(notAvailableMessage, triggerAction, filter, autoApply);
    }
}
class QuickFixAction extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: codeAction_js_1.quickFixCommandId,
            label: nls.localize2('quickfix.trigger.label', "Quick Fix..."),
            precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, editorContextKeys_js_1.EditorContextKeys.hasCodeActionsProvider),
            kbOpts: {
                kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            }
        });
    }
    run(_accessor, editor) {
        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', "No code actions available"), undefined, undefined, types_js_1.CodeActionTriggerSource.QuickFix);
    }
}
exports.QuickFixAction = QuickFixAction;
class CodeActionCommand extends editorExtensions_js_1.EditorCommand {
    constructor() {
        super({
            id: codeAction_js_1.codeActionCommandId,
            precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, editorContextKeys_js_1.EditorContextKeys.hasCodeActionsProvider),
            metadata: {
                description: 'Trigger a code action',
                args: [{ name: 'args', schema: argsSchema, }]
            }
        });
    }
    runEditorCommand(_accessor, editor, userArgs) {
        const args = types_js_1.CodeActionCommandArgs.fromUser(userArgs, {
            kind: hierarchicalKind_js_1.HierarchicalKind.Empty,
            apply: "ifSingle" /* CodeActionAutoApply.IfSingle */,
        });
        return triggerCodeActionsForEditorSelection(editor, typeof userArgs?.kind === 'string'
            ? args.preferred
                ? nls.localize('editor.action.codeAction.noneMessage.preferred.kind', "No preferred code actions for '{0}' available", userArgs.kind)
                : nls.localize('editor.action.codeAction.noneMessage.kind', "No code actions for '{0}' available", userArgs.kind)
            : args.preferred
                ? nls.localize('editor.action.codeAction.noneMessage.preferred', "No preferred code actions available")
                : nls.localize('editor.action.codeAction.noneMessage', "No code actions available"), {
            include: args.kind,
            includeSourceActions: true,
            onlyIncludePreferredActions: args.preferred,
        }, args.apply);
    }
}
exports.CodeActionCommand = CodeActionCommand;
class RefactorAction extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: codeAction_js_1.refactorCommandId,
            label: nls.localize2('refactor.label', "Refactor..."),
            precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, editorContextKeys_js_1.EditorContextKeys.hasCodeActionsProvider),
            kbOpts: {
                kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */,
                mac: {
                    primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */
                },
                weight: 100 /* KeybindingWeight.EditorContrib */
            },
            contextMenuOpts: {
                group: '1_modification',
                order: 2,
                when: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, contextKeyForSupportedActions(types_js_1.CodeActionKind.Refactor)),
            },
            metadata: {
                description: 'Refactor...',
                args: [{ name: 'args', schema: argsSchema }]
            }
        });
    }
    run(_accessor, editor, userArgs) {
        const args = types_js_1.CodeActionCommandArgs.fromUser(userArgs, {
            kind: types_js_1.CodeActionKind.Refactor,
            apply: "never" /* CodeActionAutoApply.Never */
        });
        return triggerCodeActionsForEditorSelection(editor, typeof userArgs?.kind === 'string'
            ? args.preferred
                ? nls.localize('editor.action.refactor.noneMessage.preferred.kind', "No preferred refactorings for '{0}' available", userArgs.kind)
                : nls.localize('editor.action.refactor.noneMessage.kind', "No refactorings for '{0}' available", userArgs.kind)
            : args.preferred
                ? nls.localize('editor.action.refactor.noneMessage.preferred', "No preferred refactorings available")
                : nls.localize('editor.action.refactor.noneMessage', "No refactorings available"), {
            include: types_js_1.CodeActionKind.Refactor.contains(args.kind) ? args.kind : hierarchicalKind_js_1.HierarchicalKind.None,
            onlyIncludePreferredActions: args.preferred
        }, args.apply, types_js_1.CodeActionTriggerSource.Refactor);
    }
}
exports.RefactorAction = RefactorAction;
class SourceAction extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: codeAction_js_1.sourceActionCommandId,
            label: nls.localize2('source.label', "Source Action..."),
            precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, editorContextKeys_js_1.EditorContextKeys.hasCodeActionsProvider),
            contextMenuOpts: {
                group: '1_modification',
                order: 2.1,
                when: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, contextKeyForSupportedActions(types_js_1.CodeActionKind.Source)),
            },
            metadata: {
                description: 'Source Action...',
                args: [{ name: 'args', schema: argsSchema }]
            }
        });
    }
    run(_accessor, editor, userArgs) {
        const args = types_js_1.CodeActionCommandArgs.fromUser(userArgs, {
            kind: types_js_1.CodeActionKind.Source,
            apply: "never" /* CodeActionAutoApply.Never */
        });
        return triggerCodeActionsForEditorSelection(editor, typeof userArgs?.kind === 'string'
            ? args.preferred
                ? nls.localize('editor.action.source.noneMessage.preferred.kind', "No preferred source actions for '{0}' available", userArgs.kind)
                : nls.localize('editor.action.source.noneMessage.kind', "No source actions for '{0}' available", userArgs.kind)
            : args.preferred
                ? nls.localize('editor.action.source.noneMessage.preferred', "No preferred source actions available")
                : nls.localize('editor.action.source.noneMessage', "No source actions available"), {
            include: types_js_1.CodeActionKind.Source.contains(args.kind) ? args.kind : hierarchicalKind_js_1.HierarchicalKind.None,
            includeSourceActions: true,
            onlyIncludePreferredActions: args.preferred,
        }, args.apply, types_js_1.CodeActionTriggerSource.SourceAction);
    }
}
exports.SourceAction = SourceAction;
class OrganizeImportsAction extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: codeAction_js_1.organizeImportsCommandId,
            label: nls.localize2('organizeImports.label', "Organize Imports"),
            precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, contextKeyForSupportedActions(types_js_1.CodeActionKind.SourceOrganizeImports)),
            kbOpts: {
                kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 45 /* KeyCode.KeyO */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            },
            metadata: {
                description: nls.localize2('organizeImports.description', "Organize imports in the current file. Also called 'Optimize Imports' by some tools")
            }
        });
    }
    run(_accessor, editor) {
        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.organize.noneMessage', "No organize imports action available"), { include: types_js_1.CodeActionKind.SourceOrganizeImports, includeSourceActions: true }, "ifSingle" /* CodeActionAutoApply.IfSingle */, types_js_1.CodeActionTriggerSource.OrganizeImports);
    }
}
exports.OrganizeImportsAction = OrganizeImportsAction;
class FixAllAction extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: codeAction_js_1.fixAllCommandId,
            label: nls.localize2('fixAll.label', "Fix All"),
            precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, contextKeyForSupportedActions(types_js_1.CodeActionKind.SourceFixAll))
        });
    }
    run(_accessor, editor) {
        return triggerCodeActionsForEditorSelection(editor, nls.localize('fixAll.noneMessage', "No fix all action available"), { include: types_js_1.CodeActionKind.SourceFixAll, includeSourceActions: true }, "ifSingle" /* CodeActionAutoApply.IfSingle */, types_js_1.CodeActionTriggerSource.FixAll);
    }
}
exports.FixAllAction = FixAllAction;
class AutoFixAction extends editorExtensions_js_1.EditorAction {
    constructor() {
        super({
            id: codeAction_js_1.autoFixCommandId,
            label: nls.localize2('autoFix.label', "Auto Fix..."),
            precondition: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.writable, contextKeyForSupportedActions(types_js_1.CodeActionKind.QuickFix)),
            kbOpts: {
                kbExpr: editorContextKeys_js_1.EditorContextKeys.textInputFocus,
                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 89 /* KeyCode.Period */,
                mac: {
                    primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 89 /* KeyCode.Period */
                },
                weight: 100 /* KeybindingWeight.EditorContrib */
            }
        });
    }
    run(_accessor, editor) {
        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.autoFix.noneMessage', "No auto fixes available"), {
            include: types_js_1.CodeActionKind.QuickFix,
            onlyIncludePreferredActions: true
        }, "ifSingle" /* CodeActionAutoApply.IfSingle */, types_js_1.CodeActionTriggerSource.AutoFix);
    }
}
exports.AutoFixAction = AutoFixAction;
//# sourceMappingURL=codeActionCommands.js.map