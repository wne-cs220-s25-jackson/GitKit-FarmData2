"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefinitionsAtPosition = getDefinitionsAtPosition;
exports.getDeclarationsAtPosition = getDeclarationsAtPosition;
exports.getImplementationsAtPosition = getImplementationsAtPosition;
exports.getTypeDefinitionsAtPosition = getTypeDefinitionsAtPosition;
exports.getReferencesAtPosition = getReferencesAtPosition;
const arrays_js_1 = require("../../../../base/common/arrays.js");
const cancellation_js_1 = require("../../../../base/common/cancellation.js");
const errors_js_1 = require("../../../../base/common/errors.js");
const network_js_1 = require("../../../../base/common/network.js");
const editorExtensions_js_1 = require("../../../browser/editorExtensions.js");
const languageFeatures_js_1 = require("../../../common/services/languageFeatures.js");
const referencesModel_js_1 = require("./referencesModel.js");
function shouldIncludeLocationLink(sourceModel, loc) {
    // Always allow the location if the request comes from a document with the same scheme.
    if (loc.uri.scheme === sourceModel.uri.scheme) {
        return true;
    }
    // Otherwise filter out locations from internal schemes
    if ((0, network_js_1.matchesSomeScheme)(loc.uri, network_js_1.Schemas.walkThroughSnippet, network_js_1.Schemas.vscodeChatCodeBlock, network_js_1.Schemas.vscodeChatCodeCompareBlock)) {
        return false;
    }
    return true;
}
async function getLocationLinks(model, position, registry, recursive, provide) {
    const provider = registry.ordered(model, recursive);
    // get results
    const promises = provider.map((provider) => {
        return Promise.resolve(provide(provider, model, position)).then(undefined, err => {
            (0, errors_js_1.onUnexpectedExternalError)(err);
            return undefined;
        });
    });
    const values = await Promise.all(promises);
    return (0, arrays_js_1.coalesce)(values.flat()).filter(loc => shouldIncludeLocationLink(model, loc));
}
function getDefinitionsAtPosition(registry, model, position, recursive, token) {
    return getLocationLinks(model, position, registry, recursive, (provider, model, position) => {
        return provider.provideDefinition(model, position, token);
    });
}
function getDeclarationsAtPosition(registry, model, position, recursive, token) {
    return getLocationLinks(model, position, registry, recursive, (provider, model, position) => {
        return provider.provideDeclaration(model, position, token);
    });
}
function getImplementationsAtPosition(registry, model, position, recursive, token) {
    return getLocationLinks(model, position, registry, recursive, (provider, model, position) => {
        return provider.provideImplementation(model, position, token);
    });
}
function getTypeDefinitionsAtPosition(registry, model, position, recursive, token) {
    return getLocationLinks(model, position, registry, recursive, (provider, model, position) => {
        return provider.provideTypeDefinition(model, position, token);
    });
}
function getReferencesAtPosition(registry, model, position, compact, recursive, token) {
    return getLocationLinks(model, position, registry, recursive, async (provider, model, position) => {
        const result = (await provider.provideReferences(model, position, { includeDeclaration: true }, token))?.filter(ref => shouldIncludeLocationLink(model, ref));
        if (!compact || !result || result.length !== 2) {
            return result;
        }
        const resultWithoutDeclaration = (await provider.provideReferences(model, position, { includeDeclaration: false }, token))?.filter(ref => shouldIncludeLocationLink(model, ref));
        if (resultWithoutDeclaration && resultWithoutDeclaration.length === 1) {
            return resultWithoutDeclaration;
        }
        return result;
    });
}
// -- API commands ----
async function _sortedAndDeduped(callback) {
    const rawLinks = await callback();
    const model = new referencesModel_js_1.ReferencesModel(rawLinks, '');
    const modelLinks = model.references.map(ref => ref.link);
    model.dispose();
    return modelLinks;
}
(0, editorExtensions_js_1.registerModelAndPositionCommand)('_executeDefinitionProvider', (accessor, model, position) => {
    const languageFeaturesService = accessor.get(languageFeatures_js_1.ILanguageFeaturesService);
    const promise = getDefinitionsAtPosition(languageFeaturesService.definitionProvider, model, position, false, cancellation_js_1.CancellationToken.None);
    return _sortedAndDeduped(() => promise);
});
(0, editorExtensions_js_1.registerModelAndPositionCommand)('_executeDefinitionProvider_recursive', (accessor, model, position) => {
    const languageFeaturesService = accessor.get(languageFeatures_js_1.ILanguageFeaturesService);
    const promise = getDefinitionsAtPosition(languageFeaturesService.definitionProvider, model, position, true, cancellation_js_1.CancellationToken.None);
    return _sortedAndDeduped(() => promise);
});
(0, editorExtensions_js_1.registerModelAndPositionCommand)('_executeTypeDefinitionProvider', (accessor, model, position) => {
    const languageFeaturesService = accessor.get(languageFeatures_js_1.ILanguageFeaturesService);
    const promise = getTypeDefinitionsAtPosition(languageFeaturesService.typeDefinitionProvider, model, position, false, cancellation_js_1.CancellationToken.None);
    return _sortedAndDeduped(() => promise);
});
(0, editorExtensions_js_1.registerModelAndPositionCommand)('_executeTypeDefinitionProvider_recursive', (accessor, model, position) => {
    const languageFeaturesService = accessor.get(languageFeatures_js_1.ILanguageFeaturesService);
    const promise = getTypeDefinitionsAtPosition(languageFeaturesService.typeDefinitionProvider, model, position, true, cancellation_js_1.CancellationToken.None);
    return _sortedAndDeduped(() => promise);
});
(0, editorExtensions_js_1.registerModelAndPositionCommand)('_executeDeclarationProvider', (accessor, model, position) => {
    const languageFeaturesService = accessor.get(languageFeatures_js_1.ILanguageFeaturesService);
    const promise = getDeclarationsAtPosition(languageFeaturesService.declarationProvider, model, position, false, cancellation_js_1.CancellationToken.None);
    return _sortedAndDeduped(() => promise);
});
(0, editorExtensions_js_1.registerModelAndPositionCommand)('_executeDeclarationProvider_recursive', (accessor, model, position) => {
    const languageFeaturesService = accessor.get(languageFeatures_js_1.ILanguageFeaturesService);
    const promise = getDeclarationsAtPosition(languageFeaturesService.declarationProvider, model, position, true, cancellation_js_1.CancellationToken.None);
    return _sortedAndDeduped(() => promise);
});
(0, editorExtensions_js_1.registerModelAndPositionCommand)('_executeReferenceProvider', (accessor, model, position) => {
    const languageFeaturesService = accessor.get(languageFeatures_js_1.ILanguageFeaturesService);
    const promise = getReferencesAtPosition(languageFeaturesService.referenceProvider, model, position, false, false, cancellation_js_1.CancellationToken.None);
    return _sortedAndDeduped(() => promise);
});
(0, editorExtensions_js_1.registerModelAndPositionCommand)('_executeReferenceProvider_recursive', (accessor, model, position) => {
    const languageFeaturesService = accessor.get(languageFeatures_js_1.ILanguageFeaturesService);
    const promise = getReferencesAtPosition(languageFeaturesService.referenceProvider, model, position, false, true, cancellation_js_1.CancellationToken.None);
    return _sortedAndDeduped(() => promise);
});
(0, editorExtensions_js_1.registerModelAndPositionCommand)('_executeImplementationProvider', (accessor, model, position) => {
    const languageFeaturesService = accessor.get(languageFeatures_js_1.ILanguageFeaturesService);
    const promise = getImplementationsAtPosition(languageFeaturesService.implementationProvider, model, position, false, cancellation_js_1.CancellationToken.None);
    return _sortedAndDeduped(() => promise);
});
(0, editorExtensions_js_1.registerModelAndPositionCommand)('_executeImplementationProvider_recursive', (accessor, model, position) => {
    const languageFeaturesService = accessor.get(languageFeatures_js_1.ILanguageFeaturesService);
    const promise = getImplementationsAtPosition(languageFeaturesService.implementationProvider, model, position, true, cancellation_js_1.CancellationToken.None);
    return _sortedAndDeduped(() => promise);
});
//# sourceMappingURL=goToSymbol.js.map