"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineEditTriggerKind = exports.ExternalUriOpenerPriority = exports.TreeSitterTokenizationRegistry = exports.TokenizationRegistry = exports.LazyTokenizationSupport = exports.InlayHintKind = exports.CommentState = exports.CommentMode = exports.CommentThreadApplicability = exports.CommentThreadState = exports.CommentThreadCollapsibleState = exports.Command = exports.NewSymbolNameTriggerKind = exports.NewSymbolNameTag = exports.FoldingRangeKind = exports.TextEdit = exports.SymbolKinds = exports.symbolKindNames = exports.DocumentHighlightKind = exports.SignatureHelpTriggerKind = exports.DocumentPasteTriggerKind = exports.SelectedSuggestionInfo = exports.InlineCompletionTriggerKind = exports.CompletionItemKinds = exports.HoverVerbosityAction = exports.EncodedTokenizationResult = exports.TokenizationResult = exports.Token = void 0;
exports.isLocationLink = isLocationLink;
exports.isLocation = isLocation;
exports.getAriaLabelForSymbol = getAriaLabelForSymbol;
const codicons_js_1 = require("../../base/common/codicons.js");
const uri_js_1 = require("../../base/common/uri.js");
const editOperation_js_1 = require("./core/editOperation.js");
const range_js_1 = require("./core/range.js");
const tokenizationRegistry_js_1 = require("./tokenizationRegistry.js");
const nls_js_1 = require("../../nls.js");
class Token {
    constructor(offset, type, language) {
        this.offset = offset;
        this.type = type;
        this.language = language;
        this._tokenBrand = undefined;
    }
    toString() {
        return '(' + this.offset + ', ' + this.type + ')';
    }
}
exports.Token = Token;
/**
 * @internal
 */
class TokenizationResult {
    constructor(tokens, endState) {
        this.tokens = tokens;
        this.endState = endState;
        this._tokenizationResultBrand = undefined;
    }
}
exports.TokenizationResult = TokenizationResult;
/**
 * @internal
 */
class EncodedTokenizationResult {
    constructor(
    /**
     * The tokens in binary format. Each token occupies two array indices. For token i:
     *  - at offset 2*i => startIndex
     *  - at offset 2*i + 1 => metadata
     *
     */
    tokens, endState) {
        this.tokens = tokens;
        this.endState = endState;
        this._encodedTokenizationResultBrand = undefined;
    }
}
exports.EncodedTokenizationResult = EncodedTokenizationResult;
var HoverVerbosityAction;
(function (HoverVerbosityAction) {
    /**
     * Increase the verbosity of the hover
     */
    HoverVerbosityAction[HoverVerbosityAction["Increase"] = 0] = "Increase";
    /**
     * Decrease the verbosity of the hover
     */
    HoverVerbosityAction[HoverVerbosityAction["Decrease"] = 1] = "Decrease";
})(HoverVerbosityAction || (exports.HoverVerbosityAction = HoverVerbosityAction = {}));
/**
 * @internal
 */
var CompletionItemKinds;
(function (CompletionItemKinds) {
    const byKind = new Map();
    byKind.set(0 /* CompletionItemKind.Method */, codicons_js_1.Codicon.symbolMethod);
    byKind.set(1 /* CompletionItemKind.Function */, codicons_js_1.Codicon.symbolFunction);
    byKind.set(2 /* CompletionItemKind.Constructor */, codicons_js_1.Codicon.symbolConstructor);
    byKind.set(3 /* CompletionItemKind.Field */, codicons_js_1.Codicon.symbolField);
    byKind.set(4 /* CompletionItemKind.Variable */, codicons_js_1.Codicon.symbolVariable);
    byKind.set(5 /* CompletionItemKind.Class */, codicons_js_1.Codicon.symbolClass);
    byKind.set(6 /* CompletionItemKind.Struct */, codicons_js_1.Codicon.symbolStruct);
    byKind.set(7 /* CompletionItemKind.Interface */, codicons_js_1.Codicon.symbolInterface);
    byKind.set(8 /* CompletionItemKind.Module */, codicons_js_1.Codicon.symbolModule);
    byKind.set(9 /* CompletionItemKind.Property */, codicons_js_1.Codicon.symbolProperty);
    byKind.set(10 /* CompletionItemKind.Event */, codicons_js_1.Codicon.symbolEvent);
    byKind.set(11 /* CompletionItemKind.Operator */, codicons_js_1.Codicon.symbolOperator);
    byKind.set(12 /* CompletionItemKind.Unit */, codicons_js_1.Codicon.symbolUnit);
    byKind.set(13 /* CompletionItemKind.Value */, codicons_js_1.Codicon.symbolValue);
    byKind.set(15 /* CompletionItemKind.Enum */, codicons_js_1.Codicon.symbolEnum);
    byKind.set(14 /* CompletionItemKind.Constant */, codicons_js_1.Codicon.symbolConstant);
    byKind.set(15 /* CompletionItemKind.Enum */, codicons_js_1.Codicon.symbolEnum);
    byKind.set(16 /* CompletionItemKind.EnumMember */, codicons_js_1.Codicon.symbolEnumMember);
    byKind.set(17 /* CompletionItemKind.Keyword */, codicons_js_1.Codicon.symbolKeyword);
    byKind.set(27 /* CompletionItemKind.Snippet */, codicons_js_1.Codicon.symbolSnippet);
    byKind.set(18 /* CompletionItemKind.Text */, codicons_js_1.Codicon.symbolText);
    byKind.set(19 /* CompletionItemKind.Color */, codicons_js_1.Codicon.symbolColor);
    byKind.set(20 /* CompletionItemKind.File */, codicons_js_1.Codicon.symbolFile);
    byKind.set(21 /* CompletionItemKind.Reference */, codicons_js_1.Codicon.symbolReference);
    byKind.set(22 /* CompletionItemKind.Customcolor */, codicons_js_1.Codicon.symbolCustomColor);
    byKind.set(23 /* CompletionItemKind.Folder */, codicons_js_1.Codicon.symbolFolder);
    byKind.set(24 /* CompletionItemKind.TypeParameter */, codicons_js_1.Codicon.symbolTypeParameter);
    byKind.set(25 /* CompletionItemKind.User */, codicons_js_1.Codicon.account);
    byKind.set(26 /* CompletionItemKind.Issue */, codicons_js_1.Codicon.issues);
    /**
     * @internal
     */
    function toIcon(kind) {
        let codicon = byKind.get(kind);
        if (!codicon) {
            console.info('No codicon found for CompletionItemKind ' + kind);
            codicon = codicons_js_1.Codicon.symbolProperty;
        }
        return codicon;
    }
    CompletionItemKinds.toIcon = toIcon;
    const data = new Map();
    data.set('method', 0 /* CompletionItemKind.Method */);
    data.set('function', 1 /* CompletionItemKind.Function */);
    data.set('constructor', 2 /* CompletionItemKind.Constructor */);
    data.set('field', 3 /* CompletionItemKind.Field */);
    data.set('variable', 4 /* CompletionItemKind.Variable */);
    data.set('class', 5 /* CompletionItemKind.Class */);
    data.set('struct', 6 /* CompletionItemKind.Struct */);
    data.set('interface', 7 /* CompletionItemKind.Interface */);
    data.set('module', 8 /* CompletionItemKind.Module */);
    data.set('property', 9 /* CompletionItemKind.Property */);
    data.set('event', 10 /* CompletionItemKind.Event */);
    data.set('operator', 11 /* CompletionItemKind.Operator */);
    data.set('unit', 12 /* CompletionItemKind.Unit */);
    data.set('value', 13 /* CompletionItemKind.Value */);
    data.set('constant', 14 /* CompletionItemKind.Constant */);
    data.set('enum', 15 /* CompletionItemKind.Enum */);
    data.set('enum-member', 16 /* CompletionItemKind.EnumMember */);
    data.set('enumMember', 16 /* CompletionItemKind.EnumMember */);
    data.set('keyword', 17 /* CompletionItemKind.Keyword */);
    data.set('snippet', 27 /* CompletionItemKind.Snippet */);
    data.set('text', 18 /* CompletionItemKind.Text */);
    data.set('color', 19 /* CompletionItemKind.Color */);
    data.set('file', 20 /* CompletionItemKind.File */);
    data.set('reference', 21 /* CompletionItemKind.Reference */);
    data.set('customcolor', 22 /* CompletionItemKind.Customcolor */);
    data.set('folder', 23 /* CompletionItemKind.Folder */);
    data.set('type-parameter', 24 /* CompletionItemKind.TypeParameter */);
    data.set('typeParameter', 24 /* CompletionItemKind.TypeParameter */);
    data.set('account', 25 /* CompletionItemKind.User */);
    data.set('issue', 26 /* CompletionItemKind.Issue */);
    /**
     * @internal
     */
    function fromString(value, strict) {
        let res = data.get(value);
        if (typeof res === 'undefined' && !strict) {
            res = 9 /* CompletionItemKind.Property */;
        }
        return res;
    }
    CompletionItemKinds.fromString = fromString;
})(CompletionItemKinds || (exports.CompletionItemKinds = CompletionItemKinds = {}));
/**
 * How an {@link InlineCompletionsProvider inline completion provider} was triggered.
 */
var InlineCompletionTriggerKind;
(function (InlineCompletionTriggerKind) {
    /**
     * Completion was triggered automatically while editing.
     * It is sufficient to return a single completion item in this case.
     */
    InlineCompletionTriggerKind[InlineCompletionTriggerKind["Automatic"] = 0] = "Automatic";
    /**
     * Completion was triggered explicitly by a user gesture.
     * Return multiple completion items to enable cycling through them.
     */
    InlineCompletionTriggerKind[InlineCompletionTriggerKind["Explicit"] = 1] = "Explicit";
})(InlineCompletionTriggerKind || (exports.InlineCompletionTriggerKind = InlineCompletionTriggerKind = {}));
class SelectedSuggestionInfo {
    constructor(range, text, completionKind, isSnippetText) {
        this.range = range;
        this.text = text;
        this.completionKind = completionKind;
        this.isSnippetText = isSnippetText;
    }
    equals(other) {
        return range_js_1.Range.lift(this.range).equalsRange(other.range)
            && this.text === other.text
            && this.completionKind === other.completionKind
            && this.isSnippetText === other.isSnippetText;
    }
}
exports.SelectedSuggestionInfo = SelectedSuggestionInfo;
/**
 * @internal
 */
var DocumentPasteTriggerKind;
(function (DocumentPasteTriggerKind) {
    DocumentPasteTriggerKind[DocumentPasteTriggerKind["Automatic"] = 0] = "Automatic";
    DocumentPasteTriggerKind[DocumentPasteTriggerKind["PasteAs"] = 1] = "PasteAs";
})(DocumentPasteTriggerKind || (exports.DocumentPasteTriggerKind = DocumentPasteTriggerKind = {}));
var SignatureHelpTriggerKind;
(function (SignatureHelpTriggerKind) {
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["Invoke"] = 1] = "Invoke";
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["TriggerCharacter"] = 2] = "TriggerCharacter";
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["ContentChange"] = 3] = "ContentChange";
})(SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = SignatureHelpTriggerKind = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind[DocumentHighlightKind["Text"] = 0] = "Text";
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind[DocumentHighlightKind["Read"] = 1] = "Read";
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind[DocumentHighlightKind["Write"] = 2] = "Write";
})(DocumentHighlightKind || (exports.DocumentHighlightKind = DocumentHighlightKind = {}));
/**
 * @internal
 */
function isLocationLink(thing) {
    return thing
        && uri_js_1.URI.isUri(thing.uri)
        && range_js_1.Range.isIRange(thing.range)
        && (range_js_1.Range.isIRange(thing.originSelectionRange) || range_js_1.Range.isIRange(thing.targetSelectionRange));
}
/**
 * @internal
 */
function isLocation(thing) {
    return thing
        && uri_js_1.URI.isUri(thing.uri)
        && range_js_1.Range.isIRange(thing.range);
}
/**
 * @internal
 */
exports.symbolKindNames = {
    [17 /* SymbolKind.Array */]: (0, nls_js_1.localize)('Array', "array"),
    [16 /* SymbolKind.Boolean */]: (0, nls_js_1.localize)('Boolean', "boolean"),
    [4 /* SymbolKind.Class */]: (0, nls_js_1.localize)('Class', "class"),
    [13 /* SymbolKind.Constant */]: (0, nls_js_1.localize)('Constant', "constant"),
    [8 /* SymbolKind.Constructor */]: (0, nls_js_1.localize)('Constructor', "constructor"),
    [9 /* SymbolKind.Enum */]: (0, nls_js_1.localize)('Enum', "enumeration"),
    [21 /* SymbolKind.EnumMember */]: (0, nls_js_1.localize)('EnumMember', "enumeration member"),
    [23 /* SymbolKind.Event */]: (0, nls_js_1.localize)('Event', "event"),
    [7 /* SymbolKind.Field */]: (0, nls_js_1.localize)('Field', "field"),
    [0 /* SymbolKind.File */]: (0, nls_js_1.localize)('File', "file"),
    [11 /* SymbolKind.Function */]: (0, nls_js_1.localize)('Function', "function"),
    [10 /* SymbolKind.Interface */]: (0, nls_js_1.localize)('Interface', "interface"),
    [19 /* SymbolKind.Key */]: (0, nls_js_1.localize)('Key', "key"),
    [5 /* SymbolKind.Method */]: (0, nls_js_1.localize)('Method', "method"),
    [1 /* SymbolKind.Module */]: (0, nls_js_1.localize)('Module', "module"),
    [2 /* SymbolKind.Namespace */]: (0, nls_js_1.localize)('Namespace', "namespace"),
    [20 /* SymbolKind.Null */]: (0, nls_js_1.localize)('Null', "null"),
    [15 /* SymbolKind.Number */]: (0, nls_js_1.localize)('Number', "number"),
    [18 /* SymbolKind.Object */]: (0, nls_js_1.localize)('Object', "object"),
    [24 /* SymbolKind.Operator */]: (0, nls_js_1.localize)('Operator', "operator"),
    [3 /* SymbolKind.Package */]: (0, nls_js_1.localize)('Package', "package"),
    [6 /* SymbolKind.Property */]: (0, nls_js_1.localize)('Property', "property"),
    [14 /* SymbolKind.String */]: (0, nls_js_1.localize)('String', "string"),
    [22 /* SymbolKind.Struct */]: (0, nls_js_1.localize)('Struct', "struct"),
    [25 /* SymbolKind.TypeParameter */]: (0, nls_js_1.localize)('TypeParameter', "type parameter"),
    [12 /* SymbolKind.Variable */]: (0, nls_js_1.localize)('Variable', "variable"),
};
/**
 * @internal
 */
function getAriaLabelForSymbol(symbolName, kind) {
    return (0, nls_js_1.localize)('symbolAriaLabel', '{0} ({1})', symbolName, exports.symbolKindNames[kind]);
}
/**
 * @internal
 */
var SymbolKinds;
(function (SymbolKinds) {
    const byKind = new Map();
    byKind.set(0 /* SymbolKind.File */, codicons_js_1.Codicon.symbolFile);
    byKind.set(1 /* SymbolKind.Module */, codicons_js_1.Codicon.symbolModule);
    byKind.set(2 /* SymbolKind.Namespace */, codicons_js_1.Codicon.symbolNamespace);
    byKind.set(3 /* SymbolKind.Package */, codicons_js_1.Codicon.symbolPackage);
    byKind.set(4 /* SymbolKind.Class */, codicons_js_1.Codicon.symbolClass);
    byKind.set(5 /* SymbolKind.Method */, codicons_js_1.Codicon.symbolMethod);
    byKind.set(6 /* SymbolKind.Property */, codicons_js_1.Codicon.symbolProperty);
    byKind.set(7 /* SymbolKind.Field */, codicons_js_1.Codicon.symbolField);
    byKind.set(8 /* SymbolKind.Constructor */, codicons_js_1.Codicon.symbolConstructor);
    byKind.set(9 /* SymbolKind.Enum */, codicons_js_1.Codicon.symbolEnum);
    byKind.set(10 /* SymbolKind.Interface */, codicons_js_1.Codicon.symbolInterface);
    byKind.set(11 /* SymbolKind.Function */, codicons_js_1.Codicon.symbolFunction);
    byKind.set(12 /* SymbolKind.Variable */, codicons_js_1.Codicon.symbolVariable);
    byKind.set(13 /* SymbolKind.Constant */, codicons_js_1.Codicon.symbolConstant);
    byKind.set(14 /* SymbolKind.String */, codicons_js_1.Codicon.symbolString);
    byKind.set(15 /* SymbolKind.Number */, codicons_js_1.Codicon.symbolNumber);
    byKind.set(16 /* SymbolKind.Boolean */, codicons_js_1.Codicon.symbolBoolean);
    byKind.set(17 /* SymbolKind.Array */, codicons_js_1.Codicon.symbolArray);
    byKind.set(18 /* SymbolKind.Object */, codicons_js_1.Codicon.symbolObject);
    byKind.set(19 /* SymbolKind.Key */, codicons_js_1.Codicon.symbolKey);
    byKind.set(20 /* SymbolKind.Null */, codicons_js_1.Codicon.symbolNull);
    byKind.set(21 /* SymbolKind.EnumMember */, codicons_js_1.Codicon.symbolEnumMember);
    byKind.set(22 /* SymbolKind.Struct */, codicons_js_1.Codicon.symbolStruct);
    byKind.set(23 /* SymbolKind.Event */, codicons_js_1.Codicon.symbolEvent);
    byKind.set(24 /* SymbolKind.Operator */, codicons_js_1.Codicon.symbolOperator);
    byKind.set(25 /* SymbolKind.TypeParameter */, codicons_js_1.Codicon.symbolTypeParameter);
    /**
     * @internal
     */
    function toIcon(kind) {
        let icon = byKind.get(kind);
        if (!icon) {
            console.info('No codicon found for SymbolKind ' + kind);
            icon = codicons_js_1.Codicon.symbolProperty;
        }
        return icon;
    }
    SymbolKinds.toIcon = toIcon;
    const byCompletionKind = new Map();
    byCompletionKind.set(0 /* SymbolKind.File */, 20 /* CompletionItemKind.File */);
    byCompletionKind.set(1 /* SymbolKind.Module */, 8 /* CompletionItemKind.Module */);
    byCompletionKind.set(2 /* SymbolKind.Namespace */, 8 /* CompletionItemKind.Module */);
    byCompletionKind.set(3 /* SymbolKind.Package */, 8 /* CompletionItemKind.Module */);
    byCompletionKind.set(4 /* SymbolKind.Class */, 5 /* CompletionItemKind.Class */);
    byCompletionKind.set(5 /* SymbolKind.Method */, 0 /* CompletionItemKind.Method */);
    byCompletionKind.set(6 /* SymbolKind.Property */, 9 /* CompletionItemKind.Property */);
    byCompletionKind.set(7 /* SymbolKind.Field */, 3 /* CompletionItemKind.Field */);
    byCompletionKind.set(8 /* SymbolKind.Constructor */, 2 /* CompletionItemKind.Constructor */);
    byCompletionKind.set(9 /* SymbolKind.Enum */, 15 /* CompletionItemKind.Enum */);
    byCompletionKind.set(10 /* SymbolKind.Interface */, 7 /* CompletionItemKind.Interface */);
    byCompletionKind.set(11 /* SymbolKind.Function */, 1 /* CompletionItemKind.Function */);
    byCompletionKind.set(12 /* SymbolKind.Variable */, 4 /* CompletionItemKind.Variable */);
    byCompletionKind.set(13 /* SymbolKind.Constant */, 14 /* CompletionItemKind.Constant */);
    byCompletionKind.set(14 /* SymbolKind.String */, 18 /* CompletionItemKind.Text */);
    byCompletionKind.set(15 /* SymbolKind.Number */, 13 /* CompletionItemKind.Value */);
    byCompletionKind.set(16 /* SymbolKind.Boolean */, 13 /* CompletionItemKind.Value */);
    byCompletionKind.set(17 /* SymbolKind.Array */, 13 /* CompletionItemKind.Value */);
    byCompletionKind.set(18 /* SymbolKind.Object */, 13 /* CompletionItemKind.Value */);
    byCompletionKind.set(19 /* SymbolKind.Key */, 17 /* CompletionItemKind.Keyword */);
    byCompletionKind.set(20 /* SymbolKind.Null */, 13 /* CompletionItemKind.Value */);
    byCompletionKind.set(21 /* SymbolKind.EnumMember */, 16 /* CompletionItemKind.EnumMember */);
    byCompletionKind.set(22 /* SymbolKind.Struct */, 6 /* CompletionItemKind.Struct */);
    byCompletionKind.set(23 /* SymbolKind.Event */, 10 /* CompletionItemKind.Event */);
    byCompletionKind.set(24 /* SymbolKind.Operator */, 11 /* CompletionItemKind.Operator */);
    byCompletionKind.set(25 /* SymbolKind.TypeParameter */, 24 /* CompletionItemKind.TypeParameter */);
    /**
     * @internal
     */
    function toCompletionKind(kind) {
        let completionKind = byCompletionKind.get(kind);
        if (completionKind === undefined) {
            console.info('No completion kind found for SymbolKind ' + kind);
            completionKind = 20 /* CompletionItemKind.File */;
        }
        return completionKind;
    }
    SymbolKinds.toCompletionKind = toCompletionKind;
})(SymbolKinds || (exports.SymbolKinds = SymbolKinds = {}));
/** @internal */
class TextEdit {
    static asEditOperation(edit) {
        return editOperation_js_1.EditOperation.replace(range_js_1.Range.lift(edit.range), edit.text);
    }
}
exports.TextEdit = TextEdit;
class FoldingRangeKind {
    /**
     * Kind for folding range representing a comment. The value of the kind is 'comment'.
     */
    static { this.Comment = new FoldingRangeKind('comment'); }
    /**
     * Kind for folding range representing a import. The value of the kind is 'imports'.
     */
    static { this.Imports = new FoldingRangeKind('imports'); }
    /**
     * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).
     * The value of the kind is 'region'.
     */
    static { this.Region = new FoldingRangeKind('region'); }
    /**
     * Returns a {@link FoldingRangeKind} for the given value.
     *
     * @param value of the kind.
     */
    static fromValue(value) {
        switch (value) {
            case 'comment': return FoldingRangeKind.Comment;
            case 'imports': return FoldingRangeKind.Imports;
            case 'region': return FoldingRangeKind.Region;
        }
        return new FoldingRangeKind(value);
    }
    /**
     * Creates a new {@link FoldingRangeKind}.
     *
     * @param value of the kind.
     */
    constructor(value) {
        this.value = value;
    }
}
exports.FoldingRangeKind = FoldingRangeKind;
var NewSymbolNameTag;
(function (NewSymbolNameTag) {
    NewSymbolNameTag[NewSymbolNameTag["AIGenerated"] = 1] = "AIGenerated";
})(NewSymbolNameTag || (exports.NewSymbolNameTag = NewSymbolNameTag = {}));
var NewSymbolNameTriggerKind;
(function (NewSymbolNameTriggerKind) {
    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind["Invoke"] = 0] = "Invoke";
    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind["Automatic"] = 1] = "Automatic";
})(NewSymbolNameTriggerKind || (exports.NewSymbolNameTriggerKind = NewSymbolNameTriggerKind = {}));
/**
 * @internal
 */
var Command;
(function (Command) {
    /**
     * @internal
     */
    function is(obj) {
        if (!obj || typeof obj !== 'object') {
            return false;
        }
        return typeof obj.id === 'string' &&
            typeof obj.title === 'string';
    }
    Command.is = is;
})(Command || (exports.Command = Command = {}));
/**
 * @internal
 */
var CommentThreadCollapsibleState;
(function (CommentThreadCollapsibleState) {
    /**
     * Determines an item is collapsed
     */
    CommentThreadCollapsibleState[CommentThreadCollapsibleState["Collapsed"] = 0] = "Collapsed";
    /**
     * Determines an item is expanded
     */
    CommentThreadCollapsibleState[CommentThreadCollapsibleState["Expanded"] = 1] = "Expanded";
})(CommentThreadCollapsibleState || (exports.CommentThreadCollapsibleState = CommentThreadCollapsibleState = {}));
/**
 * @internal
 */
var CommentThreadState;
(function (CommentThreadState) {
    CommentThreadState[CommentThreadState["Unresolved"] = 0] = "Unresolved";
    CommentThreadState[CommentThreadState["Resolved"] = 1] = "Resolved";
})(CommentThreadState || (exports.CommentThreadState = CommentThreadState = {}));
/**
 * @internal
 */
var CommentThreadApplicability;
(function (CommentThreadApplicability) {
    CommentThreadApplicability[CommentThreadApplicability["Current"] = 0] = "Current";
    CommentThreadApplicability[CommentThreadApplicability["Outdated"] = 1] = "Outdated";
})(CommentThreadApplicability || (exports.CommentThreadApplicability = CommentThreadApplicability = {}));
/**
 * @internal
 */
var CommentMode;
(function (CommentMode) {
    CommentMode[CommentMode["Editing"] = 0] = "Editing";
    CommentMode[CommentMode["Preview"] = 1] = "Preview";
})(CommentMode || (exports.CommentMode = CommentMode = {}));
/**
 * @internal
 */
var CommentState;
(function (CommentState) {
    CommentState[CommentState["Published"] = 0] = "Published";
    CommentState[CommentState["Draft"] = 1] = "Draft";
})(CommentState || (exports.CommentState = CommentState = {}));
var InlayHintKind;
(function (InlayHintKind) {
    InlayHintKind[InlayHintKind["Type"] = 1] = "Type";
    InlayHintKind[InlayHintKind["Parameter"] = 2] = "Parameter";
})(InlayHintKind || (exports.InlayHintKind = InlayHintKind = {}));
/**
 * @internal
 */
class LazyTokenizationSupport {
    constructor(createSupport) {
        this.createSupport = createSupport;
        this._tokenizationSupport = null;
    }
    dispose() {
        if (this._tokenizationSupport) {
            this._tokenizationSupport.then((support) => {
                if (support) {
                    support.dispose();
                }
            });
        }
    }
    get tokenizationSupport() {
        if (!this._tokenizationSupport) {
            this._tokenizationSupport = this.createSupport();
        }
        return this._tokenizationSupport;
    }
}
exports.LazyTokenizationSupport = LazyTokenizationSupport;
/**
 * @internal
 */
exports.TokenizationRegistry = new tokenizationRegistry_js_1.TokenizationRegistry();
/**
 * @internal
 */
exports.TreeSitterTokenizationRegistry = new tokenizationRegistry_js_1.TokenizationRegistry();
/**
 * @internal
 */
var ExternalUriOpenerPriority;
(function (ExternalUriOpenerPriority) {
    ExternalUriOpenerPriority[ExternalUriOpenerPriority["None"] = 0] = "None";
    ExternalUriOpenerPriority[ExternalUriOpenerPriority["Option"] = 1] = "Option";
    ExternalUriOpenerPriority[ExternalUriOpenerPriority["Default"] = 2] = "Default";
    ExternalUriOpenerPriority[ExternalUriOpenerPriority["Preferred"] = 3] = "Preferred";
})(ExternalUriOpenerPriority || (exports.ExternalUriOpenerPriority = ExternalUriOpenerPriority = {}));
var InlineEditTriggerKind;
(function (InlineEditTriggerKind) {
    InlineEditTriggerKind[InlineEditTriggerKind["Invoke"] = 0] = "Invoke";
    InlineEditTriggerKind[InlineEditTriggerKind["Automatic"] = 1] = "Automatic";
})(InlineEditTriggerKind || (exports.InlineEditTriggerKind = InlineEditTriggerKind = {}));
//# sourceMappingURL=languages.js.map