"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.editorBracketHighlightingForeground4 = exports.editorBracketHighlightingForeground3 = exports.editorBracketHighlightingForeground2 = exports.editorBracketHighlightingForeground1 = exports.overviewRulerInfo = exports.overviewRulerWarning = exports.overviewRulerError = exports.overviewRulerRangeHighlight = exports.ghostTextBackground = exports.ghostTextForeground = exports.ghostTextBorder = exports.editorUnnecessaryCodeOpacity = exports.editorUnnecessaryCodeBorder = exports.editorGutter = exports.editorOverviewRulerBackground = exports.editorOverviewRulerBorder = exports.editorBracketMatchBorder = exports.editorBracketMatchBackground = exports.editorCodeLensForeground = exports.editorRuler = exports.editorDimmedLineNumber = exports.editorActiveLineNumber = exports.editorActiveIndentGuide6 = exports.editorActiveIndentGuide5 = exports.editorActiveIndentGuide4 = exports.editorActiveIndentGuide3 = exports.editorActiveIndentGuide2 = exports.editorActiveIndentGuide1 = exports.editorIndentGuide6 = exports.editorIndentGuide5 = exports.editorIndentGuide4 = exports.editorIndentGuide3 = exports.editorIndentGuide2 = exports.editorIndentGuide1 = exports.deprecatedEditorActiveIndentGuides = exports.deprecatedEditorIndentGuides = exports.editorLineNumbers = exports.editorWhitespaces = exports.editorMultiCursorSecondaryBackground = exports.editorMultiCursorSecondaryForeground = exports.editorMultiCursorPrimaryBackground = exports.editorMultiCursorPrimaryForeground = exports.editorCursorBackground = exports.editorCursorForeground = exports.editorSymbolHighlightBorder = exports.editorSymbolHighlight = exports.editorRangeHighlightBorder = exports.editorRangeHighlight = exports.editorLineHighlightBorder = exports.editorLineHighlight = void 0;
exports.editorUnicodeHighlightBackground = exports.editorUnicodeHighlightBorder = exports.editorBracketPairGuideActiveBackground6 = exports.editorBracketPairGuideActiveBackground5 = exports.editorBracketPairGuideActiveBackground4 = exports.editorBracketPairGuideActiveBackground3 = exports.editorBracketPairGuideActiveBackground2 = exports.editorBracketPairGuideActiveBackground1 = exports.editorBracketPairGuideBackground6 = exports.editorBracketPairGuideBackground5 = exports.editorBracketPairGuideBackground4 = exports.editorBracketPairGuideBackground3 = exports.editorBracketPairGuideBackground2 = exports.editorBracketPairGuideBackground1 = exports.editorBracketHighlightingUnexpectedBracketForeground = exports.editorBracketHighlightingForeground6 = exports.editorBracketHighlightingForeground5 = void 0;
const nls = require("../../../nls.js");
const color_js_1 = require("../../../base/common/color.js");
const colorRegistry_js_1 = require("../../../platform/theme/common/colorRegistry.js");
const themeService_js_1 = require("../../../platform/theme/common/themeService.js");
/**
 * Definition of the editor colors
 */
exports.editorLineHighlight = (0, colorRegistry_js_1.registerColor)('editor.lineHighlightBackground', null, nls.localize('lineHighlight', 'Background color for the highlight of line at the cursor position.'));
exports.editorLineHighlightBorder = (0, colorRegistry_js_1.registerColor)('editor.lineHighlightBorder', { dark: '#282828', light: '#eeeeee', hcDark: '#f38518', hcLight: colorRegistry_js_1.contrastBorder }, nls.localize('lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.'));
exports.editorRangeHighlight = (0, colorRegistry_js_1.registerColor)('editor.rangeHighlightBackground', { dark: '#ffffff0b', light: '#fdff0033', hcDark: null, hcLight: null }, nls.localize('rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true);
exports.editorRangeHighlightBorder = (0, colorRegistry_js_1.registerColor)('editor.rangeHighlightBorder', { dark: null, light: null, hcDark: colorRegistry_js_1.activeContrastBorder, hcLight: colorRegistry_js_1.activeContrastBorder }, nls.localize('rangeHighlightBorder', 'Background color of the border around highlighted ranges.'));
exports.editorSymbolHighlight = (0, colorRegistry_js_1.registerColor)('editor.symbolHighlightBackground', { dark: colorRegistry_js_1.editorFindMatchHighlight, light: colorRegistry_js_1.editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('symbolHighlight', 'Background color of highlighted symbol, like for go to definition or go next/previous symbol. The color must not be opaque so as not to hide underlying decorations.'), true);
exports.editorSymbolHighlightBorder = (0, colorRegistry_js_1.registerColor)('editor.symbolHighlightBorder', { dark: null, light: null, hcDark: colorRegistry_js_1.activeContrastBorder, hcLight: colorRegistry_js_1.activeContrastBorder }, nls.localize('symbolHighlightBorder', 'Background color of the border around highlighted symbols.'));
exports.editorCursorForeground = (0, colorRegistry_js_1.registerColor)('editorCursor.foreground', { dark: '#AEAFAD', light: color_js_1.Color.black, hcDark: color_js_1.Color.white, hcLight: '#0F4A85' }, nls.localize('caret', 'Color of the editor cursor.'));
exports.editorCursorBackground = (0, colorRegistry_js_1.registerColor)('editorCursor.background', null, nls.localize('editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.'));
exports.editorMultiCursorPrimaryForeground = (0, colorRegistry_js_1.registerColor)('editorMultiCursor.primary.foreground', exports.editorCursorForeground, nls.localize('editorMultiCursorPrimaryForeground', 'Color of the primary editor cursor when multiple cursors are present.'));
exports.editorMultiCursorPrimaryBackground = (0, colorRegistry_js_1.registerColor)('editorMultiCursor.primary.background', exports.editorCursorBackground, nls.localize('editorMultiCursorPrimaryBackground', 'The background color of the primary editor cursor when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.'));
exports.editorMultiCursorSecondaryForeground = (0, colorRegistry_js_1.registerColor)('editorMultiCursor.secondary.foreground', exports.editorCursorForeground, nls.localize('editorMultiCursorSecondaryForeground', 'Color of secondary editor cursors when multiple cursors are present.'));
exports.editorMultiCursorSecondaryBackground = (0, colorRegistry_js_1.registerColor)('editorMultiCursor.secondary.background', exports.editorCursorBackground, nls.localize('editorMultiCursorSecondaryBackground', 'The background color of secondary editor cursors when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.'));
exports.editorWhitespaces = (0, colorRegistry_js_1.registerColor)('editorWhitespace.foreground', { dark: '#e3e4e229', light: '#33333333', hcDark: '#e3e4e229', hcLight: '#CCCCCC' }, nls.localize('editorWhitespaces', 'Color of whitespace characters in the editor.'));
exports.editorLineNumbers = (0, colorRegistry_js_1.registerColor)('editorLineNumber.foreground', { dark: '#858585', light: '#237893', hcDark: color_js_1.Color.white, hcLight: '#292929' }, nls.localize('editorLineNumbers', 'Color of editor line numbers.'));
exports.deprecatedEditorIndentGuides = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.background', exports.editorWhitespaces, nls.localize('editorIndentGuides', 'Color of the editor indentation guides.'), false, nls.localize('deprecatedEditorIndentGuides', '\'editorIndentGuide.background\' is deprecated. Use \'editorIndentGuide.background1\' instead.'));
exports.deprecatedEditorActiveIndentGuides = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.activeBackground', exports.editorWhitespaces, nls.localize('editorActiveIndentGuide', 'Color of the active editor indentation guides.'), false, nls.localize('deprecatedEditorActiveIndentGuide', '\'editorIndentGuide.activeBackground\' is deprecated. Use \'editorIndentGuide.activeBackground1\' instead.'));
exports.editorIndentGuide1 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.background1', exports.deprecatedEditorIndentGuides, nls.localize('editorIndentGuides1', 'Color of the editor indentation guides (1).'));
exports.editorIndentGuide2 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.background2', '#00000000', nls.localize('editorIndentGuides2', 'Color of the editor indentation guides (2).'));
exports.editorIndentGuide3 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.background3', '#00000000', nls.localize('editorIndentGuides3', 'Color of the editor indentation guides (3).'));
exports.editorIndentGuide4 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.background4', '#00000000', nls.localize('editorIndentGuides4', 'Color of the editor indentation guides (4).'));
exports.editorIndentGuide5 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.background5', '#00000000', nls.localize('editorIndentGuides5', 'Color of the editor indentation guides (5).'));
exports.editorIndentGuide6 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.background6', '#00000000', nls.localize('editorIndentGuides6', 'Color of the editor indentation guides (6).'));
exports.editorActiveIndentGuide1 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.activeBackground1', exports.deprecatedEditorActiveIndentGuides, nls.localize('editorActiveIndentGuide1', 'Color of the active editor indentation guides (1).'));
exports.editorActiveIndentGuide2 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.activeBackground2', '#00000000', nls.localize('editorActiveIndentGuide2', 'Color of the active editor indentation guides (2).'));
exports.editorActiveIndentGuide3 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.activeBackground3', '#00000000', nls.localize('editorActiveIndentGuide3', 'Color of the active editor indentation guides (3).'));
exports.editorActiveIndentGuide4 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.activeBackground4', '#00000000', nls.localize('editorActiveIndentGuide4', 'Color of the active editor indentation guides (4).'));
exports.editorActiveIndentGuide5 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.activeBackground5', '#00000000', nls.localize('editorActiveIndentGuide5', 'Color of the active editor indentation guides (5).'));
exports.editorActiveIndentGuide6 = (0, colorRegistry_js_1.registerColor)('editorIndentGuide.activeBackground6', '#00000000', nls.localize('editorActiveIndentGuide6', 'Color of the active editor indentation guides (6).'));
const deprecatedEditorActiveLineNumber = (0, colorRegistry_js_1.registerColor)('editorActiveLineNumber.foreground', { dark: '#c6c6c6', light: '#0B216F', hcDark: colorRegistry_js_1.activeContrastBorder, hcLight: colorRegistry_js_1.activeContrastBorder }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'), false, nls.localize('deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \'editorLineNumber.activeForeground\' instead.'));
exports.editorActiveLineNumber = (0, colorRegistry_js_1.registerColor)('editorLineNumber.activeForeground', deprecatedEditorActiveLineNumber, nls.localize('editorActiveLineNumber', 'Color of editor active line number'));
exports.editorDimmedLineNumber = (0, colorRegistry_js_1.registerColor)('editorLineNumber.dimmedForeground', null, nls.localize('editorDimmedLineNumber', 'Color of the final editor line when editor.renderFinalNewline is set to dimmed.'));
exports.editorRuler = (0, colorRegistry_js_1.registerColor)('editorRuler.foreground', { dark: '#5A5A5A', light: color_js_1.Color.lightgrey, hcDark: color_js_1.Color.white, hcLight: '#292929' }, nls.localize('editorRuler', 'Color of the editor rulers.'));
exports.editorCodeLensForeground = (0, colorRegistry_js_1.registerColor)('editorCodeLens.foreground', { dark: '#999999', light: '#919191', hcDark: '#999999', hcLight: '#292929' }, nls.localize('editorCodeLensForeground', 'Foreground color of editor CodeLens'));
exports.editorBracketMatchBackground = (0, colorRegistry_js_1.registerColor)('editorBracketMatch.background', { dark: '#0064001a', light: '#0064001a', hcDark: '#0064001a', hcLight: '#0000' }, nls.localize('editorBracketMatchBackground', 'Background color behind matching brackets'));
exports.editorBracketMatchBorder = (0, colorRegistry_js_1.registerColor)('editorBracketMatch.border', { dark: '#888', light: '#B9B9B9', hcDark: colorRegistry_js_1.contrastBorder, hcLight: colorRegistry_js_1.contrastBorder }, nls.localize('editorBracketMatchBorder', 'Color for matching brackets boxes'));
exports.editorOverviewRulerBorder = (0, colorRegistry_js_1.registerColor)('editorOverviewRuler.border', { dark: '#7f7f7f4d', light: '#7f7f7f4d', hcDark: '#7f7f7f4d', hcLight: '#666666' }, nls.localize('editorOverviewRulerBorder', 'Color of the overview ruler border.'));
exports.editorOverviewRulerBackground = (0, colorRegistry_js_1.registerColor)('editorOverviewRuler.background', null, nls.localize('editorOverviewRulerBackground', 'Background color of the editor overview ruler.'));
exports.editorGutter = (0, colorRegistry_js_1.registerColor)('editorGutter.background', colorRegistry_js_1.editorBackground, nls.localize('editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.'));
exports.editorUnnecessaryCodeBorder = (0, colorRegistry_js_1.registerColor)('editorUnnecessaryCode.border', { dark: null, light: null, hcDark: color_js_1.Color.fromHex('#fff').transparent(0.8), hcLight: colorRegistry_js_1.contrastBorder }, nls.localize('unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.'));
exports.editorUnnecessaryCodeOpacity = (0, colorRegistry_js_1.registerColor)('editorUnnecessaryCode.opacity', { dark: color_js_1.Color.fromHex('#000a'), light: color_js_1.Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, "#000000c0" will render the code with 75% opacity. For high contrast themes, use the  \'editorUnnecessaryCode.border\' theme color to underline unnecessary code instead of fading it out.'));
exports.ghostTextBorder = (0, colorRegistry_js_1.registerColor)('editorGhostText.border', { dark: null, light: null, hcDark: color_js_1.Color.fromHex('#fff').transparent(0.8), hcLight: color_js_1.Color.fromHex('#292929').transparent(0.8) }, nls.localize('editorGhostTextBorder', 'Border color of ghost text in the editor.'));
exports.ghostTextForeground = (0, colorRegistry_js_1.registerColor)('editorGhostText.foreground', { dark: color_js_1.Color.fromHex('#ffffff56'), light: color_js_1.Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('editorGhostTextForeground', 'Foreground color of the ghost text in the editor.'));
exports.ghostTextBackground = (0, colorRegistry_js_1.registerColor)('editorGhostText.background', null, nls.localize('editorGhostTextBackground', 'Background color of the ghost text in the editor.'));
const rulerRangeDefault = new color_js_1.Color(new color_js_1.RGBA(0, 122, 204, 0.6));
exports.overviewRulerRangeHighlight = (0, colorRegistry_js_1.registerColor)('editorOverviewRuler.rangeHighlightForeground', rulerRangeDefault, nls.localize('overviewRulerRangeHighlight', 'Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
exports.overviewRulerError = (0, colorRegistry_js_1.registerColor)('editorOverviewRuler.errorForeground', { dark: new color_js_1.Color(new color_js_1.RGBA(255, 18, 18, 0.7)), light: new color_js_1.Color(new color_js_1.RGBA(255, 18, 18, 0.7)), hcDark: new color_js_1.Color(new color_js_1.RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('overviewRuleError', 'Overview ruler marker color for errors.'));
exports.overviewRulerWarning = (0, colorRegistry_js_1.registerColor)('editorOverviewRuler.warningForeground', { dark: colorRegistry_js_1.editorWarningForeground, light: colorRegistry_js_1.editorWarningForeground, hcDark: colorRegistry_js_1.editorWarningBorder, hcLight: colorRegistry_js_1.editorWarningBorder }, nls.localize('overviewRuleWarning', 'Overview ruler marker color for warnings.'));
exports.overviewRulerInfo = (0, colorRegistry_js_1.registerColor)('editorOverviewRuler.infoForeground', { dark: colorRegistry_js_1.editorInfoForeground, light: colorRegistry_js_1.editorInfoForeground, hcDark: colorRegistry_js_1.editorInfoBorder, hcLight: colorRegistry_js_1.editorInfoBorder }, nls.localize('overviewRuleInfo', 'Overview ruler marker color for infos.'));
exports.editorBracketHighlightingForeground1 = (0, colorRegistry_js_1.registerColor)('editorBracketHighlight.foreground1', { dark: '#FFD700', light: '#0431FAFF', hcDark: '#FFD700', hcLight: '#0431FAFF' }, nls.localize('editorBracketHighlightForeground1', 'Foreground color of brackets (1). Requires enabling bracket pair colorization.'));
exports.editorBracketHighlightingForeground2 = (0, colorRegistry_js_1.registerColor)('editorBracketHighlight.foreground2', { dark: '#DA70D6', light: '#319331FF', hcDark: '#DA70D6', hcLight: '#319331FF' }, nls.localize('editorBracketHighlightForeground2', 'Foreground color of brackets (2). Requires enabling bracket pair colorization.'));
exports.editorBracketHighlightingForeground3 = (0, colorRegistry_js_1.registerColor)('editorBracketHighlight.foreground3', { dark: '#179FFF', light: '#7B3814FF', hcDark: '#87CEFA', hcLight: '#7B3814FF' }, nls.localize('editorBracketHighlightForeground3', 'Foreground color of brackets (3). Requires enabling bracket pair colorization.'));
exports.editorBracketHighlightingForeground4 = (0, colorRegistry_js_1.registerColor)('editorBracketHighlight.foreground4', '#00000000', nls.localize('editorBracketHighlightForeground4', 'Foreground color of brackets (4). Requires enabling bracket pair colorization.'));
exports.editorBracketHighlightingForeground5 = (0, colorRegistry_js_1.registerColor)('editorBracketHighlight.foreground5', '#00000000', nls.localize('editorBracketHighlightForeground5', 'Foreground color of brackets (5). Requires enabling bracket pair colorization.'));
exports.editorBracketHighlightingForeground6 = (0, colorRegistry_js_1.registerColor)('editorBracketHighlight.foreground6', '#00000000', nls.localize('editorBracketHighlightForeground6', 'Foreground color of brackets (6). Requires enabling bracket pair colorization.'));
exports.editorBracketHighlightingUnexpectedBracketForeground = (0, colorRegistry_js_1.registerColor)('editorBracketHighlight.unexpectedBracket.foreground', { dark: new color_js_1.Color(new color_js_1.RGBA(255, 18, 18, 0.8)), light: new color_js_1.Color(new color_js_1.RGBA(255, 18, 18, 0.8)), hcDark: 'new Color(new RGBA(255, 50, 50, 1))', hcLight: '#B5200D' }, nls.localize('editorBracketHighlightUnexpectedBracketForeground', 'Foreground color of unexpected brackets.'));
exports.editorBracketPairGuideBackground1 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.background1', '#00000000', nls.localize('editorBracketPairGuide.background1', 'Background color of inactive bracket pair guides (1). Requires enabling bracket pair guides.'));
exports.editorBracketPairGuideBackground2 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.background2', '#00000000', nls.localize('editorBracketPairGuide.background2', 'Background color of inactive bracket pair guides (2). Requires enabling bracket pair guides.'));
exports.editorBracketPairGuideBackground3 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.background3', '#00000000', nls.localize('editorBracketPairGuide.background3', 'Background color of inactive bracket pair guides (3). Requires enabling bracket pair guides.'));
exports.editorBracketPairGuideBackground4 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.background4', '#00000000', nls.localize('editorBracketPairGuide.background4', 'Background color of inactive bracket pair guides (4). Requires enabling bracket pair guides.'));
exports.editorBracketPairGuideBackground5 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.background5', '#00000000', nls.localize('editorBracketPairGuide.background5', 'Background color of inactive bracket pair guides (5). Requires enabling bracket pair guides.'));
exports.editorBracketPairGuideBackground6 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.background6', '#00000000', nls.localize('editorBracketPairGuide.background6', 'Background color of inactive bracket pair guides (6). Requires enabling bracket pair guides.'));
exports.editorBracketPairGuideActiveBackground1 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.activeBackground1', '#00000000', nls.localize('editorBracketPairGuide.activeBackground1', 'Background color of active bracket pair guides (1). Requires enabling bracket pair guides.'));
exports.editorBracketPairGuideActiveBackground2 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.activeBackground2', '#00000000', nls.localize('editorBracketPairGuide.activeBackground2', 'Background color of active bracket pair guides (2). Requires enabling bracket pair guides.'));
exports.editorBracketPairGuideActiveBackground3 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.activeBackground3', '#00000000', nls.localize('editorBracketPairGuide.activeBackground3', 'Background color of active bracket pair guides (3). Requires enabling bracket pair guides.'));
exports.editorBracketPairGuideActiveBackground4 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.activeBackground4', '#00000000', nls.localize('editorBracketPairGuide.activeBackground4', 'Background color of active bracket pair guides (4). Requires enabling bracket pair guides.'));
exports.editorBracketPairGuideActiveBackground5 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.activeBackground5', '#00000000', nls.localize('editorBracketPairGuide.activeBackground5', 'Background color of active bracket pair guides (5). Requires enabling bracket pair guides.'));
exports.editorBracketPairGuideActiveBackground6 = (0, colorRegistry_js_1.registerColor)('editorBracketPairGuide.activeBackground6', '#00000000', nls.localize('editorBracketPairGuide.activeBackground6', 'Background color of active bracket pair guides (6). Requires enabling bracket pair guides.'));
exports.editorUnicodeHighlightBorder = (0, colorRegistry_js_1.registerColor)('editorUnicodeHighlight.border', colorRegistry_js_1.editorWarningForeground, nls.localize('editorUnicodeHighlight.border', 'Border color used to highlight unicode characters.'));
exports.editorUnicodeHighlightBackground = (0, colorRegistry_js_1.registerColor)('editorUnicodeHighlight.background', colorRegistry_js_1.editorWarningBackground, nls.localize('editorUnicodeHighlight.background', 'Background color used to highlight unicode characters.'));
// contains all color rules that used to defined in editor/browser/widget/editor.css
(0, themeService_js_1.registerThemingParticipant)((theme, collector) => {
    const background = theme.getColor(colorRegistry_js_1.editorBackground);
    const lineHighlight = theme.getColor(exports.editorLineHighlight);
    const imeBackground = (lineHighlight && !lineHighlight.isTransparent() ? lineHighlight : background);
    if (imeBackground) {
        collector.addRule(`.monaco-editor .inputarea.ime-input { background-color: ${imeBackground}; }`);
    }
});
//# sourceMappingURL=editorColorRegistry.js.map