"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.toVSDataTransfer = toVSDataTransfer;
exports.toExternalVSDataTransfer = toExternalVSDataTransfer;
const dnd_js_1 = require("../../base/browser/dnd.js");
const dataTransfer_js_1 = require("../../base/common/dataTransfer.js");
const mime_js_1 = require("../../base/common/mime.js");
const uri_js_1 = require("../../base/common/uri.js");
const dnd_js_2 = require("../../platform/dnd/browser/dnd.js");
function toVSDataTransfer(dataTransfer) {
    const vsDataTransfer = new dataTransfer_js_1.VSDataTransfer();
    for (const item of dataTransfer.items) {
        const type = item.type;
        if (item.kind === 'string') {
            const asStringValue = new Promise(resolve => item.getAsString(resolve));
            vsDataTransfer.append(type, (0, dataTransfer_js_1.createStringDataTransferItem)(asStringValue));
        }
        else if (item.kind === 'file') {
            const file = item.getAsFile();
            if (file) {
                vsDataTransfer.append(type, createFileDataTransferItemFromFile(file));
            }
        }
    }
    return vsDataTransfer;
}
function createFileDataTransferItemFromFile(file) {
    const path = (0, dnd_js_2.getPathForFile)(file);
    const uri = path ? uri_js_1.URI.parse(path) : undefined;
    return (0, dataTransfer_js_1.createFileDataTransferItem)(file.name, uri, async () => {
        return new Uint8Array(await file.arrayBuffer());
    });
}
const INTERNAL_DND_MIME_TYPES = Object.freeze([
    dnd_js_2.CodeDataTransfers.EDITORS,
    dnd_js_2.CodeDataTransfers.FILES,
    dnd_js_1.DataTransfers.RESOURCES,
    dnd_js_1.DataTransfers.INTERNAL_URI_LIST,
]);
function toExternalVSDataTransfer(sourceDataTransfer, overwriteUriList = false) {
    const vsDataTransfer = toVSDataTransfer(sourceDataTransfer);
    // Try to expose the internal uri-list type as the standard type
    const uriList = vsDataTransfer.get(dnd_js_1.DataTransfers.INTERNAL_URI_LIST);
    if (uriList) {
        vsDataTransfer.replace(mime_js_1.Mimes.uriList, uriList);
    }
    else {
        if (overwriteUriList || !vsDataTransfer.has(mime_js_1.Mimes.uriList)) {
            // Otherwise, fallback to adding dragged resources to the uri list
            const editorData = [];
            for (const item of sourceDataTransfer.items) {
                const file = item.getAsFile();
                if (file) {
                    const path = (0, dnd_js_2.getPathForFile)(file);
                    try {
                        if (path) {
                            editorData.push(uri_js_1.URI.file(path).toString());
                        }
                        else {
                            editorData.push(uri_js_1.URI.parse(file.name, true).toString());
                        }
                    }
                    catch {
                        // Parsing failed. Leave out from list
                    }
                }
            }
            if (editorData.length) {
                vsDataTransfer.replace(mime_js_1.Mimes.uriList, (0, dataTransfer_js_1.createStringDataTransferItem)(dataTransfer_js_1.UriList.create(editorData)));
            }
        }
    }
    for (const internal of INTERNAL_DND_MIME_TYPES) {
        vsDataTransfer.delete(internal);
    }
    return vsDataTransfer;
}
//# sourceMappingURL=dnd.js.map