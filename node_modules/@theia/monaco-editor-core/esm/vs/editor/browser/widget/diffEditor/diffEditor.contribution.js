"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const codicons_js_1 = require("../../../../base/common/codicons.js");
const commands_js_1 = require("./commands.js");
const editorContextKeys_js_1 = require("../../../common/editorContextKeys.js");
const nls_js_1 = require("../../../../nls.js");
const actions_js_1 = require("../../../../platform/actions/common/actions.js");
const commands_js_2 = require("../../../../platform/commands/common/commands.js");
const contextkey_js_1 = require("../../../../platform/contextkey/common/contextkey.js");
require("./registrations.contribution.js");
(0, actions_js_1.registerAction2)(commands_js_1.ToggleCollapseUnchangedRegions);
(0, actions_js_1.registerAction2)(commands_js_1.ToggleShowMovedCodeBlocks);
(0, actions_js_1.registerAction2)(commands_js_1.ToggleUseInlineViewWhenSpaceIsLimited);
actions_js_1.MenuRegistry.appendMenuItem(actions_js_1.MenuId.EditorTitle, {
    command: {
        id: new commands_js_1.ToggleUseInlineViewWhenSpaceIsLimited().desc.id,
        title: (0, nls_js_1.localize)('useInlineViewWhenSpaceIsLimited', "Use Inline View When Space Is Limited"),
        toggled: contextkey_js_1.ContextKeyExpr.has('config.diffEditor.useInlineViewWhenSpaceIsLimited'),
        precondition: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
    },
    order: 11,
    group: '1_diff',
    when: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached, contextkey_js_1.ContextKeyExpr.has('isInDiffEditor')),
});
actions_js_1.MenuRegistry.appendMenuItem(actions_js_1.MenuId.EditorTitle, {
    command: {
        id: new commands_js_1.ToggleShowMovedCodeBlocks().desc.id,
        title: (0, nls_js_1.localize)('showMoves', "Show Moved Code Blocks"),
        icon: codicons_js_1.Codicon.move,
        toggled: contextkey_js_1.ContextKeyEqualsExpr.create('config.diffEditor.experimental.showMoves', true),
        precondition: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
    },
    order: 10,
    group: '1_diff',
    when: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
});
(0, actions_js_1.registerAction2)(commands_js_1.RevertHunkOrSelection);
for (const ctx of [
    { icon: codicons_js_1.Codicon.arrowRight, key: editorContextKeys_js_1.EditorContextKeys.diffEditorInlineMode.toNegated() },
    { icon: codicons_js_1.Codicon.discard, key: editorContextKeys_js_1.EditorContextKeys.diffEditorInlineMode }
]) {
    actions_js_1.MenuRegistry.appendMenuItem(actions_js_1.MenuId.DiffEditorHunkToolbar, {
        command: {
            id: new commands_js_1.RevertHunkOrSelection().desc.id,
            title: (0, nls_js_1.localize)('revertHunk', "Revert Block"),
            icon: ctx.icon,
        },
        when: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.diffEditorModifiedWritable, ctx.key),
        order: 5,
        group: 'primary',
    });
    actions_js_1.MenuRegistry.appendMenuItem(actions_js_1.MenuId.DiffEditorSelectionToolbar, {
        command: {
            id: new commands_js_1.RevertHunkOrSelection().desc.id,
            title: (0, nls_js_1.localize)('revertSelection', "Revert Selection"),
            icon: ctx.icon,
        },
        when: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.diffEditorModifiedWritable, ctx.key),
        order: 5,
        group: 'primary',
    });
}
(0, actions_js_1.registerAction2)(commands_js_1.SwitchSide);
(0, actions_js_1.registerAction2)(commands_js_1.ExitCompareMove);
(0, actions_js_1.registerAction2)(commands_js_1.CollapseAllUnchangedRegions);
(0, actions_js_1.registerAction2)(commands_js_1.ShowAllUnchangedRegions);
actions_js_1.MenuRegistry.appendMenuItem(actions_js_1.MenuId.EditorTitle, {
    command: {
        id: commands_js_1.AccessibleDiffViewerNext.id,
        title: (0, nls_js_1.localize)('Open Accessible Diff Viewer', "Open Accessible Diff Viewer"),
        precondition: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
    },
    order: 10,
    group: '2_diff',
    when: contextkey_js_1.ContextKeyExpr.and(editorContextKeys_js_1.EditorContextKeys.accessibleDiffViewerVisible.negate(), contextkey_js_1.ContextKeyExpr.has('isInDiffEditor')),
});
commands_js_2.CommandsRegistry.registerCommandAlias('editor.action.diffReview.next', commands_js_1.AccessibleDiffViewerNext.id);
(0, actions_js_1.registerAction2)(commands_js_1.AccessibleDiffViewerNext);
commands_js_2.CommandsRegistry.registerCommandAlias('editor.action.diffReview.prev', commands_js_1.AccessibleDiffViewerPrev.id);
(0, actions_js_1.registerAction2)(commands_js_1.AccessibleDiffViewerPrev);
//# sourceMappingURL=diffEditor.contribution.js.map