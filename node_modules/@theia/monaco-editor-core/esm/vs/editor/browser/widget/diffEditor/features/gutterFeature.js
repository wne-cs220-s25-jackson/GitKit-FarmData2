"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiffEditorGutter = void 0;
const dom_js_1 = require("../../../../../base/browser/dom.js");
const lifecycle_js_1 = require("../../../../../base/common/lifecycle.js");
const observable_js_1 = require("../../../../../base/common/observable.js");
const toolbar_js_1 = require("../../../../../platform/actions/browser/toolbar.js");
const actions_js_1 = require("../../../../../platform/actions/common/actions.js");
const contextkey_js_1 = require("../../../../../platform/contextkey/common/contextkey.js");
const hover_js_1 = require("../../../../../platform/hover/browser/hover.js");
const instantiation_js_1 = require("../../../../../platform/instantiation/common/instantiation.js");
const lineRange_js_1 = require("../../../../common/core/lineRange.js");
const offsetRange_js_1 = require("../../../../common/core/offsetRange.js");
const range_js_1 = require("../../../../common/core/range.js");
const textEdit_js_1 = require("../../../../common/core/textEdit.js");
const rangeMapping_js_1 = require("../../../../common/diff/rangeMapping.js");
const textModelText_js_1 = require("../../../../common/model/textModelText.js");
const utils_js_1 = require("../../multiDiffEditor/utils.js");
const diffEditorSash_js_1 = require("../components/diffEditorSash.js");
const utils_js_2 = require("../utils.js");
const editorGutter_js_1 = require("../utils/editorGutter.js");
const emptyArr = [];
const width = 35;
let DiffEditorGutter = class DiffEditorGutter extends lifecycle_js_1.Disposable {
    constructor(diffEditorRoot, _diffModel, _editors, _options, _sashLayout, _boundarySashes, _instantiationService, _contextKeyService, _menuService) {
        super();
        this._diffModel = _diffModel;
        this._editors = _editors;
        this._options = _options;
        this._sashLayout = _sashLayout;
        this._boundarySashes = _boundarySashes;
        this._instantiationService = _instantiationService;
        this._contextKeyService = _contextKeyService;
        this._menuService = _menuService;
        this._menu = this._register(this._menuService.createMenu(actions_js_1.MenuId.DiffEditorHunkToolbar, this._contextKeyService));
        this._actions = (0, observable_js_1.observableFromEvent)(this, this._menu.onDidChange, () => this._menu.getActions());
        this._hasActions = this._actions.map(a => a.length > 0);
        this._showSash = (0, observable_js_1.derived)(this, reader => this._options.renderSideBySide.read(reader) && this._hasActions.read(reader));
        this.width = (0, observable_js_1.derived)(this, reader => this._hasActions.read(reader) ? width : 0);
        this.elements = (0, dom_js_1.h)('div.gutter@gutter', { style: { position: 'absolute', height: '100%', width: width + 'px' } }, []);
        this._currentDiff = (0, observable_js_1.derived)(this, (reader) => {
            const model = this._diffModel.read(reader);
            if (!model) {
                return undefined;
            }
            const mappings = model.diff.read(reader)?.mappings;
            const cursorPosition = this._editors.modifiedCursor.read(reader);
            if (!cursorPosition) {
                return undefined;
            }
            return mappings?.find(m => m.lineRangeMapping.modified.contains(cursorPosition.lineNumber));
        });
        this._selectedDiffs = (0, observable_js_1.derived)(this, (reader) => {
            /** @description selectedDiffs */
            const model = this._diffModel.read(reader);
            const diff = model?.diff.read(reader);
            // Return `emptyArr` because it is a constant. [] is always a new array and would trigger a change.
            if (!diff) {
                return emptyArr;
            }
            const selections = this._editors.modifiedSelections.read(reader);
            if (selections.every(s => s.isEmpty())) {
                return emptyArr;
            }
            const selectedLineNumbers = new lineRange_js_1.LineRangeSet(selections.map(s => lineRange_js_1.LineRange.fromRangeInclusive(s)));
            const selectedMappings = diff.mappings.filter(m => m.lineRangeMapping.innerChanges && selectedLineNumbers.intersects(m.lineRangeMapping.modified));
            const result = selectedMappings.map(mapping => ({
                mapping,
                rangeMappings: mapping.lineRangeMapping.innerChanges.filter(c => selections.some(s => range_js_1.Range.areIntersecting(c.modifiedRange, s)))
            }));
            if (result.length === 0 || result.every(r => r.rangeMappings.length === 0)) {
                return emptyArr;
            }
            return result;
        });
        this._register((0, utils_js_2.prependRemoveOnDispose)(diffEditorRoot, this.elements.root));
        this._register((0, dom_js_1.addDisposableListener)(this.elements.root, 'click', () => {
            this._editors.modified.focus();
        }));
        this._register((0, utils_js_2.applyStyle)(this.elements.root, { display: this._hasActions.map(a => a ? 'block' : 'none') }));
        (0, observable_js_1.derivedDisposable)(this, reader => {
            const showSash = this._showSash.read(reader);
            return !showSash ? undefined : new diffEditorSash_js_1.DiffEditorSash(diffEditorRoot, this._sashLayout.dimensions, this._options.enableSplitViewResizing, this._boundarySashes, (0, observable_js_1.derivedWithSetter)(this, reader => this._sashLayout.sashLeft.read(reader) - width, (v, tx) => this._sashLayout.sashLeft.set(v + width, tx)), () => this._sashLayout.resetSash());
        }).recomputeInitiallyAndOnChange(this._store);
        const gutterItems = (0, observable_js_1.derived)(this, reader => {
            const model = this._diffModel.read(reader);
            if (!model) {
                return [];
            }
            const diffs = model.diff.read(reader);
            if (!diffs) {
                return [];
            }
            const selection = this._selectedDiffs.read(reader);
            if (selection.length > 0) {
                const m = rangeMapping_js_1.DetailedLineRangeMapping.fromRangeMappings(selection.flatMap(s => s.rangeMappings));
                return [
                    new DiffGutterItem(m, true, actions_js_1.MenuId.DiffEditorSelectionToolbar, undefined, model.model.original.uri, model.model.modified.uri)
                ];
            }
            const currentDiff = this._currentDiff.read(reader);
            return diffs.mappings.map(m => new DiffGutterItem(m.lineRangeMapping.withInnerChangesFromLineRanges(), m.lineRangeMapping === currentDiff?.lineRangeMapping, actions_js_1.MenuId.DiffEditorHunkToolbar, undefined, model.model.original.uri, model.model.modified.uri));
        });
        this._register(new editorGutter_js_1.EditorGutter(this._editors.modified, this.elements.root, {
            getIntersectingGutterItems: (range, reader) => gutterItems.read(reader),
            createView: (item, target) => {
                return this._instantiationService.createInstance(DiffToolBar, item, target, this);
            },
        }));
        this._register((0, dom_js_1.addDisposableListener)(this.elements.gutter, dom_js_1.EventType.MOUSE_WHEEL, (e) => {
            if (this._editors.modified.getOption(108 /* EditorOption.scrollbar */).handleMouseWheel) {
                this._editors.modified.delegateScrollFromMouseWheelEvent(e);
            }
        }, { passive: false }));
    }
    computeStagedValue(mapping) {
        const c = mapping.innerChanges ?? [];
        const modified = new textModelText_js_1.TextModelText(this._editors.modifiedModel.get());
        const original = new textModelText_js_1.TextModelText(this._editors.original.getModel());
        const edit = new textEdit_js_1.TextEdit(c.map(c => c.toTextEdit(modified)));
        const value = edit.apply(original);
        return value;
    }
    layout(left) {
        this.elements.gutter.style.left = left + 'px';
    }
};
exports.DiffEditorGutter = DiffEditorGutter;
exports.DiffEditorGutter = DiffEditorGutter = __decorate([
    __param(6, instantiation_js_1.IInstantiationService),
    __param(7, contextkey_js_1.IContextKeyService),
    __param(8, actions_js_1.IMenuService)
], DiffEditorGutter);
class DiffGutterItem {
    constructor(mapping, showAlways, menuId, rangeOverride, originalUri, modifiedUri) {
        this.mapping = mapping;
        this.showAlways = showAlways;
        this.menuId = menuId;
        this.rangeOverride = rangeOverride;
        this.originalUri = originalUri;
        this.modifiedUri = modifiedUri;
    }
    get id() { return this.mapping.modified.toString(); }
    get range() { return this.rangeOverride ?? this.mapping.modified; }
}
let DiffToolBar = class DiffToolBar extends lifecycle_js_1.Disposable {
    constructor(_item, target, gutter, instantiationService) {
        super();
        this._item = _item;
        this._elements = (0, dom_js_1.h)('div.gutterItem', { style: { height: '20px', width: '34px' } }, [
            (0, dom_js_1.h)('div.background@background', {}, []),
            (0, dom_js_1.h)('div.buttons@buttons', {}, []),
        ]);
        this._showAlways = this._item.map(this, item => item.showAlways);
        this._menuId = this._item.map(this, item => item.menuId);
        this._isSmall = (0, observable_js_1.observableValue)(this, false);
        this._lastItemRange = undefined;
        this._lastViewRange = undefined;
        const hoverDelegate = this._register(instantiationService.createInstance(hover_js_1.WorkbenchHoverDelegate, 'element', true, { position: { hoverPosition: 1 /* HoverPosition.RIGHT */ } }));
        this._register((0, utils_js_2.appendRemoveOnDispose)(target, this._elements.root));
        this._register((0, observable_js_1.autorun)(reader => {
            /** @description update showAlways */
            const showAlways = this._showAlways.read(reader);
            this._elements.root.classList.toggle('noTransition', true);
            this._elements.root.classList.toggle('showAlways', showAlways);
            setTimeout(() => {
                this._elements.root.classList.toggle('noTransition', false);
            }, 0);
        }));
        this._register((0, observable_js_1.autorunWithStore)((reader, store) => {
            this._elements.buttons.replaceChildren();
            const i = store.add(instantiationService.createInstance(toolbar_js_1.MenuWorkbenchToolBar, this._elements.buttons, this._menuId.read(reader), {
                orientation: 1 /* ActionsOrientation.VERTICAL */,
                hoverDelegate,
                toolbarOptions: {
                    primaryGroup: g => g.startsWith('primary'),
                },
                overflowBehavior: { maxItems: this._isSmall.read(reader) ? 1 : 3 },
                hiddenItemStrategy: 0 /* HiddenItemStrategy.Ignore */,
                actionRunner: new utils_js_1.ActionRunnerWithContext(() => {
                    const item = this._item.get();
                    const mapping = item.mapping;
                    return {
                        mapping,
                        originalWithModifiedChanges: gutter.computeStagedValue(mapping),
                        originalUri: item.originalUri,
                        modifiedUri: item.modifiedUri,
                    };
                }),
                menuOptions: {
                    shouldForwardArgs: true,
                },
            }));
            store.add(i.onDidChangeMenuItems(() => {
                if (this._lastItemRange) {
                    this.layout(this._lastItemRange, this._lastViewRange);
                }
            }));
        }));
    }
    layout(itemRange, viewRange) {
        this._lastItemRange = itemRange;
        this._lastViewRange = viewRange;
        let itemHeight = this._elements.buttons.clientHeight;
        this._isSmall.set(this._item.get().mapping.original.startLineNumber === 1 && itemRange.length < 30, undefined);
        // Item might have changed
        itemHeight = this._elements.buttons.clientHeight;
        const middleHeight = itemRange.length / 2 - itemHeight / 2;
        const margin = itemHeight;
        let effectiveCheckboxTop = itemRange.start + middleHeight;
        const preferredViewPortRange = offsetRange_js_1.OffsetRange.tryCreate(margin, viewRange.endExclusive - margin - itemHeight);
        const preferredParentRange = offsetRange_js_1.OffsetRange.tryCreate(itemRange.start + margin, itemRange.endExclusive - itemHeight - margin);
        if (preferredParentRange && preferredViewPortRange && preferredParentRange.start < preferredParentRange.endExclusive) {
            effectiveCheckboxTop = preferredViewPortRange.clip(effectiveCheckboxTop);
            effectiveCheckboxTop = preferredParentRange.clip(effectiveCheckboxTop);
        }
        this._elements.buttons.style.top = `${effectiveCheckboxTop - itemRange.start}px`;
    }
};
DiffToolBar = __decorate([
    __param(3, instantiation_js_1.IInstantiationService)
], DiffToolBar);
//# sourceMappingURL=gutterFeature.js.map