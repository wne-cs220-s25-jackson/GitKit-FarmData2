"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessibleDiffViewerPrev = exports.AccessibleDiffViewerNext = exports.RevertHunkOrSelection = exports.ShowAllUnchangedRegions = exports.CollapseAllUnchangedRegions = exports.ExitCompareMove = exports.SwitchSide = exports.ToggleUseInlineViewWhenSpaceIsLimited = exports.ToggleShowMovedCodeBlocks = exports.ToggleCollapseUnchangedRegions = void 0;
exports.findDiffEditor = findDiffEditor;
exports.findFocusedDiffEditor = findFocusedDiffEditor;
const dom_js_1 = require("../../../../base/browser/dom.js");
const codicons_js_1 = require("../../../../base/common/codicons.js");
const editorExtensions_js_1 = require("../../editorExtensions.js");
const codeEditorService_js_1 = require("../../services/codeEditorService.js");
const diffEditorWidget_js_1 = require("./diffEditorWidget.js");
const editorContextKeys_js_1 = require("../../../common/editorContextKeys.js");
const nls_js_1 = require("../../../../nls.js");
const actions_js_1 = require("../../../../platform/actions/common/actions.js");
const configuration_js_1 = require("../../../../platform/configuration/common/configuration.js");
const contextkey_js_1 = require("../../../../platform/contextkey/common/contextkey.js");
require("./registrations.contribution.js");
class ToggleCollapseUnchangedRegions extends actions_js_1.Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleCollapseUnchangedRegions',
            title: (0, nls_js_1.localize2)('toggleCollapseUnchangedRegions', 'Toggle Collapse Unchanged Regions'),
            icon: codicons_js_1.Codicon.map,
            toggled: contextkey_js_1.ContextKeyExpr.has('config.diffEditor.hideUnchangedRegions.enabled'),
            precondition: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
            menu: {
                when: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
                id: actions_js_1.MenuId.EditorTitle,
                order: 22,
                group: 'navigation',
            },
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(configuration_js_1.IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.hideUnchangedRegions.enabled');
        configurationService.updateValue('diffEditor.hideUnchangedRegions.enabled', newValue);
    }
}
exports.ToggleCollapseUnchangedRegions = ToggleCollapseUnchangedRegions;
class ToggleShowMovedCodeBlocks extends actions_js_1.Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleShowMovedCodeBlocks',
            title: (0, nls_js_1.localize2)('toggleShowMovedCodeBlocks', 'Toggle Show Moved Code Blocks'),
            precondition: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(configuration_js_1.IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.experimental.showMoves');
        configurationService.updateValue('diffEditor.experimental.showMoves', newValue);
    }
}
exports.ToggleShowMovedCodeBlocks = ToggleShowMovedCodeBlocks;
class ToggleUseInlineViewWhenSpaceIsLimited extends actions_js_1.Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleUseInlineViewWhenSpaceIsLimited',
            title: (0, nls_js_1.localize2)('toggleUseInlineViewWhenSpaceIsLimited', 'Toggle Use Inline View When Space Is Limited'),
            precondition: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(configuration_js_1.IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.useInlineViewWhenSpaceIsLimited');
        configurationService.updateValue('diffEditor.useInlineViewWhenSpaceIsLimited', newValue);
    }
}
exports.ToggleUseInlineViewWhenSpaceIsLimited = ToggleUseInlineViewWhenSpaceIsLimited;
const diffEditorCategory = (0, nls_js_1.localize2)('diffEditor', "Diff Editor");
class SwitchSide extends editorExtensions_js_1.EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.switchSide',
            title: (0, nls_js_1.localize2)('switchSide', 'Switch Side'),
            icon: codicons_js_1.Codicon.arrowSwap,
            precondition: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, arg) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof diffEditorWidget_js_1.DiffEditorWidget) {
            if (arg && arg.dryRun) {
                return { destinationSelection: diffEditor.mapToOtherSide().destinationSelection };
            }
            else {
                diffEditor.switchSide();
            }
        }
        return undefined;
    }
}
exports.SwitchSide = SwitchSide;
class ExitCompareMove extends editorExtensions_js_1.EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.exitCompareMove',
            title: (0, nls_js_1.localize2)('exitCompareMove', 'Exit Compare Move'),
            icon: codicons_js_1.Codicon.close,
            precondition: editorContextKeys_js_1.EditorContextKeys.comparingMovedCode,
            f1: false,
            category: diffEditorCategory,
            keybinding: {
                weight: 10000,
                primary: 9 /* KeyCode.Escape */,
            }
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof diffEditorWidget_js_1.DiffEditorWidget) {
            diffEditor.exitCompareMove();
        }
    }
}
exports.ExitCompareMove = ExitCompareMove;
class CollapseAllUnchangedRegions extends editorExtensions_js_1.EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.collapseAllUnchangedRegions',
            title: (0, nls_js_1.localize2)('collapseAllUnchangedRegions', 'Collapse All Unchanged Regions'),
            icon: codicons_js_1.Codicon.fold,
            precondition: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof diffEditorWidget_js_1.DiffEditorWidget) {
            diffEditor.collapseAllUnchangedRegions();
        }
    }
}
exports.CollapseAllUnchangedRegions = CollapseAllUnchangedRegions;
class ShowAllUnchangedRegions extends editorExtensions_js_1.EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.showAllUnchangedRegions',
            title: (0, nls_js_1.localize2)('showAllUnchangedRegions', 'Show All Unchanged Regions'),
            icon: codicons_js_1.Codicon.unfold,
            precondition: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof diffEditorWidget_js_1.DiffEditorWidget) {
            diffEditor.showAllUnchangedRegions();
        }
    }
}
exports.ShowAllUnchangedRegions = ShowAllUnchangedRegions;
class RevertHunkOrSelection extends actions_js_1.Action2 {
    constructor() {
        super({
            id: 'diffEditor.revert',
            title: (0, nls_js_1.localize2)('revert', 'Revert'),
            f1: false,
            category: diffEditorCategory,
        });
    }
    run(accessor, arg) {
        const diffEditor = findDiffEditor(accessor, arg.originalUri, arg.modifiedUri);
        if (diffEditor instanceof diffEditorWidget_js_1.DiffEditorWidget) {
            diffEditor.revertRangeMappings(arg.mapping.innerChanges ?? []);
        }
        return undefined;
    }
}
exports.RevertHunkOrSelection = RevertHunkOrSelection;
const accessibleDiffViewerCategory = (0, nls_js_1.localize2)('accessibleDiffViewer', "Accessible Diff Viewer");
class AccessibleDiffViewerNext extends actions_js_1.Action2 {
    static { this.id = 'editor.action.accessibleDiffViewer.next'; }
    constructor() {
        super({
            id: AccessibleDiffViewerNext.id,
            title: (0, nls_js_1.localize2)('editor.action.accessibleDiffViewer.next', 'Go to Next Difference'),
            category: accessibleDiffViewerCategory,
            precondition: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
            keybinding: {
                primary: 65 /* KeyCode.F7 */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            },
            f1: true,
        });
    }
    run(accessor) {
        const diffEditor = findFocusedDiffEditor(accessor);
        diffEditor?.accessibleDiffViewerNext();
    }
}
exports.AccessibleDiffViewerNext = AccessibleDiffViewerNext;
class AccessibleDiffViewerPrev extends actions_js_1.Action2 {
    static { this.id = 'editor.action.accessibleDiffViewer.prev'; }
    constructor() {
        super({
            id: AccessibleDiffViewerPrev.id,
            title: (0, nls_js_1.localize2)('editor.action.accessibleDiffViewer.prev', 'Go to Previous Difference'),
            category: accessibleDiffViewerCategory,
            precondition: contextkey_js_1.ContextKeyExpr.has('isInDiffEditor'),
            keybinding: {
                primary: 1024 /* KeyMod.Shift */ | 65 /* KeyCode.F7 */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            },
            f1: true,
        });
    }
    run(accessor) {
        const diffEditor = findFocusedDiffEditor(accessor);
        diffEditor?.accessibleDiffViewerPrev();
    }
}
exports.AccessibleDiffViewerPrev = AccessibleDiffViewerPrev;
function findDiffEditor(accessor, originalUri, modifiedUri) {
    const codeEditorService = accessor.get(codeEditorService_js_1.ICodeEditorService);
    const diffEditors = codeEditorService.listDiffEditors();
    return diffEditors.find(diffEditor => {
        const modified = diffEditor.getModifiedEditor();
        const original = diffEditor.getOriginalEditor();
        return modified && modified.getModel()?.uri.toString() === modifiedUri.toString()
            && original && original.getModel()?.uri.toString() === originalUri.toString();
    }) || null;
}
function findFocusedDiffEditor(accessor) {
    const codeEditorService = accessor.get(codeEditorService_js_1.ICodeEditorService);
    const diffEditors = codeEditorService.listDiffEditors();
    const activeElement = (0, dom_js_1.getActiveElement)();
    if (activeElement) {
        for (const d of diffEditors) {
            const container = d.getContainerDomNode();
            if (isElementOrParentOf(container, activeElement)) {
                return d;
            }
        }
    }
    return null;
}
function isElementOrParentOf(elementOrParent, element) {
    let e = element;
    while (e) {
        if (e === elementOrParent) {
            return true;
        }
        e = e.parentElement;
    }
    return false;
}
//# sourceMappingURL=commands.js.map