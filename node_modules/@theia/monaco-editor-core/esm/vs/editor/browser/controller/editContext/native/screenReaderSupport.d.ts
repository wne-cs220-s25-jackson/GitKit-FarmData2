import { FastDomNode } from '../../../../../base/browser/fastDomNode.js';
import { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';
import { IKeybindingService } from '../../../../../platform/keybinding/common/keybinding.js';
import { ViewConfigurationChangedEvent, ViewCursorStateChangedEvent } from '../../../../common/viewEvents.js';
import { ViewContext } from '../../../../common/viewModel/viewContext.js';
import { IEditorAriaOptions } from '../../../editorBrowser.js';
import { RestrictedRenderingContext, RenderingContext } from '../../../view/renderingContext.js';
import { ScreenReaderContentState } from '../screenReaderUtils.js';
export declare class ScreenReaderSupport {
    private readonly _domNode;
    private readonly _context;
    private readonly _keybindingService;
    private readonly _accessibilityService;
    private _contentLeft;
    private _contentWidth;
    private _contentHeight;
    private _lineHeight;
    private _fontInfo;
    private _accessibilityPageSize;
    private _ignoreSelectionChangeTime;
    private _primarySelection;
    private _primaryCursorVisibleRange;
    private _screenReaderContentState;
    constructor(_domNode: FastDomNode<HTMLElement>, _context: ViewContext, _keybindingService: IKeybindingService, _accessibilityService: IAccessibilityService);
    setIgnoreSelectionChangeTime(reason: string): void;
    getIgnoreSelectionChangeTime(): number;
    resetSelectionChangeTime(): void;
    onConfigurationChanged(e: ViewConfigurationChangedEvent): void;
    private _updateConfigurationSettings;
    private _updateDomAttributes;
    onCursorStateChanged(e: ViewCursorStateChangedEvent): void;
    prepareRender(ctx: RenderingContext): void;
    render(ctx: RestrictedRenderingContext): void;
    private _renderAtTopLeft;
    private _doRender;
    private _setScrollTop;
    setAriaOptions(options: IEditorAriaOptions): void;
    writeScreenReaderContent(): void;
    get screenReaderContentState(): ScreenReaderContentState | undefined;
    private _getScreenReaderContentState;
    private _setSelectionOfScreenReaderContent;
}
