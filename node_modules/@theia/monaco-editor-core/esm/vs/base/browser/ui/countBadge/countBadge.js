"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountBadge = exports.unthemedCountStyles = void 0;
const dom_js_1 = require("../../dom.js");
const strings_js_1 = require("../../../common/strings.js");
require("./countBadge.css");
const lifecycle_js_1 = require("../../../common/lifecycle.js");
const hoverDelegate2_js_1 = require("../hover/hoverDelegate2.js");
exports.unthemedCountStyles = {
    badgeBackground: '#4D4D4D',
    badgeForeground: '#FFFFFF',
    badgeBorder: undefined
};
class CountBadge extends lifecycle_js_1.Disposable {
    constructor(container, options, styles) {
        super();
        this.options = options;
        this.styles = styles;
        this.count = 0;
        this.hover = this._register(new lifecycle_js_1.MutableDisposable());
        this.element = (0, dom_js_1.append)(container, (0, dom_js_1.$)('.monaco-count-badge'));
        this._register((0, lifecycle_js_1.toDisposable)(() => container.removeChild(this.element)));
        this.countFormat = this.options.countFormat || '{0}';
        this.titleFormat = this.options.titleFormat || '';
        this.setCount(this.options.count || 0);
        this.updateHover();
    }
    setCount(count) {
        this.count = count;
        this.render();
    }
    setCountFormat(countFormat) {
        this.countFormat = countFormat;
        this.render();
    }
    setTitleFormat(titleFormat) {
        this.titleFormat = titleFormat;
        this.updateHover();
        this.render();
    }
    updateHover() {
        if (this.titleFormat !== '' && !this.hover.value) {
            this.hover.value = (0, hoverDelegate2_js_1.getBaseLayerHoverDelegate)().setupDelayedHoverAtMouse(this.element, () => ({ content: (0, strings_js_1.format)(this.titleFormat, this.count), appearance: { compact: true } }));
        }
        else if (this.titleFormat === '' && this.hover.value) {
            this.hover.value = undefined;
        }
    }
    render() {
        this.element.textContent = (0, strings_js_1.format)(this.countFormat, this.count);
        this.element.style.backgroundColor = this.styles.badgeBackground ?? '';
        this.element.style.color = this.styles.badgeForeground ?? '';
        if (this.styles.badgeBorder) {
            this.element.style.border = `1px solid ${this.styles.badgeBorder}`;
        }
    }
}
exports.CountBadge = CountBadge;
//# sourceMappingURL=countBadge.js.map