"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.readHotReloadableExport = readHotReloadableExport;
exports.observeHotReloadableExports = observeHotReloadableExports;
exports.createHotClass = createHotClass;
const hotReload_js_1 = require("./hotReload.js");
const observable_js_1 = require("./observable.js");
function readHotReloadableExport(value, reader) {
    observeHotReloadableExports([value], reader);
    return value;
}
function observeHotReloadableExports(values, reader) {
    if ((0, hotReload_js_1.isHotReloadEnabled)()) {
        const o = (0, observable_js_1.observableSignalFromEvent)('reload', event => (0, hotReload_js_1.registerHotReloadHandler)(({ oldExports }) => {
            if (![...Object.values(oldExports)].some(v => values.includes(v))) {
                return undefined;
            }
            return (_newExports) => {
                event(undefined);
                return true;
            };
        }));
        o.read(reader);
    }
}
const classes = new Map();
function createHotClass(clazz) {
    if (!(0, hotReload_js_1.isHotReloadEnabled)()) {
        return (0, observable_js_1.constObservable)(clazz);
    }
    const id = clazz.name;
    let existing = classes.get(id);
    if (!existing) {
        existing = (0, observable_js_1.observableValue)(id, clazz);
        classes.set(id, existing);
    }
    else {
        setTimeout(() => {
            existing.set(clazz, undefined);
        }, 0);
    }
    return existing;
}
//# sourceMappingURL=hotReloadHelpers.js.map