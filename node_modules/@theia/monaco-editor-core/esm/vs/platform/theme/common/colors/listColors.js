"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.editorActionListFocusBackground = exports.editorActionListFocusForeground = exports.editorActionListForeground = exports.editorActionListBackground = exports.tableOddRowsBackgroundColor = exports.tableColumnsBorder = exports.treeInactiveIndentGuidesStroke = exports.treeIndentGuidesStroke = exports.listDeemphasizedForeground = exports.listFilterMatchHighlightBorder = exports.listFilterMatchHighlight = exports.listFilterWidgetShadow = exports.listFilterWidgetNoMatchesOutline = exports.listFilterWidgetOutline = exports.listFilterWidgetBackground = exports.listWarningForeground = exports.listErrorForeground = exports.listInvalidItemForeground = exports.listFocusHighlightForeground = exports.listHighlightForeground = exports.listDropBetweenBackground = exports.listDropOverBackground = exports.listHoverForeground = exports.listHoverBackground = exports.listInactiveFocusOutline = exports.listInactiveFocusBackground = exports.listInactiveSelectionIconForeground = exports.listInactiveSelectionForeground = exports.listInactiveSelectionBackground = exports.listActiveSelectionIconForeground = exports.listActiveSelectionForeground = exports.listActiveSelectionBackground = exports.listFocusAndSelectionOutline = exports.listFocusOutline = exports.listFocusForeground = exports.listFocusBackground = void 0;
const nls = require("../../../../nls.js");
// Import the effects we need
const color_js_1 = require("../../../../base/common/color.js");
const colorUtils_js_1 = require("../colorUtils.js");
// Import the colors we need
const baseColors_js_1 = require("./baseColors.js");
const editorColors_js_1 = require("./editorColors.js");
exports.listFocusBackground = (0, colorUtils_js_1.registerColor)('list.focusBackground', null, nls.localize('listFocusBackground', "List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
exports.listFocusForeground = (0, colorUtils_js_1.registerColor)('list.focusForeground', null, nls.localize('listFocusForeground', "List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
exports.listFocusOutline = (0, colorUtils_js_1.registerColor)('list.focusOutline', { dark: baseColors_js_1.focusBorder, light: baseColors_js_1.focusBorder, hcDark: baseColors_js_1.activeContrastBorder, hcLight: baseColors_js_1.activeContrastBorder }, nls.localize('listFocusOutline', "List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
exports.listFocusAndSelectionOutline = (0, colorUtils_js_1.registerColor)('list.focusAndSelectionOutline', null, nls.localize('listFocusAndSelectionOutline', "List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not."));
exports.listActiveSelectionBackground = (0, colorUtils_js_1.registerColor)('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: color_js_1.Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listActiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
exports.listActiveSelectionForeground = (0, colorUtils_js_1.registerColor)('list.activeSelectionForeground', { dark: color_js_1.Color.white, light: color_js_1.Color.white, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
exports.listActiveSelectionIconForeground = (0, colorUtils_js_1.registerColor)('list.activeSelectionIconForeground', null, nls.localize('listActiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
exports.listInactiveSelectionBackground = (0, colorUtils_js_1.registerColor)('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: color_js_1.Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listInactiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
exports.listInactiveSelectionForeground = (0, colorUtils_js_1.registerColor)('list.inactiveSelectionForeground', null, nls.localize('listInactiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
exports.listInactiveSelectionIconForeground = (0, colorUtils_js_1.registerColor)('list.inactiveSelectionIconForeground', null, nls.localize('listInactiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
exports.listInactiveFocusBackground = (0, colorUtils_js_1.registerColor)('list.inactiveFocusBackground', null, nls.localize('listInactiveFocusBackground', "List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
exports.listInactiveFocusOutline = (0, colorUtils_js_1.registerColor)('list.inactiveFocusOutline', null, nls.localize('listInactiveFocusOutline', "List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
exports.listHoverBackground = (0, colorUtils_js_1.registerColor)('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: color_js_1.Color.white.transparent(0.1), hcLight: color_js_1.Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listHoverBackground', "List/Tree background when hovering over items using the mouse."));
exports.listHoverForeground = (0, colorUtils_js_1.registerColor)('list.hoverForeground', null, nls.localize('listHoverForeground', "List/Tree foreground when hovering over items using the mouse."));
exports.listDropOverBackground = (0, colorUtils_js_1.registerColor)('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('listDropBackground', "List/Tree drag and drop background when moving items over other items when using the mouse."));
exports.listDropBetweenBackground = (0, colorUtils_js_1.registerColor)('list.dropBetweenBackground', { dark: baseColors_js_1.iconForeground, light: baseColors_js_1.iconForeground, hcDark: null, hcLight: null }, nls.localize('listDropBetweenBackground', "List/Tree drag and drop border color when moving items between items when using the mouse."));
exports.listHighlightForeground = (0, colorUtils_js_1.registerColor)('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: baseColors_js_1.focusBorder, hcLight: baseColors_js_1.focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));
exports.listFocusHighlightForeground = (0, colorUtils_js_1.registerColor)('list.focusHighlightForeground', { dark: exports.listHighlightForeground, light: (0, colorUtils_js_1.ifDefinedThenElse)(exports.listActiveSelectionBackground, exports.listHighlightForeground, '#BBE7FF'), hcDark: exports.listHighlightForeground, hcLight: exports.listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));
exports.listInvalidItemForeground = (0, colorUtils_js_1.registerColor)('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));
exports.listErrorForeground = (0, colorUtils_js_1.registerColor)('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));
exports.listWarningForeground = (0, colorUtils_js_1.registerColor)('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));
exports.listFilterWidgetBackground = (0, colorUtils_js_1.registerColor)('listFilterWidget.background', { light: (0, colorUtils_js_1.darken)(editorColors_js_1.editorWidgetBackground, 0), dark: (0, colorUtils_js_1.lighten)(editorColors_js_1.editorWidgetBackground, 0), hcDark: editorColors_js_1.editorWidgetBackground, hcLight: editorColors_js_1.editorWidgetBackground }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));
exports.listFilterWidgetOutline = (0, colorUtils_js_1.registerColor)('listFilterWidget.outline', { dark: color_js_1.Color.transparent, light: color_js_1.Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));
exports.listFilterWidgetNoMatchesOutline = (0, colorUtils_js_1.registerColor)('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: baseColors_js_1.contrastBorder, hcLight: baseColors_js_1.contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));
exports.listFilterWidgetShadow = (0, colorUtils_js_1.registerColor)('listFilterWidget.shadow', editorColors_js_1.widgetShadow, nls.localize('listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));
exports.listFilterMatchHighlight = (0, colorUtils_js_1.registerColor)('list.filterMatchBackground', { dark: editorColors_js_1.editorFindMatchHighlight, light: editorColors_js_1.editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));
exports.listFilterMatchHighlightBorder = (0, colorUtils_js_1.registerColor)('list.filterMatchBorder', { dark: editorColors_js_1.editorFindMatchHighlightBorder, light: editorColors_js_1.editorFindMatchHighlightBorder, hcDark: baseColors_js_1.contrastBorder, hcLight: baseColors_js_1.activeContrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));
exports.listDeemphasizedForeground = (0, colorUtils_js_1.registerColor)('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('listDeemphasizedForeground', "List/Tree foreground color for items that are deemphasized."));
// ------ tree
exports.treeIndentGuidesStroke = (0, colorUtils_js_1.registerColor)('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('treeIndentGuidesStroke', "Tree stroke color for the indentation guides."));
exports.treeInactiveIndentGuidesStroke = (0, colorUtils_js_1.registerColor)('tree.inactiveIndentGuidesStroke', (0, colorUtils_js_1.transparent)(exports.treeIndentGuidesStroke, 0.4), nls.localize('treeInactiveIndentGuidesStroke', "Tree stroke color for the indentation guides that are not active."));
// ------ table
exports.tableColumnsBorder = (0, colorUtils_js_1.registerColor)('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('tableColumnsBorder', "Table border color between columns."));
exports.tableOddRowsBackgroundColor = (0, colorUtils_js_1.registerColor)('tree.tableOddRowsBackground', { dark: (0, colorUtils_js_1.transparent)(baseColors_js_1.foreground, 0.04), light: (0, colorUtils_js_1.transparent)(baseColors_js_1.foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('tableOddRowsBackgroundColor', "Background color for odd table rows."));
// ------ action list
exports.editorActionListBackground = (0, colorUtils_js_1.registerColor)('editorActionList.background', editorColors_js_1.editorWidgetBackground, nls.localize('editorActionListBackground', "Action List background color."));
exports.editorActionListForeground = (0, colorUtils_js_1.registerColor)('editorActionList.foreground', editorColors_js_1.editorWidgetForeground, nls.localize('editorActionListForeground', "Action List foreground color."));
exports.editorActionListFocusForeground = (0, colorUtils_js_1.registerColor)('editorActionList.focusForeground', exports.listActiveSelectionForeground, nls.localize('editorActionListFocusForeground', "Action List foreground color for the focused item."));
exports.editorActionListFocusBackground = (0, colorUtils_js_1.registerColor)('editorActionList.focusBackground', exports.listActiveSelectionBackground, nls.localize('editorActionListFocusBackground', "Action List background color for the focused item."));
//# sourceMappingURL=listColors.js.map