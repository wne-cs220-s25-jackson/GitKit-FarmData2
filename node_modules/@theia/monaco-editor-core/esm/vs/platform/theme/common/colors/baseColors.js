"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.textCodeBlockBackground = exports.textBlockQuoteBorder = exports.textBlockQuoteBackground = exports.textPreformatBackground = exports.textPreformatForeground = exports.textSeparatorForeground = exports.textLinkActiveForeground = exports.textLinkForeground = exports.selectionBackground = exports.activeContrastBorder = exports.contrastBorder = exports.focusBorder = exports.iconForeground = exports.descriptionForeground = exports.errorForeground = exports.disabledForeground = exports.foreground = void 0;
const nls = require("../../../../nls.js");
// Import the effects we need
const color_js_1 = require("../../../../base/common/color.js");
const colorUtils_js_1 = require("../colorUtils.js");
exports.foreground = (0, colorUtils_js_1.registerColor)('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('foreground', "Overall foreground color. This color is only used if not overridden by a component."));
exports.disabledForeground = (0, colorUtils_js_1.registerColor)('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, nls.localize('disabledForeground', "Overall foreground for disabled elements. This color is only used if not overridden by a component."));
exports.errorForeground = (0, colorUtils_js_1.registerColor)('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('errorForeground', "Overall foreground color for error messages. This color is only used if not overridden by a component."));
exports.descriptionForeground = (0, colorUtils_js_1.registerColor)('descriptionForeground', { light: '#717171', dark: (0, colorUtils_js_1.transparent)(exports.foreground, 0.7), hcDark: (0, colorUtils_js_1.transparent)(exports.foreground, 0.7), hcLight: (0, colorUtils_js_1.transparent)(exports.foreground, 0.7) }, nls.localize('descriptionForeground', "Foreground color for description text providing additional information, for example for a label."));
exports.iconForeground = (0, colorUtils_js_1.registerColor)('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('iconForeground', "The default color for icons in the workbench."));
exports.focusBorder = (0, colorUtils_js_1.registerColor)('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#006BBD' }, nls.localize('focusBorder', "Overall border color for focused elements. This color is only used if not overridden by a component."));
exports.contrastBorder = (0, colorUtils_js_1.registerColor)('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, nls.localize('contrastBorder', "An extra border around elements to separate them from others for greater contrast."));
exports.activeContrastBorder = (0, colorUtils_js_1.registerColor)('contrastActiveBorder', { light: null, dark: null, hcDark: exports.focusBorder, hcLight: exports.focusBorder }, nls.localize('activeContrastBorder', "An extra border around active elements to separate them from others for greater contrast."));
exports.selectionBackground = (0, colorUtils_js_1.registerColor)('selection.background', null, nls.localize('selectionBackground', "The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor."));
// ------ text link
exports.textLinkForeground = (0, colorUtils_js_1.registerColor)('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkForeground', "Foreground color for links in text."));
exports.textLinkActiveForeground = (0, colorUtils_js_1.registerColor)('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkActiveForeground', "Foreground color for links in text when clicked on and on mouse hover."));
exports.textSeparatorForeground = (0, colorUtils_js_1.registerColor)('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: color_js_1.Color.black, hcLight: '#292929' }, nls.localize('textSeparatorForeground', "Color for text separators."));
// ------ text preformat
exports.textPreformatForeground = (0, colorUtils_js_1.registerColor)('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#000000', hcLight: '#FFFFFF' }, nls.localize('textPreformatForeground', "Foreground color for preformatted text segments."));
exports.textPreformatBackground = (0, colorUtils_js_1.registerColor)('textPreformat.background', { light: '#0000001A', dark: '#FFFFFF1A', hcDark: '#FFFFFF', hcLight: '#09345f' }, nls.localize('textPreformatBackground', "Background color for preformatted text segments."));
// ------ text block quote
exports.textBlockQuoteBackground = (0, colorUtils_js_1.registerColor)('textBlockQuote.background', { light: '#f2f2f2', dark: '#222222', hcDark: null, hcLight: '#F2F2F2' }, nls.localize('textBlockQuoteBackground', "Background color for block quotes in text."));
exports.textBlockQuoteBorder = (0, colorUtils_js_1.registerColor)('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: color_js_1.Color.white, hcLight: '#292929' }, nls.localize('textBlockQuoteBorder', "Border color for block quotes in text."));
// ------ text code block
exports.textCodeBlockBackground = (0, colorUtils_js_1.registerColor)('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: color_js_1.Color.black, hcLight: '#F2F2F2' }, nls.localize('textCodeBlockBackground', "Background color for code blocks in text."));
//# sourceMappingURL=baseColors.js.map