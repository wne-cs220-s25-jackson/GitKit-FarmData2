import { EditorServiceOverrides, MonacoEditor, MonacoEditorServices } from './monaco-editor';
import { CodeEditorWidget, ICodeEditorWidgetOptions } from '@theia/monaco-editor-core/esm/vs/editor/browser/widget/codeEditor/codeEditorWidget';
import { IInstantiationService } from '@theia/monaco-editor-core/esm/vs/platform/instantiation/common/instantiation';
import { Disposable, DisposableCollection, Emitter, TextDocumentContentChangeDelta, URI } from '@theia/core';
import { MonacoEditorModel } from './monaco-editor-model';
import { Dimension, EditorMouseEvent, Position, TextDocumentChangeEvent } from '@theia/editor/lib/browser';
import * as monaco from '@theia/monaco-editor-core';
import { ElementExt } from '@theia/core/shared/@phosphor/domutils';
import { Selection } from '@theia/editor/lib/browser/editor';
export declare class SimpleMonacoEditor extends MonacoEditorServices implements Disposable {
    readonly uri: URI;
    readonly document: MonacoEditorModel;
    readonly node: HTMLElement;
    protected editor: CodeEditorWidget;
    protected readonly toDispose: DisposableCollection;
    protected readonly onCursorPositionChangedEmitter: Emitter<Position>;
    protected readonly onFocusChangedEmitter: Emitter<boolean>;
    protected readonly onDocumentContentChangedEmitter: Emitter<TextDocumentChangeEvent>;
    readonly onDocumentContentChanged: import("@theia/core").Event<TextDocumentChangeEvent>;
    protected readonly onMouseDownEmitter: Emitter<EditorMouseEvent>;
    protected readonly onLanguageChangedEmitter: Emitter<string>;
    readonly onLanguageChanged: import("@theia/core").Event<string>;
    protected readonly onScrollChangedEmitter: Emitter<void>;
    readonly onEncodingChanged: import("@theia/core").Event<string>;
    protected readonly onResizeEmitter: Emitter<Dimension | null>;
    readonly onDidResize: import("@theia/core").Event<Dimension | null>;
    readonly onDidChangeReadOnly: import("@theia/core").Event<boolean | import("@theia/core/lib/common/markdown-rendering").MarkdownString>;
    constructor(uri: URI, document: MonacoEditorModel, node: HTMLElement, services: MonacoEditorServices, options?: MonacoEditor.IOptions, override?: EditorServiceOverrides, widgetOptions?: ICodeEditorWidgetOptions);
    getControl(): CodeEditorWidget;
    onSelectionChanged(listener: (range: Selection) => void): Disposable;
    protected create(options?: MonacoEditor.IOptions, override?: EditorServiceOverrides, widgetOptions?: ICodeEditorWidgetOptions): Disposable;
    protected addHandlers(codeEditor: CodeEditorWidget): void;
    setLanguage(languageId: string): void;
    protected fireLanguageChanged(languageId: string): void;
    protected getInstantiatorWithOverrides(override?: EditorServiceOverrides): IInstantiationService;
    protected mapModelContentChange(change: monaco.editor.IModelContentChange): TextDocumentContentChangeDelta;
    focus(): void;
    refresh(): void;
    resizeToFit(): void;
    setSize(dimension: Dimension): void;
    protected autoresize(): void;
    protected resize(dimension?: Dimension): void;
    protected computeLayoutSize(hostNode: HTMLElement, dimension: monaco.editor.IDimension | undefined): monaco.editor.IDimension;
    protected getWidth(hostNode: HTMLElement, boxSizing: ElementExt.IBoxSizing): number;
    protected getHeight(hostNode: HTMLElement, boxSizing: ElementExt.IBoxSizing): number;
    dispose(): void;
}
//# sourceMappingURL=simple-monaco-editor.d.ts.map