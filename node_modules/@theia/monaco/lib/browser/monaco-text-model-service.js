"use strict";
// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonacoTextModelService = exports.MonacoEditorModelFactory = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("@theia/core/shared/inversify");
const uri_1 = require("@theia/core/lib/common/uri");
const core_1 = require("@theia/core");
const browser_1 = require("@theia/editor/lib/browser");
const monaco_editor_model_1 = require("./monaco-editor-model");
const monaco_to_protocol_converter_1 = require("./monaco-to-protocol-converter");
const protocol_to_monaco_converter_1 = require("./protocol-to-monaco-converter");
const logger_1 = require("@theia/core/lib/common/logger");
const file_service_1 = require("@theia/filesystem/lib/browser/file-service");
const standaloneServices_1 = require("@theia/monaco-editor-core/esm/vs/editor/standalone/browser/standaloneServices");
const textResourceConfiguration_1 = require("@theia/monaco-editor-core/esm/vs/editor/common/services/textResourceConfiguration");
exports.MonacoEditorModelFactory = Symbol('MonacoEditorModelFactory');
let MonacoTextModelService = class MonacoTextModelService {
    constructor() {
        this._models = new core_1.ReferenceCollection(uri => this.loadModel(new uri_1.default(uri)));
        this.modelOptions = {
            'editor.tabSize': 'tabSize',
            'editor.insertSpaces': 'insertSpaces',
            'editor.indentSize': 'indentSize'
        };
    }
    init() {
        const resourcePropertiesService = standaloneServices_1.StandaloneServices.get(textResourceConfiguration_1.ITextResourcePropertiesService);
        if (resourcePropertiesService) {
            resourcePropertiesService.getEOL = () => {
                const eol = this.editorPreferences['files.eol'];
                if (eol && eol !== 'auto') {
                    return eol;
                }
                return core_1.OS.backend.EOL;
            };
        }
    }
    get models() {
        return this._models.values();
    }
    get(uri) {
        return this._models.get(uri);
    }
    get onDidCreate() {
        return this._models.onDidCreate;
    }
    createModelReference(raw) {
        return this._models.acquire(raw.toString());
    }
    /**
     * creates a model which is not saved by the model service.
     * this will therefore also not be created on backend side.
     */
    createUnmanagedModel(raw) {
        return this.loadModel(new uri_1.default(raw.toString()));
    }
    async loadModel(uri) {
        await this.editorPreferences.ready;
        const resource = await this.resourceProvider(uri);
        const model = await (await this.createModel(resource)).load();
        return model;
    }
    createModel(resource) {
        const factory = this.factories.getContributions().find(({ scheme }) => resource.uri.scheme === scheme);
        return factory ? factory.createModel(resource) : new monaco_editor_model_1.MonacoEditorModel(resource, this.m2p, this.p2m, this.logger, this.editorPreferences);
    }
    toModelOption(editorPreference) {
        switch (editorPreference) {
            case 'editor.tabSize': return 'tabSize';
            // @monaco-uplift: uncomment this line once 'editor.indentSize' preference is available
            //  case 'editor.indentSize': return 'indentSize';
            case 'editor.insertSpaces': return 'insertSpaces';
            case 'editor.bracketPairColorization.enabled':
            case 'editor.bracketPairColorization.independentColorPoolPerBracketType':
                return 'bracketColorizationOptions';
            case 'editor.trimAutoWhitespace': return 'trimAutoWhitespace';
        }
        return undefined;
    }
    registerTextModelContentProvider(scheme, provider) {
        return {
            dispose() {
                // no-op
            }
        };
    }
    canHandleResource(resource) {
        return this.fileService.canHandleResource(uri_1.default.fromComponents(resource));
    }
};
exports.MonacoTextModelService = MonacoTextModelService;
tslib_1.__decorate([
    (0, inversify_1.inject)(core_1.ResourceProvider),
    tslib_1.__metadata("design:type", Function)
], MonacoTextModelService.prototype, "resourceProvider", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(browser_1.EditorPreferences),
    tslib_1.__metadata("design:type", Object)
], MonacoTextModelService.prototype, "editorPreferences", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(monaco_to_protocol_converter_1.MonacoToProtocolConverter),
    tslib_1.__metadata("design:type", monaco_to_protocol_converter_1.MonacoToProtocolConverter)
], MonacoTextModelService.prototype, "m2p", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(protocol_to_monaco_converter_1.ProtocolToMonacoConverter),
    tslib_1.__metadata("design:type", protocol_to_monaco_converter_1.ProtocolToMonacoConverter)
], MonacoTextModelService.prototype, "p2m", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(core_1.ContributionProvider),
    (0, inversify_1.named)(exports.MonacoEditorModelFactory),
    tslib_1.__metadata("design:type", Object)
], MonacoTextModelService.prototype, "factories", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(logger_1.ILogger),
    tslib_1.__metadata("design:type", Object)
], MonacoTextModelService.prototype, "logger", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(file_service_1.FileService),
    tslib_1.__metadata("design:type", file_service_1.FileService)
], MonacoTextModelService.prototype, "fileService", void 0);
tslib_1.__decorate([
    (0, inversify_1.postConstruct)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], MonacoTextModelService.prototype, "init", null);
exports.MonacoTextModelService = MonacoTextModelService = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], MonacoTextModelService);
//# sourceMappingURL=monaco-text-model-service.js.map