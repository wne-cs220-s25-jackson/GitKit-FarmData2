"use strict";
// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.bindVsxExtensionsPreferences = exports.createVsxExtensionsPreferences = exports.VsxExtensionsPreferences = exports.VsxExtensionsPreferenceContribution = exports.VsxExtensionsPreferenceSchema = void 0;
const preferences_1 = require("@theia/core/lib/browser/preferences");
const core_1 = require("@theia/core");
exports.VsxExtensionsPreferenceSchema = {
    'type': 'object',
    properties: {
        'extensions.onlyShowVerifiedExtensions': {
            type: 'boolean',
            default: false,
            description: core_1.nls.localize('theia/vsx-registry/onlyShowVerifiedExtensionsDescription', 'This allows the {0} to only show verified extensions.', 'Open VSX Registry')
        },
    }
};
exports.VsxExtensionsPreferenceContribution = Symbol('VsxExtensionsPreferenceContribution');
exports.VsxExtensionsPreferences = Symbol('VsxExtensionsPreferences');
function createVsxExtensionsPreferences(preferences, schema = exports.VsxExtensionsPreferenceSchema) {
    return (0, preferences_1.createPreferenceProxy)(preferences, schema);
}
exports.createVsxExtensionsPreferences = createVsxExtensionsPreferences;
function bindVsxExtensionsPreferences(bind) {
    bind(exports.VsxExtensionsPreferences).toDynamicValue(ctx => {
        const preferences = ctx.container.get(preferences_1.PreferenceService);
        const contribution = ctx.container.get(exports.VsxExtensionsPreferenceContribution);
        return createVsxExtensionsPreferences(preferences, contribution.schema);
    }).inSingletonScope();
    bind(exports.VsxExtensionsPreferenceContribution).toConstantValue({ schema: exports.VsxExtensionsPreferenceSchema });
    bind(preferences_1.PreferenceContribution).toService(exports.VsxExtensionsPreferenceContribution);
}
exports.bindVsxExtensionsPreferences = bindVsxExtensionsPreferences;
//# sourceMappingURL=vsx-extensions-preferences.js.map