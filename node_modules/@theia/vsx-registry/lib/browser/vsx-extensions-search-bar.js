"use strict";
// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.VSXExtensionsSearchBar = void 0;
const tslib_1 = require("tslib");
const React = require("@theia/core/shared/react");
const inversify_1 = require("@theia/core/shared/inversify");
const widgets_1 = require("@theia/core/lib/browser/widgets");
const browser_1 = require("@theia/core/lib/browser");
const vsx_extensions_search_model_1 = require("./vsx-extensions-search-model");
const vsx_extensions_model_1 = require("./vsx-extensions-model");
const nls_1 = require("@theia/core/lib/common/nls");
let VSXExtensionsSearchBar = class VSXExtensionsSearchBar extends widgets_1.ReactWidget {
    constructor() {
        super(...arguments);
        this.updateQuery = (e) => this.searchModel.query = e.target.value;
    }
    init() {
        this.onlyShowVerifiedExtensions = this.preferenceService.get('extensions.onlyShowVerifiedExtensions');
        this.id = 'vsx-extensions-search-bar';
        this.addClass('theia-vsx-extensions-search-bar');
        this.searchModel.onDidChangeQuery((query) => this.updateSearchTerm(query));
        this.preferenceService.onPreferenceChanged(change => {
            if (change.preferenceName === 'extensions.onlyShowVerifiedExtensions') {
                this.extensionsModel.setOnlyShowVerifiedExtensions(!!change.newValue);
                this.onlyShowVerifiedExtensions = change.newValue;
                this.update();
            }
        });
    }
    render() {
        return React.createElement("div", { className: 'vsx-search-container' },
            React.createElement("input", { type: 'text', ref: input => this.input = input || undefined, defaultValue: this.searchModel.query, spellCheck: false, className: 'theia-input', placeholder: nls_1.nls.localize('theia/vsx-registry/searchPlaceholder', 'Search Extensions in {0}', 'Open VSX Registry'), onChange: this.updateQuery }),
            this.renderOptionContainer());
    }
    updateSearchTerm(term) {
        if (this.input) {
            this.input.value = term;
        }
    }
    renderOptionContainer() {
        const showVerifiedExtensions = this.renderShowVerifiedExtensions();
        return React.createElement("div", { className: 'option-buttons' }, showVerifiedExtensions);
    }
    renderShowVerifiedExtensions() {
        return React.createElement("span", { className: `${(0, widgets_1.codicon)('verified')} option action-label ${this.onlyShowVerifiedExtensions ? 'enabled' : ''}`, title: nls_1.nls.localize('theia/vsx-registry/onlyShowVerifiedExtensionsTitle', 'Only Show Verified Extensions'), onClick: () => this.handleShowVerifiedExtensionsClick() });
    }
    handleShowVerifiedExtensionsClick() {
        this.extensionsModel.setOnlyShowVerifiedExtensions(!this.onlyShowVerifiedExtensions);
        this.update();
    }
    onActivateRequest(msg) {
        super.onActivateRequest(msg);
        if (this.input) {
            this.input.focus();
        }
    }
    onAfterAttach(msg) {
        super.onAfterAttach(msg);
        this.update();
    }
};
exports.VSXExtensionsSearchBar = VSXExtensionsSearchBar;
tslib_1.__decorate([
    (0, inversify_1.inject)(vsx_extensions_model_1.VSXExtensionsModel),
    tslib_1.__metadata("design:type", vsx_extensions_model_1.VSXExtensionsModel)
], VSXExtensionsSearchBar.prototype, "extensionsModel", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(vsx_extensions_search_model_1.VSXExtensionsSearchModel),
    tslib_1.__metadata("design:type", vsx_extensions_search_model_1.VSXExtensionsSearchModel)
], VSXExtensionsSearchBar.prototype, "searchModel", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(browser_1.PreferenceService),
    tslib_1.__metadata("design:type", Object)
], VSXExtensionsSearchBar.prototype, "preferenceService", void 0);
tslib_1.__decorate([
    (0, inversify_1.postConstruct)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], VSXExtensionsSearchBar.prototype, "init", null);
exports.VSXExtensionsSearchBar = VSXExtensionsSearchBar = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], VSXExtensionsSearchBar);
//# sourceMappingURL=vsx-extensions-search-bar.js.map