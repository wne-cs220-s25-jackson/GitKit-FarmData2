import { Event, URI, Disposable } from '@theia/core';
import { FileChange, FileDeleteOptions, FileOverwriteOptions, FileSystemProvider, FileType, FileWriteOptions, Stat, WatchOptions } from '@theia/filesystem/lib/common/files';
import { GitResourceResolver } from './git-resource-resolver';
import { EncodingService } from '@theia/core/lib/common/encoding-service';
export declare class GitFileSystemProvider implements FileSystemProvider {
    readonly capabilities: number;
    readonly onDidChangeCapabilities: Event<void>;
    readonly onDidChangeFile: Event<readonly FileChange[]>;
    readonly onFileWatchError: Event<void>;
    protected readonly resourceResolver: GitResourceResolver;
    protected readonly encodingService: EncodingService;
    watch(resource: URI, opts: WatchOptions): Disposable;
    stat(resource: URI): Promise<Stat>;
    readFile(resource: URI): Promise<Uint8Array>;
    writeFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void>;
    mkdir(resource: URI): Promise<void>;
    readdir(resource: URI): Promise<[string, FileType][]>;
    delete(resource: URI, opts: FileDeleteOptions): Promise<void>;
    rename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void>;
}
//# sourceMappingURL=git-file-system-provider.d.ts.map