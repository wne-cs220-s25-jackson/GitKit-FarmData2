"use strict";
// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitUriLabelProviderContribution = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("@theia/core/shared/inversify");
const label_provider_1 = require("@theia/core/lib/browser/label-provider");
const uri_1 = tslib_1.__importDefault(require("@theia/core/lib/common/uri"));
const git_resource_1 = require("./git-resource");
let GitUriLabelProviderContribution = class GitUriLabelProviderContribution {
    constructor(labelProvider) {
        this.labelProvider = labelProvider;
    }
    canHandle(element) {
        if (element instanceof uri_1.default && element.scheme === git_resource_1.GIT_RESOURCE_SCHEME) {
            return 20;
        }
        return 0;
    }
    getLongName(uri) {
        return this.labelProvider.getLongName(this.toFileUri(uri).withoutQuery().withoutFragment());
    }
    getName(uri) {
        return this.labelProvider.getName(this.toFileUri(uri)) + this.getTagSuffix(uri);
    }
    getIcon(uri) {
        return this.labelProvider.getIcon(this.toFileUri(uri));
    }
    affects(uri, event) {
        const fileUri = this.toFileUri(uri);
        return event.affects(fileUri) || event.affects(fileUri.withoutQuery().withoutFragment());
    }
    toFileUri(uri) {
        return uri.withScheme('file');
    }
    getTagSuffix(uri) {
        if (uri.query) {
            return ` (${uri.query})`;
        }
        else {
            return '';
        }
    }
};
exports.GitUriLabelProviderContribution = GitUriLabelProviderContribution;
exports.GitUriLabelProviderContribution = GitUriLabelProviderContribution = tslib_1.__decorate([
    (0, inversify_1.injectable)(),
    tslib_1.__param(0, (0, inversify_1.inject)(label_provider_1.LabelProvider)),
    tslib_1.__metadata("design:paramtypes", [label_provider_1.LabelProvider])
], GitUriLabelProviderContribution);
//# sourceMappingURL=git-uri-label-contribution.js.map