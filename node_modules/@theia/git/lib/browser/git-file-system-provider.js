"use strict";
// *****************************************************************************
// Copyright (C) 2024 1C-Soft LLC and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitFileSystemProvider = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("@theia/core/shared/inversify");
const core_1 = require("@theia/core");
const files_1 = require("@theia/filesystem/lib/common/files");
const git_resource_resolver_1 = require("./git-resource-resolver");
const encoding_service_1 = require("@theia/core/lib/common/encoding-service");
let GitFileSystemProvider = class GitFileSystemProvider {
    constructor() {
        this.capabilities = 2048 /* FileSystemProviderCapabilities.Readonly */ |
            2 /* FileSystemProviderCapabilities.FileReadWrite */ | 1024 /* FileSystemProviderCapabilities.PathCaseSensitive */;
        this.onDidChangeCapabilities = core_1.Event.None;
        this.onDidChangeFile = core_1.Event.None;
        this.onFileWatchError = core_1.Event.None;
    }
    watch(resource, opts) {
        return core_1.Disposable.NULL;
    }
    async stat(resource) {
        const gitResource = await this.resourceResolver.getResource(resource);
        const size = await gitResource.getSize();
        return { type: files_1.FileType.File, mtime: 0, ctime: 0, size };
    }
    async readFile(resource) {
        const gitResource = await this.resourceResolver.getResource(resource);
        const contents = await gitResource.readContents({ encoding: 'binary' });
        return this.encodingService.encode(contents, { encoding: 'binary', hasBOM: false }).buffer;
    }
    writeFile(resource, content, opts) {
        throw new Error('Method not implemented.');
    }
    mkdir(resource) {
        throw new Error('Method not implemented.');
    }
    readdir(resource) {
        throw new Error('Method not implemented.');
    }
    delete(resource, opts) {
        throw new Error('Method not implemented.');
    }
    rename(from, to, opts) {
        throw new Error('Method not implemented.');
    }
};
exports.GitFileSystemProvider = GitFileSystemProvider;
tslib_1.__decorate([
    (0, inversify_1.inject)(git_resource_resolver_1.GitResourceResolver),
    tslib_1.__metadata("design:type", git_resource_resolver_1.GitResourceResolver)
], GitFileSystemProvider.prototype, "resourceResolver", void 0);
tslib_1.__decorate([
    (0, inversify_1.inject)(encoding_service_1.EncodingService),
    tslib_1.__metadata("design:type", encoding_service_1.EncodingService)
], GitFileSystemProvider.prototype, "encodingService", void 0);
exports.GitFileSystemProvider = GitFileSystemProvider = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], GitFileSystemProvider);
//# sourceMappingURL=git-file-system-provider.js.map