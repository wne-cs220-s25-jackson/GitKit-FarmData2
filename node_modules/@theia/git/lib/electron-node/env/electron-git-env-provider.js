"use strict";
// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElectronGitEnvProvider = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("@theia/core/shared/inversify");
const git_env_provider_1 = require("../../node/env/git-env-provider");
const askpass_1 = require("../askpass/askpass");
/**
 * Git environment provider for Electron.
 *
 * This Git environment provider is customized for the Electron-based application. It sets the `GIT_ASKPASS` environment variable, to run
 * a custom script for the authentication.
 */
let ElectronGitEnvProvider = class ElectronGitEnvProvider extends git_env_provider_1.DefaultGitEnvProvider {
    init() {
        super.init();
        this.toDispose.push(this.askpass);
    }
    async getEnv() {
        if (!this._env) {
            this._env = this.askpass.getEnv();
        }
        return this._env;
    }
};
exports.ElectronGitEnvProvider = ElectronGitEnvProvider;
tslib_1.__decorate([
    (0, inversify_1.inject)(askpass_1.Askpass),
    tslib_1.__metadata("design:type", askpass_1.Askpass)
], ElectronGitEnvProvider.prototype, "askpass", void 0);
tslib_1.__decorate([
    (0, inversify_1.postConstruct)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], ElectronGitEnvProvider.prototype, "init", null);
exports.ElectronGitEnvProvider = ElectronGitEnvProvider = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], ElectronGitEnvProvider);
//# sourceMappingURL=electron-git-env-provider.js.map