"use strict";
// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitRepositoryManager = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("@theia/core/shared/inversify");
const core_1 = require("@theia/core");
const git_repository_watcher_1 = require("./git-repository-watcher");
let GitRepositoryManager = class GitRepositoryManager {
    constructor() {
        this.watchers = new core_1.ReferenceCollection(repository => this.watcherFactory({ repository }));
    }
    run(repository, op) {
        const result = op();
        result.then(() => this.sync(repository).catch(e => console.log(e)));
        return result;
    }
    getWatcher(repository) {
        return this.watchers.acquire(repository);
    }
    async sync(repository) {
        const reference = await this.getWatcher(repository);
        const watcher = reference.object;
        // dispose the reference once the next sync cycle is actually completed
        watcher.sync().then(() => reference.dispose());
    }
};
exports.GitRepositoryManager = GitRepositoryManager;
tslib_1.__decorate([
    (0, inversify_1.inject)(git_repository_watcher_1.GitRepositoryWatcherFactory),
    tslib_1.__metadata("design:type", Function)
], GitRepositoryManager.prototype, "watcherFactory", void 0);
exports.GitRepositoryManager = GitRepositoryManager = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], GitRepositoryManager);
//# sourceMappingURL=git-repository-manager.js.map