"use strict";
// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.FolderPreferenceProvider = exports.FolderPreferenceProviderFolder = exports.FolderPreferenceProviderFactory = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("@theia/core/shared/inversify");
const browser_1 = require("@theia/core/lib/browser");
const files_1 = require("@theia/filesystem/lib/common/files");
const section_preference_provider_1 = require("./section-preference-provider");
exports.FolderPreferenceProviderFactory = Symbol('FolderPreferenceProviderFactory');
exports.FolderPreferenceProviderFolder = Symbol('FolderPreferenceProviderFolder');
let FolderPreferenceProvider = class FolderPreferenceProvider extends section_preference_provider_1.SectionPreferenceProvider {
    get folderUri() {
        if (!this._folderUri) {
            this._folderUri = this.folder.resource;
        }
        return this._folderUri;
    }
    getScope() {
        if (!this.workspaceService.isMultiRootWorkspaceOpened) {
            // when FolderPreferenceProvider is used as a delegate of WorkspacePreferenceProvider in a one-folder workspace
            return browser_1.PreferenceScope.Workspace;
        }
        return browser_1.PreferenceScope.Folder;
    }
    getDomain() {
        return [this.folderUri.toString()];
    }
};
exports.FolderPreferenceProvider = FolderPreferenceProvider;
tslib_1.__decorate([
    (0, inversify_1.inject)(exports.FolderPreferenceProviderFolder),
    tslib_1.__metadata("design:type", Object)
], FolderPreferenceProvider.prototype, "folder", void 0);
exports.FolderPreferenceProvider = FolderPreferenceProvider = tslib_1.__decorate([
    (0, inversify_1.injectable)()
], FolderPreferenceProvider);
//# sourceMappingURL=folder-preference-provider.js.map