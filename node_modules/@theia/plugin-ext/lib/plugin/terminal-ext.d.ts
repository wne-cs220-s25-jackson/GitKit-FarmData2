/// <reference types="@theia/plugin/src/theia-extra" />
/// <reference types="@theia/plugin/lib/theia.proposed.createFileSystemWatcher" />
/// <reference types="@theia/plugin/src/theia.proposed.debugVisualization" />
/// <reference types="@theia/plugin/lib/theia.proposed.multiDocumentHighlightProvider" />
/// <reference types="@theia/plugin/src/theia.proposed.notebookCellExecutionState" />
/// <reference types="@theia/plugin/src/theia.proposed.notebookKernelSource" />
/// <reference types="@theia/plugin/src/theia.proposed.notebookMessaging" />
/// <reference types="@theia/plugin/src/theia.proposed.portsAttributes" />
/// <reference types="@theia/plugin/src/theia.proposed.terminalCompletionProvider" />
/// <reference types="@theia/plugin/src/theia-extra" />
/// <reference types="@theia/plugin/src/theia.proposed.canonicalUriProvider" />
/// <reference types="@theia/plugin/src/theia.proposed.customEditorMove" />
/// <reference types="@theia/plugin/src/theia.proposed.diffCommand" />
/// <reference types="@theia/plugin/src/theia.proposed.documentPaste" />
/// <reference types="@theia/plugin/src/theia.proposed.editSessionIdentityProvider" />
/// <reference types="@theia/plugin/src/theia.proposed.extensionsAny" />
/// <reference types="@theia/plugin/src/theia.proposed.externalUriOpener" />
/// <reference types="@theia/plugin/src/theia.proposed.findTextInFiles" />
/// <reference types="@theia/plugin/src/theia.proposed.fsChunks" />
/// <reference types="@theia/plugin/src/theia.proposed.mappedEditsProvider" />
/// <reference types="@theia/plugin/src/theia.proposed.profileContentHandlers" />
/// <reference types="@theia/plugin/src/theia.proposed.resolvers" />
/// <reference types="@theia/plugin/src/theia.proposed.scmValidation" />
/// <reference types="@theia/plugin/src/theia.proposed.shareProvider" />
/// <reference types="@theia/plugin/src/theia.proposed.terminalQuickFixProvider" />
/// <reference types="@theia/plugin/src/theia.proposed.textSearchProvider" />
/// <reference types="@theia/plugin/src/theia.proposed.timeline" />
import { TerminalServiceExt, TerminalServiceMain, Plugin } from '../common/plugin-api-rpc';
import { RPCProtocol } from '../common/rpc-protocol';
import { Event, Emitter } from '@theia/core/lib/common/event';
import { MultiKeyMap } from '@theia/core/lib/common/collections';
import { Deferred } from '@theia/core/lib/common/promise-util';
import * as theia from '@theia/plugin';
import { SerializableEnvironmentVariableCollection } from '@theia/terminal/lib/common/shell-terminal-protocol';
import { ProvidedTerminalLink } from '../common/plugin-api-rpc-model';
/**
 * Provides high level terminal plugin api to use in the Theia plugins.
 * This service allow(with help proxy) create and use terminal emulator.
 */
export declare class TerminalServiceExtImpl implements TerminalServiceExt {
    private readonly proxy;
    private readonly _terminals;
    private readonly _pseudoTerminals;
    private static nextProviderId;
    private readonly terminalLinkProviders;
    private readonly terminalObservers;
    private readonly terminalProfileProviders;
    private readonly onDidCloseTerminalEmitter;
    readonly onDidCloseTerminal: theia.Event<theia.Terminal>;
    private readonly onDidOpenTerminalEmitter;
    readonly onDidOpenTerminal: theia.Event<theia.Terminal>;
    private readonly onDidChangeActiveTerminalEmitter;
    readonly onDidChangeActiveTerminal: theia.Event<theia.Terminal | undefined>;
    private readonly onDidChangeTerminalStateEmitter;
    readonly onDidChangeTerminalState: theia.Event<theia.Terminal>;
    protected environmentVariableCollections: MultiKeyMap<string, EnvironmentVariableCollectionImpl>;
    private shell;
    private readonly onDidChangeShellEmitter;
    readonly onDidChangeShell: theia.Event<string>;
    constructor(rpc: RPCProtocol);
    get terminals(): TerminalExtImpl[];
    get defaultShell(): string;
    $setShell(shell: string): Promise<void>;
    createTerminal(plugin: Plugin, nameOrOptions: theia.TerminalOptions | theia.PseudoTerminalOptions | theia.ExtensionTerminalOptions | string | undefined, shellPath?: string, shellArgs?: string[] | string): theia.Terminal;
    attachPtyToTerminal(terminalId: number, pty: theia.Pseudoterminal): void;
    protected obtainTerminal(id: string, name: string, options?: theia.TerminalOptions | theia.ExtensionTerminalOptions): TerminalExtImpl;
    $terminalOnInput(id: string, data: string): void;
    $terminalStateChanged(id: string): void;
    $terminalSizeChanged(id: string, clos: number, rows: number): void;
    $terminalCreated(id: string, name: string): void;
    $terminalNameChanged(id: string, name: string): void;
    $terminalOpened(id: string, processId: number, terminalId: number, cols: number, rows: number): void;
    $terminalClosed(id: string, exitStatus: theia.TerminalExitStatus | undefined): void;
    private activeTerminalId;
    get activeTerminal(): TerminalExtImpl | undefined;
    $currentTerminalChanged(id: string | undefined): void;
    registerTerminalLinkProvider(provider: theia.TerminalLinkProvider): theia.Disposable;
    registerTerminalProfileProvider(id: string, provider: theia.TerminalProfileProvider): theia.Disposable;
    /** @stubbed */
    registerTerminalQuickFixProvider(id: string, provider: theia.TerminalQuickFixProvider): theia.Disposable;
    registerTerminalObserver(observer: theia.TerminalObserver): theia.Disposable;
    $reportOutputMatch(observerId: string, groups: string[]): void;
    protected isExtensionTerminalOptions(options: theia.TerminalOptions | theia.ExtensionTerminalOptions): options is theia.ExtensionTerminalOptions;
    $startProfile(profileId: string, cancellationToken: theia.CancellationToken): Promise<string>;
    $provideTerminalLinks(line: string, terminalId: string, token: theia.CancellationToken): Promise<ProvidedTerminalLink[]>;
    $handleTerminalLink(link: ProvidedTerminalLink): Promise<void>;
    getEnvironmentVariableCollection(extensionIdentifier: string, rootUri?: string): theia.GlobalEnvironmentVariableCollection;
    private syncEnvironmentVariableCollection;
    private setEnvironmentVariableCollection;
    $initEnvironmentVariableCollections(collections: [string, string, boolean, SerializableEnvironmentVariableCollection][]): void;
}
export declare class EnvironmentVariableCollectionImpl implements theia.GlobalEnvironmentVariableCollection {
    readonly map: Map<string, theia.EnvironmentVariableMutator>;
    private _description?;
    private _persistent;
    get description(): string | theia.MarkdownString | undefined;
    set description(value: string | theia.MarkdownString | undefined);
    get persistent(): boolean;
    set persistent(value: boolean);
    protected readonly onDidChangeCollectionEmitter: Emitter<void>;
    onDidChangeCollection: Event<void>;
    constructor(persistent: boolean, serialized?: SerializableEnvironmentVariableCollection);
    getScoped(scope: theia.EnvironmentVariableScope): theia.EnvironmentVariableCollection;
    get size(): number;
    replace(variable: string, value: string, options?: theia.EnvironmentVariableMutatorOptions): void;
    append(variable: string, value: string, options?: theia.EnvironmentVariableMutatorOptions): void;
    prepend(variable: string, value: string, options?: theia.EnvironmentVariableMutatorOptions): void;
    private _setIfDiffers;
    get(variable: string): theia.EnvironmentVariableMutator | undefined;
    forEach(callback: (variable: string, mutator: theia.EnvironmentVariableMutator, collection: theia.EnvironmentVariableCollection) => any, thisArg?: any): void;
    delete(variable: string): void;
    clear(): void;
}
export declare class TerminalExtImpl implements theia.Terminal {
    private readonly proxy;
    private readonly options;
    name: string;
    readonly id: Deferred<string>;
    exitStatus: theia.TerminalExitStatus | undefined;
    deferredProcessId: Deferred<number>;
    get processId(): Thenable<number>;
    readonly creationOptions: Readonly<theia.TerminalOptions | theia.ExtensionTerminalOptions>;
    state: theia.TerminalState;
    constructor(proxy: TerminalServiceMain, options: theia.TerminalOptions | theia.ExtensionTerminalOptions);
    /** @stubbed Terminal Shell Ingration */
    shellIntegration: theia.TerminalShellIntegration | undefined;
    sendText(text: string, shouldExecute?: boolean): void;
    show(preserveFocus?: boolean): void;
    hide(): void;
    dispose(): void;
}
export declare class PseudoTerminal {
    private readonly proxy;
    private readonly pseudoTerminal;
    constructor(id: string | number, proxy: TerminalServiceMain, pseudoTerminal: theia.Pseudoterminal, waitOnExit?: boolean | string);
    emitOnClose(): void;
    emitOnInput(data: string): void;
    emitOnOpen(cols: number, rows: number): void;
    emitOnResize(cols: number, rows: number): void;
}
//# sourceMappingURL=terminal-ext.d.ts.map