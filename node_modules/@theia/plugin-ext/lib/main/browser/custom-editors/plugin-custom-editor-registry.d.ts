import { CustomEditor, DeployedPlugin } from '../../../common';
import { Disposable } from '@theia/core/lib/common/disposable';
import { ApplicationShell, DefaultOpenerService, OpenWithService, PreferenceService, WidgetManager } from '@theia/core/lib/browser';
import { CustomEditorWidget } from './custom-editor-widget';
export declare class PluginCustomEditorRegistry {
    private readonly editors;
    private readonly pendingEditors;
    private readonly resolvers;
    private readonly onWillOpenCustomEditorEmitter;
    readonly onWillOpenCustomEditor: import("@theia/core").Event<string>;
    protected readonly defaultOpenerService: DefaultOpenerService;
    protected readonly widgetManager: WidgetManager;
    protected readonly shell: ApplicationShell;
    protected readonly openWithService: OpenWithService;
    protected readonly preferenceService: PreferenceService;
    protected init(): void;
    registerCustomEditor(editor: CustomEditor, plugin: DeployedPlugin): Disposable;
    resolveWidget(widget: CustomEditorWidget): Promise<void>;
    registerResolver(viewType: string, resolver: (widget: CustomEditorWidget) => Promise<void>): Disposable;
}
//# sourceMappingURL=plugin-custom-editor-registry.d.ts.map